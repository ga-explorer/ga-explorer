<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Geometric Algebra Explorer</title>
	<atom:link href="/index.php/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Voyaging the Computational Universe with Geometric Algebra</description>
	<lastBuildDate>Wed, 01 Nov 2017 17:01:55 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.8.3</generator>

<image>
	<url>/wp-content/uploads/2016/12/cropped-GAExplorer-Icon-150x150.jpg</url>
	<title>Geometric Algebra Explorer</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Exploring The Static Web</title>
		<link>/index.php/2017/10/18/exploring-static-web/</link>
		<pubDate>Wed, 18 Oct 2017 19:13:54 +0000</pubDate>
		<dc:creator><![CDATA[Ahmad Eid]]></dc:creator>
				<category><![CDATA[Exploration]]></category>
		<category><![CDATA[Blogging]]></category>
		<category><![CDATA[CMS]]></category>
		<category><![CDATA[Content Management System]]></category>
		<category><![CDATA[Dynamic Web Design]]></category>
		<category><![CDATA[GitHub]]></category>
		<category><![CDATA[JAMstack]]></category>
		<category><![CDATA[Netlify]]></category>
		<category><![CDATA[Static Web Design]]></category>
		<category><![CDATA[WordPress]]></category>

		<guid isPermaLink="false">/?p=3208</guid>
		<description><![CDATA[<p>&#160; A designer knows he has achieved perfection not when there is nothing left to add, but when there is nothing left to take away. &#8212; Antoine de Saint-Exupéry The Geometric Algebra Explorer website&#46;&#46;&#46;</p>
<p>The post <a rel="nofollow" href="/index.php/2017/10/18/exploring-static-web/">Exploring The Static Web</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>&nbsp;</p>
<p><img class="aligncenter size-large wp-image-3215" src="/wp-content/uploads/2017/10/spider-web-2732247_1280-1024x682.jpg" alt="Web Design" width="1024" height="682" srcset="/wp-content/uploads/2017/10/spider-web-2732247_1280-1024x682.jpg 1024w, /wp-content/uploads/2017/10/spider-web-2732247_1280-300x200.jpg 300w, /wp-content/uploads/2017/10/spider-web-2732247_1280-768x512.jpg 768w, /wp-content/uploads/2017/10/spider-web-2732247_1280.jpg 1280w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<blockquote><p>A designer knows he has achieved perfection not when there is nothing left to add, but when there is nothing left to take away. &#8212; Antoine de Saint-Exupéry</p></blockquote>
<p>The Geometric Algebra Explorer website has been up and running for more than 2 years now. I developed this website using the WordPress <a href="http://searchcontentmanagement.techtarget.com/definition/content-management-system-CMS" target="_blank" rel="noopener">Content Management System</a> (CMS). WordPress and its countless plugins provide many impressive features for dynamic website developers, especially if they don&#8217;t want to code much<sup class='endnote'><a href='#en-3208-1' id='enref-3208-1' onclick='return hhEndnotes_show(3208)'>1</a></sup>. I really enjoyed working with it, but it&#8217;s time for me to go static.</p>
<p>In this post, I share my reasons, experience, and final workflow for leaving dynamic web development with WordPress and going into the static web development side. I think this might be helpful to someone trying to do the same or wanting to develop a similar website. Enjoy!</p>
<h2>Web Needs</h2>
<p>When I started to look for a tool to create a blog for myself in 2015, I made many searches for the &#8220;best system&#8221;. Many sources pointed me towards WordPress.org. I found many good tutorials and reviews. I didn&#8217;t have a clear list of requirements back then for my blog, so I went with WordPress as being relatively easy to learn and use while providing many features.</p>
<p>After 2 years I found that I actually have a small and specific set of needs for my online work. I don&#8217;t currently need to buy or sell online, so plugins like <a href="https://woocommerce.com/" target="_blank" rel="noopener">WooCmmerce</a> are not relevant. I don&#8217;t need a glamorous theme like the <a href="https://themify.me/themes/ultra" target="_blank" rel="noopener">Themify Ultra</a> to show my ideas. What I actually need is:</p>
<ol>
<li>A simple workflow to add and edit good looking pages, posts, and menus.</li>
<li>Easy to learn and use; visual content management is preferred over coding.</li>
<li>Freedom and simplicity to include images, videos, links, mathematical equations, and nicely formatted code snippets.</li>
<li>A responsive fast loading website for better browsing experience.</li>
<li>Minimum website security management hassle.</li>
<li>As cheap as possible, and preferably free.</li>
</ol>
<p>Web development with WordPress brilliantly satisfies the first 3 points and can be made, with some effort, to satisfy the 4th, but doesn&#8217;t satisfy the last 2.</p>
<h2>Two Sides</h2>
<div id="attachment_3216" style="width: 279px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/10/Static-vs-Dynamic-Website.jpg"><img class="size-medium wp-image-3216" src="/wp-content/uploads/2017/10/Static-vs-Dynamic-Website-269x300.jpg" alt="Static-vs-Dynamic-Website" width="269" height="300" srcset="/wp-content/uploads/2017/10/Static-vs-Dynamic-Website-269x300.jpg 269w, /wp-content/uploads/2017/10/Static-vs-Dynamic-Website.jpg 573w" sizes="(max-width: 269px) 100vw, 269px" /></a><p class="wp-caption-text">Static vs Dynamic Website (<a href="http://yasmeenhy.blogspot.com.eg/2015/05/static-vs-dynamic-web-sites_13.html" target="_blank" rel="noopener">source</a>)</p></div>
<p>Static websites have been there from the start. People used to create static <a href="https://www.w3schools.com/html/" target="_blank" rel="noopener">HTML</a> pages with some <a href="http://www.w3.org/Style/CSS/Overview.en.html" target="_blank" rel="noopener">CSS</a> and <a href="https://www.w3schools.com/js/">JavaScript</a> that would be rendered on the user&#8217;s browser. The web server just stores these static files and delivers them the whoever has access to the server on the network. There was very little room for personalized content delivery as we experience it today.</p>
<p>Then came dynamic web servers where web pages are generated and delivered in real-time depending on many parameters the web server receives from the user. We then need to program the server to tell it how to generate the web pages for our users based on the parameters and their data stored on a server database. As these systems matured, we got many useful dynamic web systems, like WordPress, for delivering web content without even writing a single line of code for the server. Using such dynamic visual Content Management Systems, the web designer can develop a dynamic website using plugins and visual elements that have the server code inside them. The advantages of dynamic websites are many, but so are the disadvantages.</p>
<p>In the past couple of years, static websites came back into focus. Some of the <a href="https://www.quora.com/What-is-the-difference-between-Static-Websites-and-Dynamic-Websites" target="_blank" rel="noopener">advantages</a> with a static website are:</p>
<ul>
<li><strong>Speed:</strong> web servers are very good at delivering static pages quickly.</li>
<li><strong>Version control:</strong> having a repository where people can collaboratively work on a project is a big win.</li>
<li><strong>Security:</strong> with no database and no processing of scripts, there&#8217;s not much to mess up.</li>
<li><strong>Maintenance:</strong> there&#8217;s no packages, libraries, modules, frameworks and caching systems to maintain. So the cost is almost zero.</li>
<li><strong>Traffic surges:</strong> unexpected traffic peaks is less of a problem as static HTML pages consume a very small amount of server resources.</li>
<li><strong>Search Engine Optimization:</strong> Search engines like fast web pages.</li>
</ul>
<p>For many kinds of websites, like blogs, wikis, and online documentation sites, using a static website is a much better choice. One additional factor is the cost of having a dynamic vs. static website. Dynamic web hosting typically costs much more because the server needs a database and a good deal of security and maintenance efforts. For all these reasons I decided to migrate the GA Explorer into the static side of the web.</p>
<h2>The Search</h2>
<p><a href="/wp-content/uploads/2017/10/jekyll-sticker.jpg"><img class="alignright size-medium wp-image-3209" src="/wp-content/uploads/2017/10/jekyll-sticker-300x189.jpg" alt="Jekyll Sticker" width="300" height="189" srcset="/wp-content/uploads/2017/10/jekyll-sticker-300x189.jpg 300w, /wp-content/uploads/2017/10/jekyll-sticker.jpg 662w" sizes="(max-width: 300px) 100vw, 300px" /></a>A multitude of static web design tools has recently arrived. A <a href="https://www.staticgen.com/" target="_blank" rel="noopener">major class</a> of tools includes <a href="https://jekyllrb.com/" target="_blank" rel="noopener">Jekyll</a>, <a href="https://gohugo.io/" target="_blank" rel="noopener">Hugo</a>, <a href="https://middlemanapp.com/" target="_blank" rel="noopener">Middleman</a>, <a href="https://www.gatsbyjs.org/" target="_blank" rel="noopener">Gatsby</a>, and <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a><sup class='endnote'><a href='#en-3208-2' id='enref-3208-2' onclick='return hhEndnotes_show(3208)'>2</a></sup>. This class of tools, called the <a href="https://jamstack.org/" target="_blank" rel="noopener">JAMstack</a>, simply uses some form of static web template (a collection of pre-defined web pages with similar visual style and navigation) to generate the final web pages from text input. Most of these tools can take HTML or <a href="https://en.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">Markdown</a> text input for generating blog posts and pages. To create a new static website using such tools is a good experience. But because they have no visual interface, they almost always need non-trivial configuration and coding to customize the generated pages. I found it quite difficult and time-consuming, although possible, to migrate my online WordPress website to Jekyll, for example<sup class='endnote'><a href='#en-3208-3' id='enref-3208-3' onclick='return hhEndnotes_show(3208)'>3</a></sup>. To remedy the lack of visual interface of the JAMstack tools, <a href="https://www.cmscritic.com/flat-file-cms/" target="_blank" rel="noopener">many Flat File CMS</a>&#8216;s exist on top of them. I haven&#8217;t tried any of them myself, but I expect a huge interest and fierce competition in the coming years<sup class='endnote'><a href='#en-3208-4' id='enref-3208-4' onclick='return hhEndnotes_show(3208)'>4</a></sup>.</p>
<p>For my personal needs, the JAMstack and Flat File CMS tools are not suitable for many reasons. They require a fair amount of coding and configuration, a time-consuming learning and exploration process, in addition to the difficulty of migrating my existing work. After a lot of searching and exploration,</p>
<p><a href="/wp-content/uploads/2017/10/wordpress-581849_1280.jpg"><img class="alignright size-medium wp-image-3211" src="/wp-content/uploads/2017/10/wordpress-581849_1280-300x160.jpg" alt="wordpress-581849_1280" width="300" height="160" srcset="/wp-content/uploads/2017/10/wordpress-581849_1280-300x160.jpg 300w, /wp-content/uploads/2017/10/wordpress-581849_1280-768x409.jpg 768w, /wp-content/uploads/2017/10/wordpress-581849_1280-1024x546.jpg 1024w, /wp-content/uploads/2017/10/wordpress-581849_1280.jpg 1280w" sizes="(max-width: 300px) 100vw, 300px" /></a>After a lot of searching and exploration, I finally returned to WordPress again. The WordPress system itself is an open source project and anyone can create a personal web server and install WordPress on it for free. In a final act of exploration, I tried searching for a WordPress plugin that can generate static HTML+CSS+JavaScript files from the dynamic WordPress website. I was surprised and pleased to find two very good plugins for this task. This was a very exciting discovery for me because it meant that I could continue developing my work with WordPress and then generate and publish the static website from it after a small amount of tweaking. Such mixed workflow would allow me to get all the benefits of both dynamic and static web development for my needs. It also meant that I could keep my previous WordPress work with minimum conversion effort and start publishing and updating my new static website in a few days, rather than months. I then had to make some final experiments to make sure which WordPress components and plugins to use for the static website to work correctly after generation. I managed to create a good and simple workflow that satisfies all my blogging and documentation needs. And the best of all, everything in the workflow is completely free.</p>
<h2>Workflow</h2>
<p><a href="/wp-content/uploads/2017/10/industry-2633879_640.jpg"><img class="alignright size-medium wp-image-3288" src="/wp-content/uploads/2017/10/industry-2633879_640-300x200.jpg" alt="Workflow" width="300" height="200" srcset="/wp-content/uploads/2017/10/industry-2633879_640-300x200.jpg 300w, /wp-content/uploads/2017/10/industry-2633879_640.jpg 640w" sizes="(max-width: 300px) 100vw, 300px" /></a>After two full weeks of exploration, here is my final workflow for my static website. I will list the steps of the two stages of initializing the tools and then updating the website. Initialization is only made once, so it&#8217;s very important to get right be patient with it. I will not provide detailed explanations but rather give a general idea about the needed steps. This way, anyone deciding to use this can explore other changes suiting specific needs.</p>
<h3 style="text-align: center;">Stage I: Initializing Your Website</h3>
<p><strong>Step I.1. Installing Local WordPress Server</strong></p>
<p>First of all, you need to install WordPress on a local server for your personal access. No one else would be accessing this server, so it can be made as a simple <a href="https://www.howtogeek.com/196060/beginner-geek-how-to-create-and-use-virtual-machines/" target="_blank" rel="noopener">Virtual Machine</a> on your personal computer or laptop. I found a very good virtual machine that already contains a WordPress installation. You can find and download it here: <a href="https://www.turnkeylinux.org/wordpress" target="_blank" rel="noopener">www.turnkeylinux.org/wordpress</a></p>
<p>After downloading the virtual machine file you can use any <a href="https://www.digitaltrends.com/computing/best-virtual-machine-apps-for-mac-linux-and-windows-pcs/" target="_blank" rel="noopener">Virtual Machine Application</a> to open it as a virtual server for you to access locally. I personally use <a href="https://www.vmware.com/products/workstation-player.html" target="_blank" rel="noopener">VMWare player</a> for this task.</p>
<p><a href="/wp-content/uploads/2017/10/Virtual-Server-IPs.png"><img class="alignright size-medium wp-image-3212" src="/wp-content/uploads/2017/10/Virtual-Server-IPs-300x209.png" alt="Virtual-Server-IPs" width="300" height="209" srcset="/wp-content/uploads/2017/10/Virtual-Server-IPs-300x209.png 300w, /wp-content/uploads/2017/10/Virtual-Server-IPs.png 516w" sizes="(max-width: 300px) 100vw, 300px" /></a>When you start the Turnkey WordPress virtual machine it will ask about some usernames and passwords. Enter these and keep them somewhere safe. These users and passwords will allow you to access the virtual server itself and the WordPress dashboard for developing your site. You should finally arrive at a screen with a listing of IPs like this one<sup class='endnote'><a href='#en-3208-5' id='enref-3208-5' onclick='return hhEndnotes_show(3208)'>5</a></sup>.</p>
<p>The IP addresses in this screen are local to your system. You need to keep them for your access. The first IP (192.168.80.133 in this picture) is the main address of your WordPress installation. Open any browser in your PC and go to this IP and WordPress opens. Then you can work with WordPress like do online. The last IP (labeled SSH/SFTP in the picture) is very important for some tasks. You can use an FTP client application, like <a href="https://filezilla-project.org/" target="_blank" rel="noopener">FileZilla</a>, to access the file structure of your virtual server at any time. This is sometimes helpful for some maintenance tasks, but most of the time you won&#8217;t be needing it.</p>
<p>&nbsp;</p>
<p><strong>Step I.2. Configuring Local WordPress Server</strong></p>
<p>You can now open WordPress from your browser and make your initial configuration. This includes installing your theme and favorite plugins. I&#8217;m using the free and beautiful <a href="https://wordpress.org/themes/hueman/" target="_blank" rel="noopener">Hueman Theme</a>, which generates very well in the final static website. I also found this list of plugins very useful for my work for the final static website:</p>
<ul>
<li><a href="https://wordpress.org/plugins/broken-link-checker/" target="_blank" rel="noopener">Broken Link Checker</a>: This plugin will monitor your WordPress blog looking for broken links and let you know if any are found.</li>
<li><a href="https://wordpress.org/plugins/column-shortcodes/" target="_blank" rel="noopener">Column Shortcodes</a>: Adds shortcodes to easily create columns in your posts or pages</li>
<li><a href="https://wordpress.org/plugins/crayon-syntax-highlighter/" target="_blank" rel="noopener">Crayon Syntax Highlighter</a>: Very useful for showing formatted code in your posts and pages. It supports multiple languages, themes, highlighting from a URL, local file, or post text.</li>
<li><a href="https://wordpress.org/plugins/endnotes/" target="_blank" rel="noopener">Endnotes</a>: A simple solution for adding footnotes to your WordPress posts or pages.</li>
<li><a href="https://wordpress.org/plugins/forget-about-shortcode-buttons/" target="_blank" rel="noopener">Forget About Shortcode Buttons</a>: A visual way to add CSS buttons in the rich text editor and to your themes.</li>
<li><a href="https://wordpress.org/plugins/hueman-addons/" target="_blank" rel="noopener">Hueman Addons</a>. Some important add-ons for the Hueman theme.</li>
<li><a href="https://wordpress.org/plugins/megamenu/" target="_blank" rel="noopener">Max Mega Menu</a>: a complete menu management plugin, perfect for taking control of your existing menu and turning it into a user-friendly, accessible and touch-ready menu with just a few clicks.</li>
<li><a href="https://wordpress.org/plugins/slider-wd/" target="_blank" rel="noopener">Slider by WD</a>: Create responsive, highly configurable WordPress sliders with various effects for your WordPress site.</li>
<li><a href="https://wordpress.org/plugins/wp-katex/" target="_blank" rel="noopener">WP-KaTeX</a>: The plugin allows you to put LaTeX in a <pre class="crayon-plain-tag">[latex]...[/latex]</pre> shortcode and beautiful math appear on your post or page.</li>
</ul>
<p>You will also need to install one, or both, of these two great plugins on the local virtual WordPress server:</p>
<ul>
<li><a href="https://wordpress.org/plugins/static-html-output-plugin/" target="_blank" rel="noopener">WP Static HTML Output</a></li>
<li><a href="https://wordpress.org/plugins/simply-static/" target="_blank" rel="noopener">Simply Static</a></li>
</ul>
<p>You will use these plugins in stage II for generating the files of your static website from the local WordPress virtual server. To organize and reduce the size of image thumbnails on your site, you can also install:</p>
<ul>
<li><a href="https://wordpress.org/plugins/force-regenerate-thumbnails/" target="_blank" rel="noopener">Force Regenerate Thumbnails</a></li>
<li><a href="https://wordpress.org/plugins/thumbnail-cleaner/" target="_blank" rel="noopener">Thumbnail Cleaner</a></li>
<li><a href="https://wordpress.org/plugins/regenerate-thumbnails/" target="_blank" rel="noopener">Regenerate Thumbnails</a></li>
</ul>
<p>You can find a nice tutorial explaining these thumbnails organization plugins <a href="https://www.webnots.com/how-to-cleanup-thumbnails-in-wordpress/" target="_blank" rel="noopener">here</a>.</p>
<p>&nbsp;</p>
<p><strong>Step I.3. Migrating Online WordPress to Local WordPress</strong></p>
<p><a href="/wp-content/uploads/2017/10/wordpress-265132_640.jpg"><img class="alignright size-medium wp-image-2924" src="/wp-content/uploads/2017/10/wordpress-265132_640-300x200.jpg" alt="" width="300" height="200" /></a>Now it&#8217;s time to migrate your WordPress website from the online version, if you already have one like me, to your local WordPress virtual server. On the online WordPress site, you need to install the <a href="https://wordpress.org/plugins/wp-export-menus/" target="_blank" rel="noopener">Export WordPress Menus plugin</a> to export your online menus as an XML file. Then you can use the builtin <a href="https://en.support.wordpress.com/export/" target="_blank" rel="noopener">WordPress Export tool</a> to generate one or more XML files from your online WordPress website. You can also install the <a href="https://wordpress.org/plugins/wp-exporter/" target="_blank" rel="noopener">WordPress Exporter plugin</a> to export single pages, posts, or media files as you wish.</p>
<p>You will then import these XML files to your local virtual WordPress server while it&#8217;s connected to the internet to get a copy of all your posts, pages, media files, and menus. On the local WordPress virtual server install the <a href="https://wordpress.org/plugins/wordpress-importer/" target="_blank" rel="noopener">WordPress Importer plugin</a>. You can use <a href="https://www.youtube.com/watch?v=9Oa2LEdoqdY" target="_blank" rel="noopener">this tutorial video</a> for instructions on how to import your online contents using the XML files. Just make sure to check the &#8220;Download and import file attachments&#8221; checkbox to get all your contents. You will need to wait for the whole process to complete, and it may take longer if you have a large online website.</p>
<p>&nbsp;</p>
<p><strong>Step I.4. Update URLs on the Local WordPress Server</strong></p>
<p>After importing your online website into your local virtual server you can expect to still have links to the online version. You don&#8217;t want these links on your final static website, however. To solve this problem you can install and use the <a href="https://wordpress.org/plugins/velvet-blues-update-urls/" target="_blank" rel="noopener">Velvet Blues Update URLs</a> plugin in your local WordPress virtual server to replace such links with your local WordPress server address. You can also test all your links on the local server using the <a href="https://wordpress.org/plugins/broken-link-checker/" target="_blank" rel="noopener">Broken Link Checker</a> plugin. After making sure everything is ok you can test your local site and make any necessary updates, configurations, and improvements.</p>
<p>&nbsp;</p>
<p><strong>Step I.5. Selecting Online Web Hosting for the Static Website</strong></p>
<p>If you already have web hosting for your future static website, you can skip to the second stage of this workflow. But for those who need good suggestions, I will tell what I did.</p>
<p>Two good options for free static web hosting are <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub pages</a> and <a href="https://www.netlify.com/" target="_blank" rel="noopener">Netlify</a>. Many bloggers and companies use one or both for their static websites. For my workflow, I use GitHub only as a repository for uploading the static website&#8217;s generated files: HTML, CSS, JavaScript, etc. As I will shortly explain in stage II, I generate my static website files from the local WordPress virtual server. I have a local GitHub repository linked with an online one under <a href="https://github.com/ga-explorer" target="_blank" rel="noopener">my GitHub account</a>. I use <a href="https://desktop.github.com/" target="_blank" rel="noopener">GitHub Desktop</a> to synchronize the local and online GitHub repositories regularly while developing my static website. I&#8217;ve created a Netlify free account that I use to deploy my GitHub online repository files as an online website. I found using Netlify offering many advantages over GitHub pages as described <a href="https://www.netlify.com/github-pages-vs-netlify/" target="_blank" rel="noopener">here</a> and <a href="https://yihui.name/en/2017/06/netlify-instead-of-github-pages/" target="_blank" rel="noopener">here</a>. You can take a look at one of my sites, the GMac Guides website, hosted on Netlify <a href="https://gmac-guides.netlify.com/" target="_blank" rel="noopener">here</a> and its source web page files on GitHub <a href="https://github.com/ga-explorer/gmac-guides" target="_blank" rel="noopener">here</a>.</p>
<p>&nbsp;</p>
<h3 style="text-align: center;">Stage II: Updating Your Website</h3>
<p style="text-align: left;"><a href="/wp-content/uploads/2017/10/laptop-1246672_640.jpg"><img class="alignright size-medium wp-image-2925" src="/wp-content/uploads/2017/10/laptop-1246672_640-300x221.jpg" alt="" width="300" height="221" /></a></p>
<p>This is the easy part of the workflow. If you have enough patience to complete stage I successfully, you can update your website using WordPress&#8217;s dashboard and plugins, then you can generate your static pages and upload to the online hosting service.</p>
<p style="text-align: left;">You start by using either the <a href="https://wordpress.org/plugins/static-html-output-plugin/" target="_blank" rel="noopener">WP Static HTML Output</a> or <a href="https://wordpress.org/plugins/simply-static/" target="_blank" rel="noopener">Simply Static</a> plugin to generate your static pages and files. I found that WP Static HTML Output generates files with less size, but I suspect Simply Static may give better results for some themes and formatting plugins. The next step is to use a good text editor, like <a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">Notepad++</a>, to replace all URLs containing your local server address with the final web hosting server address. For example, I use Notepad++ <pre class="crayon-plain-tag">Find in Files...</pre> menu to mass-replace text like <pre class="crayon-plain-tag">192.168.80.133</pre> with <pre class="crayon-plain-tag">gmac-guides.netlify.com</pre> in all generated files of the static website. The final step is a simple matter of uploading your generated files to the web hosting service, GitHub in my case, and publishing the website online.</p>
<h2>Things to Explore</h2>
<p>If you like this workflow you can make many more explorations of your own. For example, you can try other themes with more interesting visual styles, menu, and formatting plugins<sup class='endnote'><a href='#en-3208-6' id='enref-3208-6' onclick='return hhEndnotes_show(3208)'>6</a></sup>. You can also explore email-based commenting systems like <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a>. You can even explore modifying the generated web pages using other web design tools. I also found <a href="https://www.youtube.com/watch?v=mXcQ7rVn3ro" target="_blank" rel="noopener">adding google analytics code</a> to be relatively easy in this workflow.</p>
<p>My new <a href="https://ga-explorer.netlify.com/" target="_blank" rel="noopener">GA Explorer</a> static website is now online. I&#8217;m happy to continue using WordPress with all its power for its development while gaining all of the benefits of using the static side of the web.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class='endnotes' id='hhendnotes-3208'>
<ol>
<li id='en-3208-1'>If you want to learn WordPress <a href="https://www.youtube.com/user/wpSculptor/featured" target="_blank" rel="noopener">the wpSculptor YouTube channel</a> contains excellent tutorials for you. I personally used <a href="https://www.youtube.com/watch?v=DyARzdLKjKw" target="_blank" rel="noopener">this one</a> back in 2015 for my work. <span class='endnotereverse'><a href='#enref-3208-1'>&#8617;</a></span></li>
<li id='en-3208-2'>For a nice collection of tutorials on these tools see the <a href="https://www.youtube.com/channel/UCvmINlrza7JHB1zkIOuXEbw/playlists?shelf_id=0&amp;view=1&amp;sort=dd" target="_blank" rel="noopener">Giraffe Academy YouTube channel</a> <span class='endnotereverse'><a href='#enref-3208-2'>&#8617;</a></span></li>
<li id='en-3208-3'>There are many other reasons why I don&#8217;t prefer this class of tools, some are listed <a href="https://www.sitepoint.com/7-reasons-not-use-static-site-generator/" target="_blank" rel="noopener">here</a>. <span class='endnotereverse'><a href='#enref-3208-3'>&#8617;</a></span></li>
<li id='en-3208-4'>One tool I expect to grow in the future is <a href="https://getpublii.com/" target="_blank" rel="noopener">Publii</a>; an application for building static websites directly on your desktop. <span class='endnotereverse'><a href='#enref-3208-4'>&#8617;</a></span></li>
<li id='en-3208-5'>You must configure your Virtual Machine Application to allow internet access to the virtual host, of course. I use <a href="https://www.vmware.com/support/ws45/doc/network_configure_ws.html" target="_blank" rel="noopener">NAT port mapping in VMWare</a> to get these IPs for my virtual server <span class='endnotereverse'><a href='#enref-3208-5'>&#8617;</a></span></li>
<li id='en-3208-6'>The <a href="https://wordpress.org/plugins/elementor/" target="_blank" rel="noopener">Elementor Page Builder</a> plugin is a beautiful addition to WordPress you can use to create very nice looking pages and posts. The official <a href="https://www.youtube.com/channel/UCt9kG_EDX8zwGSC1-ycJJVA/featured" target="_blank" rel="noopener">Elementor YouTube channel</a> contains many excellent tutorials. You can also find a nice comprehensive tutorial about it <a href="https://www.youtube.com/watch?v=kwmvGpcJux0" target="_blank" rel="noopener">here</a>. <span class='endnotereverse'><a href='#enref-3208-6'>&#8617;</a></span></li>
</ol>
</div>
<p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=%2Findex.php%2F2017%2F10%2F18%2Fexploring-static-web%2F&amp;linkname=Exploring%20The%20Static%20Web" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=%2Findex.php%2F2017%2F10%2F18%2Fexploring-static-web%2F&amp;linkname=Exploring%20The%20Static%20Web" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=%2Findex.php%2F2017%2F10%2F18%2Fexploring-static-web%2F&amp;linkname=Exploring%20The%20Static%20Web" title="Google+" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save" href="https://www.addtoany.com/share#url=%2Findex.php%2F2017%2F10%2F18%2Fexploring-static-web%2F&amp;title=Exploring%20The%20Static%20Web" data-a2a-url="/index.php/2017/10/18/exploring-static-web/" data-a2a-title="Exploring The Static Web"></a></p><p>The post <a rel="nofollow" href="/index.php/2017/10/18/exploring-static-web/">Exploring The Static Web</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Edifying The Young</title>
		<link>/index.php/2017/04/26/edifying-the-young/</link>
		<pubDate>Wed, 26 Apr 2017 08:00:20 +0000</pubDate>
		<dc:creator><![CDATA[Ahmad Eid]]></dc:creator>
				<category><![CDATA[GA Books]]></category>
		<category><![CDATA[GA Math]]></category>
		<category><![CDATA[Geometric Algebra]]></category>
		<category><![CDATA[Interview]]></category>
		<category><![CDATA[Geometric Calculus]]></category>
		<category><![CDATA[Learning]]></category>
		<category><![CDATA[Linear Algebra]]></category>
		<category><![CDATA[Teaching]]></category>

		<guid isPermaLink="false">https://gacomputing.info/?p=2731</guid>
		<description><![CDATA[<p>Two elementary courses common to modern physics, mathematics, and engineering curricula are Linear Algebra and Vector Calculus. Geometric Algebra is a natural and powerful extension of linear algebra and Geometric Calculus is even more so for vector calculus.</p>
<p>In this post, I interview Dr. Alan Macdonald who talks about his experience with both subjects and how he contributes in educating young undergraduate students about them through his books and online videos.</p>
<p>The post <a rel="nofollow" href="/index.php/2017/04/26/edifying-the-young/">Edifying The Young</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2017/04/mathematics-1622448_1280.jpg"><img class="aligncenter size-large wp-image-2759" src="/wp-content/uploads/2017/04/mathematics-1622448_1280-1024x682.jpg" alt="" width="1024" height="682" srcset="/wp-content/uploads/2017/04/mathematics-1622448_1280-1024x682.jpg 1024w, /wp-content/uploads/2017/04/mathematics-1622448_1280-300x200.jpg 300w, /wp-content/uploads/2017/04/mathematics-1622448_1280-768x512.jpg 768w, /wp-content/uploads/2017/04/mathematics-1622448_1280.jpg 1280w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p>
<p><span class="dropcap">T</span>wo elementary courses common to modern physics, mathematics, and engineering curricula are Linear Algebra and Vector Calculus. Geometric Algebra is a natural and powerful extension of linear algebra and Geometric Calculus is even more so for vector calculus.</p>
<p>In this post, I interview Dr. Alan Macdonald who talks about his experience with both subjects and how he contributes in educating young undergraduate students about them through his books and <a href="https://www.youtube.com/channel/UCymE67THrWoeTABxzJm1wdg/playlists" target="_blank" rel="noopener noreferrer">online videos</a>.</p>
<hr />
<p><a href="/wp-content/uploads/2017/04/macdonald.jpeg"><img class="alignright size-medium wp-image-2757" src="/wp-content/uploads/2017/04/macdonald-233x300.jpeg" alt="Dr. Alan Macdonald" width="233" height="300" srcset="/wp-content/uploads/2017/04/macdonald-233x300.jpeg 233w, /wp-content/uploads/2017/04/macdonald.jpeg 273w" sizes="(max-width: 233px) 100vw, 233px" /></a><a href="http://faculty.luther.edu/~macdonal/" target="_blank" rel="noopener noreferrer">Dr. Alan Macdonald</a> is Professor Emeritus of Mathematics at Luther College in Decorah Iowa. He received a Ph.D. in mathematics from The University of Michigan in 1970. His research interests include geometric algebra and the foundations of physics.</p>
<p>Dr. Alan is the author of two excellent books that introduce Geometric Algebra and Geometric Calculus to undergraduate students. In his first book <a href="http://faculty.luther.edu/~macdonal/laga/index.html" target="_blank" rel="noopener noreferrer"><em><strong>Linear and Geometric Algebra</strong></em></a>, he develops the first undergraduate text to cover the essentials of linear algebra and its extension to geometric algebra. Prof. David Hestenes commented on his first book saying:</p>
<blockquote><p>I commend Alan Macdonald for his excellent book! His exposition is clean and spare. He has done a fine job of engineering a gradual transition from standard views of linear algebra to the perspective of geometric algebra. The book is sufficiently conventional to be adopted as a textbook by an adventurous teacher without getting flack from colleagues. Yet it leads to gems of geometric algebra that are likely to delight thoughtful students and surprise even the most experienced instructors.</p></blockquote>
<p>His second book <a href="http://faculty.luther.edu/~macdonal/vagc/index.html" target="_blank" rel="noopener noreferrer"><em><strong>Vector and Geometric Calculus</strong></em></a> distinguishes itself from similar books on advanced calculus by two attributes: its thoroughgoing use of Geometric Algebra and the clarity of its exposition at an undergraduate level.</p>
<hr />
<p><span style="color: #000080;"><strong>Tell us about your life work in mathematics. What motivations and goals drove you through your research and teaching career? What obstacles did you face and how did you overcome them?</strong></span></p>
<p>I have taught and published in several different areas of mathematics and physics. I faced no serious obstacles in pursuing my varied interests (except to find more than 24 hours in a day). Lucky!</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>Tell us about what got you interested in Geometric Algebra. As a mathematician, what kinds of ideas in physics and geometry do you find naturally expressible using GA?</strong></span></p>
<p><a href="/wp-content/uploads/2017/04/cranium-2099129_640.png"><img class="alignright size-medium wp-image-2776" src="/wp-content/uploads/2017/04/cranium-2099129_640-300x187.png" alt="Exchange Ideas" width="300" height="187" srcset="/wp-content/uploads/2017/04/cranium-2099129_640-300x187.png 300w, /wp-content/uploads/2017/04/cranium-2099129_640.png 640w" sizes="(max-width: 300px) 100vw, 300px" /></a>I read strong claims about geometric algebra and decided to look for myself. I was smitten. I found that geometric algebra and its extension to geometric calculus unify, simplify, and generalize vast areas of mathematics involving geometric ideas, including linear algebra, vector calculus, complex analysis, exterior algebra and calculus, tensor algebra and calculus, quaternions (3D spinors), and euclidean, non-euclidean, and projective geometries. I also found that GA provides a common mathematical language for many areas of physics (classical and quantum mechanics, electrodynamics, special and general relativity), computer science (graphics, robotics, computer vision), engineering, and other fields. People in disparate fields can now talk to each other!</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>Some people say &#8220;Why should we learn and use GA when we already have many mathematical tools that work?&#8221;. How do you respond to this kind of question?</strong></span></p>
<p>My response: <em><strong>Geometric algebra unifies many of your mathematical tools and works better than any of them</strong>.</em> Unfortunately, this has not been sufficient to induce many to switch. GA takes time to learn. And once learned, there is the problem of communicating with others who haven&#8217;t learned. Nevertheless, geometric algebra is gaining adherents, slowly but surely.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>Tell us about the relation between Geometric Algebra and Linear Algebra. Can the basic ideas of linear algebra be reformulated using GA? How is that? What are the benefits of such reformulations and developments?</strong></span></p>
<p><a href="/wp-content/uploads/2017/04/Angular-Momentum-Bivector-and-Pseudovector.png"><img class="alignright size-medium wp-image-2778" src="/wp-content/uploads/2017/04/Angular-Momentum-Bivector-and-Pseudovector-300x205.png" alt="Angular Momentum Bivector and Pseudovector" width="300" height="205" srcset="/wp-content/uploads/2017/04/Angular-Momentum-Bivector-and-Pseudovector-300x205.png 300w, /wp-content/uploads/2017/04/Angular-Momentum-Bivector-and-Pseudovector.png 512w" sizes="(max-width: 300px) 100vw, 300px" /></a>Geometric algebra is a superset of linear algebra, with more objects, multivectors, and more operations; for example, the geometric product. So anything that linear algebra can do geometric algebra can do. Even within linear algebra, geometric algebra brings advantages. Here is a simple example. Consider the orthogonal complement of a subspace: the set of vectors orthogonal to all vectors in the subspace. For both linear and geometric algebra this <strong><em>geometric</em> </strong>definition tells us what the orthogonal complement <strong><em>is</em></strong>. Geometric algebra adds algebra, providing a very simple way to <strong><em>compute</em> </strong>the complement (as a dual), something linear algebra can&#8217;t do. This illustrates the name <em><strong>Geometric Algebra</strong></em>: it does geometry algebraically.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>Prof. David Hestenes talked in one of his lectures about your first undergraduates GA book and how it could have been a joint project. In what aspects does your vision for introducing GA to students relate to his?</strong></span></p>
<p>I share David Hestenes&#8217; vision of wide acceptance of GA and the advantages this will bring.</p>
<p>A vital aspect of making this happen is encouraging and enabling GA&#8217;s inclusion in the undergraduate mathematics curriculum. The only way that mathematics faculties will consider this is to have available GA texts written in traditional mathematics textbook style. This is my small contribution to Hestenes&#8217; vision.</p>
<p>Mathematicians have been infuriatingly slow in becoming interested in geometric algebra. We are repeating the short-sightedness of 120 years ago when <em><strong>Engineers welcomed Gibbs&#8217;s and Heaviside&#8217;s vector analysis, though the mathematicians did not</strong> </em><sup class='endnote'><a href='#en-2731-1' id='enref-2731-1' onclick='return hhEndnotes_show(2731)'>1</a></sup>.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>What kind of software tools do you think should be used in explaining GA and GC to undergraduate students? Are there any missing features you would like to see in current tools?</strong></span></p>
<p><a href="/wp-content/uploads/2017/04/Sympy-160px.png"><img class="alignright wp-image-2774" src="/wp-content/uploads/2017/04/Sympy-160px-300x300.png" alt="SymPy" width="227" height="227" srcset="/wp-content/uploads/2017/04/Sympy-160px-300x300.png 300w, /wp-content/uploads/2017/04/Sympy-160px-150x150.png 150w, /wp-content/uploads/2017/04/Sympy-160px-160x160.png 160w, /wp-content/uploads/2017/04/Sympy-160px-320x320.png 320w, /wp-content/uploads/2017/04/Sympy-160px.png 500w" sizes="(max-width: 227px) 100vw, 227px" /></a>I chose <a href="http://docs.sympy.org/0.7.0/modules/galgebra/GA/GAsympy.html" target="_blank" rel="noopener noreferrer">Alan Bromborsky&#8217;s GAlgebra</a> for my texts because it is free, it is multiplatform, it does <strong><em>symbolic</em> </strong>calculations, and it is well designed. But it is far from everything I could ask for: its syntax for expressions is sometimes awkward; it requires several other programs, e.g., Python, making installation difficult for some; and it has no graphics capability.</p>
<p>I would like to see a program with GAlgebra&#8217;s strengths but not its shortcomings.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>What are your expectations of the future of GA &amp; GC in teaching?</strong></span></p>
<p>My experience is in teaching undergraduate mathematics in the United States, so I will speak to that. Students typically take a year of scalar calculus in their first year of college, then courses in linear algebra and vector calculus in their second year.</p>
<p>The most natural place to introduce GA &amp; GC is right after scalar calculus. I believe that the current second-year linear algebra and vector calculus courses should be renamed <em>Geometric Algebra</em> and <em>Geometric Calculus</em>, their purpose being to provide the basic vocabulary of mathematics in dimensions greater than one. By judiciously trimming the current courses and taking advantage of the simplifications of GA &amp; GC, a lot of GA &amp; GC can be covered. My two textbooks <a href="https://www.amazon.com/Linear-Geometric-Algebra-Alan-Macdonald/dp/1453854932" target="_blank" rel="noopener noreferrer"><em>Linear and Geometric Algebra</em></a> and <a href="https://www.amazon.com/Vector-Geometric-Calculus-Alan-Macdonald/dp/1480132454/ref=pd_bxgy_14_img_2?_encoding=UTF8&amp;pd_rd_i=1480132454&amp;pd_rd_r=YMSWSBWDXT255WXMRTN6&amp;pd_rd_w=PZx9C&amp;pd_rd_wg=p6xhV&amp;psc=1&amp;refRID=YMSWSBWDXT255WXMRTN6" target="_blank" rel="noopener noreferrer"><em>Vector and Geometric Calculus</em></a> are attempts at this.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>Tell us about the mathematical developments you think are still necessary for GA &amp; GC to take their rightful place as the primary mathematical modeling language for this century. What kind of research should be conducted to effectively relate GA &amp; GC to mainstream mathematics and applications?</strong></span></p>
<p><a href="/wp-content/uploads/2017/04/2000px-Triple_Integral_Example_2.svg_.png"><img class="alignright size-medium wp-image-2775" src="/wp-content/uploads/2017/04/2000px-Triple_Integral_Example_2.svg_-300x300.png" alt="Triple Integral Example" width="300" height="300" srcset="/wp-content/uploads/2017/04/2000px-Triple_Integral_Example_2.svg_-300x300.png 300w, /wp-content/uploads/2017/04/2000px-Triple_Integral_Example_2.svg_-150x150.png 150w, /wp-content/uploads/2017/04/2000px-Triple_Integral_Example_2.svg_-768x768.png 768w, /wp-content/uploads/2017/04/2000px-Triple_Integral_Example_2.svg_-1024x1024.png 1024w, /wp-content/uploads/2017/04/2000px-Triple_Integral_Example_2.svg_-160x160.png 160w, /wp-content/uploads/2017/04/2000px-Triple_Integral_Example_2.svg_-320x320.png 320w" sizes="(max-width: 300px) 100vw, 300px" /></a>GA &amp; GC are well developed at the elementary level, ready for use. But there are problems to be solved before they can take their rightful place.</p>
<p>We face a chicken and egg problem: students must learn GA &amp; GC to apply them, and those applying vector methods, but not brought up on GA &amp; GC, must push for their inclusion in the curriculum. And if students learn GA &amp; GC in their second year, this cannot be a dead end: instructors in later courses must use them in their courses. Another problem: people are reluctant to publish using a mathematical formalism unknown to most. We can only do our best, making incremental progress until a critical mass is achieved.</p>
<div class='endnotes' id='hhendnotes-2731'>
<ol>
<li id='en-2731-1'>M. Kline, <em>Mathematical Thought from Ancient to Modern Times</em>, Oxford University Press, New York (1972), 791. <span class='endnotereverse'><a href='#enref-2731-1'>&#8617;</a></span></li>
</ol>
</div>
<p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=%2Findex.php%2F2017%2F04%2F26%2Fedifying-the-young%2F&amp;linkname=Edifying%20The%20Young" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=%2Findex.php%2F2017%2F04%2F26%2Fedifying-the-young%2F&amp;linkname=Edifying%20The%20Young" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=%2Findex.php%2F2017%2F04%2F26%2Fedifying-the-young%2F&amp;linkname=Edifying%20The%20Young" title="Google+" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save" href="https://www.addtoany.com/share#url=%2Findex.php%2F2017%2F04%2F26%2Fedifying-the-young%2F&amp;title=Edifying%20The%20Young" data-a2a-url="/index.php/2017/04/26/edifying-the-young/" data-a2a-title="Edifying The Young"></a></p><p>The post <a rel="nofollow" href="/index.php/2017/04/26/edifying-the-young/">Edifying The Young</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Projective Insights</title>
		<link>/index.php/2017/03/17/projective-insights/</link>
		<pubDate>Fri, 17 Mar 2017 18:43:11 +0000</pubDate>
		<dc:creator><![CDATA[Ahmad Eid]]></dc:creator>
				<category><![CDATA[GA Math]]></category>
		<category><![CDATA[Geometric Algebra]]></category>
		<category><![CDATA[Interview]]></category>
		<category><![CDATA[Biquaternions]]></category>
		<category><![CDATA[Duality]]></category>
		<category><![CDATA[Euclidean Geometry]]></category>
		<category><![CDATA[Hyperbolic Geometry]]></category>
		<category><![CDATA[Projective Geometry]]></category>
		<category><![CDATA[Rational Trigonometry]]></category>
		<category><![CDATA[Spherical Geometry]]></category>
		<category><![CDATA[Visualization]]></category>

		<guid isPermaLink="false">https://gacomputing.info/?p=2706</guid>
		<description><![CDATA[<p>Projective Geometry is the branch of geometry dealing with the properties and invariants of geometric figures under projection. In older literature, projective geometry is sometimes called &#8220;higher geometry,&#8221; &#8220;geometry of position,&#8221; or &#8220;descriptive geometry&#8221;. The&#46;&#46;&#46;</p>
<p>The post <a rel="nofollow" href="/index.php/2017/03/17/projective-insights/">Projective Insights</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2017/03/maxpixel.freegreatpicture.com-Sunrise-Crystal-Ball-New-Brighton-1239724.jpg"><img class="aligncenter size-large wp-image-2723" src="/wp-content/uploads/2017/03/maxpixel.freegreatpicture.com-Sunrise-Crystal-Ball-New-Brighton-1239724-1024x576.jpg" alt="Projective Insights" width="1024" height="576" srcset="/wp-content/uploads/2017/03/maxpixel.freegreatpicture.com-Sunrise-Crystal-Ball-New-Brighton-1239724-1024x576.jpg 1024w, /wp-content/uploads/2017/03/maxpixel.freegreatpicture.com-Sunrise-Crystal-Ball-New-Brighton-1239724-300x169.jpg 300w, /wp-content/uploads/2017/03/maxpixel.freegreatpicture.com-Sunrise-Crystal-Ball-New-Brighton-1239724-768x432.jpg 768w, /wp-content/uploads/2017/03/maxpixel.freegreatpicture.com-Sunrise-Crystal-Ball-New-Brighton-1239724.jpg 1280w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p>
<p><a href="/wp-content/uploads/2017/03/mugshot2012-01-small.jpg"><img class="alignright size-full wp-image-2725" src="/wp-content/uploads/2017/03/mugshot2012-01-small.jpg" alt="Dr. Charles Gunn" width="200" height="279" /></a><strong><a href="http://mathworld.wolfram.com/ProjectiveGeometry.html" target="_blank" rel="noopener">Projective Geometry</a></strong> is the branch of geometry dealing with the properties and invariants of geometric figures under projection. In older literature, projective geometry is sometimes called &#8220;higher geometry,&#8221; &#8220;geometry of position,&#8221; or &#8220;descriptive geometry&#8221;. The most amazing result arising in projective geometry is the <a href="https://en.wikipedia.org/wiki/Duality_(projective_geometry)" target="_blank" rel="noopener"><strong>duality principle</strong></a>, which states that a duality exists between theorems such as <a href="https://en.wikipedia.org/wiki/Pascal's_theorem" target="_blank" rel="noopener">Pascal&#8217;s theorem</a> and <a href="https://en.wikipedia.org/wiki/Brianchon%27s_theorem" target="_blank" rel="noopener">Brianchon&#8217;s theorem</a> which allows one to be instantly transformed into the other. More generally, all the propositions in projective geometry occur in dual pairs, which have the property that, starting from either proposition of a pair, the other can be immediately inferred by interchanging the parts played by the words &#8220;point&#8221; and &#8220;line.&#8221;</p>
<p>In this post, I interview <a href="http://page.math.tu-berlin.de/~gunn/" target="_blank" rel="noopener">Dr. Charles Gunn</a>, a mathematician, movie-maker, and teacher whose mathematical activities center around projective geometry and its connection to the human being and the world.  He is particularly excited by his recent work on <strong><a href="http://dgd.service.tu-berlin.de/wordpress/vismathws12/" target="_blank" rel="noopener">Projective Geometric Algebra</a> (PGA)</strong>, which he believes has a great role to play in bringing the benefits of GA to a wider audience.</p>
<hr />
<p><span style="color: #000080;"><strong>Tell us about your interest in Projective Geometric Algebra (PGA). Why do you focus on this particular area? Do you have specific PGA-related long-term goals?</strong></span></p>
<p>My interest in PGA is a natural outgrowth of my long-standing interest in projective geometry. One of the phases in this process was my work at the <a href="http://www.geom.uiuc.edu/">Geometry Center</a> at the University of Minnesota (1987-1993), where we created interactive visualizations of hyperbolic and spherical space for the first time using the projective models of these spaces, under the guidance of the late Bill Thurston.</p>
<p>It was natural then that when I went back (quite a bit later) to get a Ph. D. I looked into how not just to make pictures but how to do physics in these non-euclidean spaces. That&#8217;s when I became aware of a certain family of geometric algebras that I have since christened PGA and that formed the technical foundation for <a href="http://page.math.tu-berlin.de/~gunn/Documents/Papers/Thesis-final.pdf">my thesis</a> (Technical University Berlin, 2011).</p>
<p>The non-euclidean cases were already familiar to the pioneers of GA in the 1870&#8217;s such as Clifford and Klein; the euclidean case, however, is a bit tricky and was first enunciated by Jon Selig in around 2000. I have gone on to explore PGA more thoroughly and have published a series of articles devoted especially to the euclidean case; since I think it&#8217;s a fantastic tool &#8212; both conceptually and practically &#8212; for doing euclidean geometry. It includes as sub-algebras the well-known vector, quaternion, and dual (or bi-) quaternion algebras, but offers much more besides. It deserves to be much better-known than it is, especially in the applied mathematics and engineering community. In the article &#8220;<a href="https://arxiv.org/abs/1411.6502">Geometric algebras for euclidean geometry</a>&#8221; I have shown that for classical &#8220;flat&#8221; euclidean geometry, PGA exhibits distinct advantages over the alternative approaches. It serves also as an ideal stepping-stone both scientifically and pedagogically to more complex GAs such as CGA. This article and others can be accessed at my <a href="http://page.math.tu-berlin.de/~gunn/PGA/">PGA resource page</a>.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>What do you think about the great legacy of 19th-century geometry? Do you feel the scientific community is properly making good use of this legacy? Are there serious obstacles in the way of discovering the true power of 19th-century geometry? Can PGA be useful in this context?</strong></span></p>
<p><a href="/wp-content/uploads/2017/03/borromean4Fold.jpg"><img class="alignright size-medium wp-image-2719" src="/wp-content/uploads/2017/03/borromean4Fold-300x300.jpg" alt="" width="300" height="300" srcset="/wp-content/uploads/2017/03/borromean4Fold-300x300.jpg 300w, /wp-content/uploads/2017/03/borromean4Fold-150x150.jpg 150w, /wp-content/uploads/2017/03/borromean4Fold-160x160.jpg 160w, /wp-content/uploads/2017/03/borromean4Fold-320x320.jpg 320w, /wp-content/uploads/2017/03/borromean4Fold.jpg 512w" sizes="(max-width: 300px) 100vw, 300px" /></a>The development of mathematics in the 19th century was unique: radical advances were made in every field but an underlying unity was preserved so that leading mathematicians still had an overview of the whole. The transition to the 20th century saw an increasing specialization, the cost was a splintering of the whole. Decisions were made that in retrospect appear to have been motivated more by an ideology of abstraction than by a balanced practical judgment. PGA I think has the potential to stand as &#8220;living proof&#8221; that 19th-century mathematics still has much to offer to the contemporary community of applied geometry. It unifies two of William Clifford&#8217;s greatest inventions: biquaternions and geometric algebra, in the simplest, most elegant way imaginable, and provides an unsurpassed framework for doing kinematics and rigid body mechanics in euclidean (or non-euclidean) space.</p>
<p>On the other hand, it&#8217;s also important to note that PGA also contains seeds for the future. I&#8217;m particularly interested in this regard in dual euclidean space, which is a metric geometry obtained from euclidean geometry by dualizing it. It arises naturally as a variant of PGA. It was described by Felix Klein in the 19th century but was so unfamiliar that is was relegated to being a curiosity. There is an increasing volume of research, however, indicating that it might play an important role in future science by balancing a certain one-sidedness in our contemporary spatial awareness. Ch. 10 of my thesis contains an introduction to this fascinating theme, available on the resource site above.</p>
<p>The prospect of using PGA in this way to better understand Nature also resonates with the 19th-century heritage.  The great pioneers of that era &#8212; Möbius, Plücker, Riemann, Grassmann, Clifford, and Klein, among others &#8212; were all inspired, in their mathematical research, by physical questions. I personally think that mathematics needs such real-world connections in order to develop healthily and am curious to see whether PGA can help to strengthen such connections.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>In one of your papers, you talk about representing N. J. Wildberger&#8217;s Rational Trigonometry via PGA. Tell us about some interesting aspects of Rational Trigonometry from your point of view. How can PGA representation exhibit distinct advantages over the original coordinates-based approach?</strong></span></p>
<p><a href="/wp-content/uploads/2017/03/hqdefault.jpg"><img class="alignright size-medium wp-image-2718" src="/wp-content/uploads/2017/03/hqdefault-300x225.jpg" alt="Rational Trigonometry" width="300" height="225" srcset="/wp-content/uploads/2017/03/hqdefault-300x225.jpg 300w, /wp-content/uploads/2017/03/hqdefault.jpg 480w" sizes="(max-width: 300px) 100vw, 300px" /></a>I am no expert on <a href="http://www.cut-the-knot.org/pythagoras/RationalTrig/CutTheKnot.shtml">Wildberger&#8217;s Rational Trigonometry</a>, although I find the basic idea intriguing. One avoids the messiness of evaluating irrational and/or transcendental functions by working with the sine/cosine of the angle rather than with the angle itself, the square of the norm of a vector instead of the norm, etc. A friend loaned me a copy of Wildberger&#8217;s book as I was finishing my thesis and I made it a project to see how many of his results I could rephrase in the language of PGA. I was surprised myself by how well this process went. For example, the fundamental concepts of rational trigonometry &#8212; quadrance and spread &#8212; reveal themselves in PGA to be precisely dual to each other, a fact not obvious in the original treatment. Furthermore, many of the derivations in PGA are, in my humble opinion, clearer and shorter than the coordinate-based ones in the original. I determined that the whole subject could probably be rephrased in this way using PGA but the lack of time has prevented further work in this direction. This experience is typical when I &#8220;translate&#8221; standard treatments of euclidean geometry into PGA: often I discover a remarkable conciseness and elegance in the PGA version.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>Tell us about the process of creating software for PGA investigations. What characteristics should this kind of software have? Which software development paradigms you feel most suitable for this process? What are the components you find lacking in current programming languages in this regard?</strong></span></p>
<p>I am not a software purist; I used whatever helps me get the job done. Robustness and thorough documentation are my primary criteria. All my PGA investigations also involve visualization, so these two themes go hand-in-hand. Among commercial products, my favorite tool is Mathematica and I use it for prototype development. In fact, I used Mathematica to check all the results in my thesis for correctness.</p>
<p><a href="/wp-content/uploads/2017/03/borromean4Fold-8k_cr.png"><img class="alignright size-medium wp-image-2716" src="/wp-content/uploads/2017/03/borromean4Fold-8k_cr-300x203.png" alt="" width="300" height="203" srcset="/wp-content/uploads/2017/03/borromean4Fold-8k_cr-300x203.png 300w, /wp-content/uploads/2017/03/borromean4Fold-8k_cr.png 625w" sizes="(max-width: 300px) 100vw, 300px" /></a>For production software, I favor public domain software. Throughout my career (since writing my first hidden-surface removal algorithm on punch cards in 1978 at UNC-CH) I have developed such visualization software in parallel to my mathematical interests, as I found that existing 3D tools were/are generally not flexible enough to render what I wanted to. I worked on the <a href="http://www.geomview.org/" target="_blank" rel="noopener">geomview project</a> at the Geometry Center in the early 90&#8217;s. The latest incarnation in this direction is the <a href="http://www3.math.tu-berlin.de/jreality/jrealityStatic/index.php" target="_blank" rel="noopener">Java 3D scene graph jReality</a>, which I&#8217;ve been involved with at the TU Berlin since 2003. Like geomview, it is built on the foundation of projective geometry and can be then specialized to support different metric geometries such as euclidean, hyperbolic, and spherical geometry, and has been further specialized by me for my PGA research.</p>
<p>I have also been learning Haskell recently since its pure functional, polymorphic style is particularly well-suited to reliably mapping mathematical domains such as PGA and it seems to be gaining quite a large following. I have looked at other GA packages, hoping to apply them to PGA, but at the time I looked none of them supported a degenerate metric (a key feature of euclidean PGA). If anyone reading this knows of a standard GA package that supports a non-metric &#8220;duality&#8221; operator please let me know (projgeom@gmail.com).</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>In one of your papers, you describe an algorithm for decorating the edges of a regular tetrahedron with helical ribbons to generate new interesting forms. Do you feel there is a strong connection between Projective Geometry and Art? Can PGA be useful as an abstract generative modeling language for such activity?</strong></span></p>
<div id="attachment_2739" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/03/ribbonEdges-01.jpg"><img class="size-medium wp-image-2739" src="/wp-content/uploads/2017/03/ribbonEdges-01-300x283.jpg" alt="Ribbon Edges Sculpture" width="300" height="283" srcset="/wp-content/uploads/2017/03/ribbonEdges-01-300x283.jpg 300w, /wp-content/uploads/2017/03/ribbonEdges-01-768x723.jpg 768w, /wp-content/uploads/2017/03/ribbonEdges-01.jpg 1000w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Ribbon edge sculpture 3D print</p></div>
<p>My work on &#8220;generative sculpture&#8221; grew out of my experimenting with 3D printing at the 3D Lab of the TU Berlin beginning about 10 years ago. I was interested in printing polyhedra with different sorts of symmetry. I set myself the challenge of seeing whether I could maintain the identity of the polyhedron while smoothing out the &#8220;sharp corners&#8221; at the vertices, and <a href="http://page.math.tu-berlin.de/~gunn/Documents/Papers/ribbonEdges.pdf" target="_blank" rel="noopener">the &#8220;ribbon edges&#8221; paper</a> was the outcome. (For details see my web page at the TUB). Although there was no direct connection to projective geometry in this work, I do think projective geometry can have a similar effect &#8212; compared to euclidean geometry (or any metric geometry) it is a much more flexible and mobile geometry and contains within it many possibilities for metamorphosis and polarities characteristic of change and interaction. These I think may have to do with how form, especially living form, emerges in the first place, before it arrives at its fixed euclidean form. There&#8217;s much work that remains to be done in this direction, I believe projective geometry itself still contains lots of surprises for inquiring minds.</p>
<p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=%2Findex.php%2F2017%2F03%2F17%2Fprojective-insights%2F&amp;linkname=Projective%20Insights" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=%2Findex.php%2F2017%2F03%2F17%2Fprojective-insights%2F&amp;linkname=Projective%20Insights" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=%2Findex.php%2F2017%2F03%2F17%2Fprojective-insights%2F&amp;linkname=Projective%20Insights" title="Google+" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save" href="https://www.addtoany.com/share#url=%2Findex.php%2F2017%2F03%2F17%2Fprojective-insights%2F&amp;title=Projective%20Insights" data-a2a-url="/index.php/2017/03/17/projective-insights/" data-a2a-title="Projective Insights"></a></p><p>The post <a rel="nofollow" href="/index.php/2017/03/17/projective-insights/">Projective Insights</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Visualizing Scientific Insights</title>
		<link>/index.php/2017/02/20/ga-sciviz/</link>
		<pubDate>Mon, 20 Feb 2017 20:51:31 +0000</pubDate>
		<dc:creator><![CDATA[Ahmad Eid]]></dc:creator>
				<category><![CDATA[GA Computing]]></category>
		<category><![CDATA[GA Software]]></category>
		<category><![CDATA[Interview]]></category>
		<category><![CDATA[Astrophysics]]></category>
		<category><![CDATA[Big Data]]></category>
		<category><![CDATA[Computing]]></category>
		<category><![CDATA[Fiber Bundles]]></category>
		<category><![CDATA[Geometric Algebra]]></category>
		<category><![CDATA[Geometric Computing]]></category>
		<category><![CDATA[HDF5]]></category>
		<category><![CDATA[High Performance Computing]]></category>
		<category><![CDATA[Scientific Visualization]]></category>
		<category><![CDATA[SciViz]]></category>
		<category><![CDATA[Vish]]></category>

		<guid isPermaLink="false">https://gacomputing.info/?p=2447</guid>
		<description><![CDATA[<p>Visualize this thing that you want, see it, feel it, believe in it. Make your mental blue print, and begin to build. &#8212; Robert Collier Visualization is daydreaming with a purpose. &#8212; Bo Bennett&#46;&#46;&#46;</p>
<p>The post <a rel="nofollow" href="/index.php/2017/02/20/ga-sciviz/">Visualizing Scientific Insights</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></description>
				<content:encoded><![CDATA[<div id="attachment_2646" style="width: 1034px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/02/SciViz.jpg"><img class="size-large wp-image-2646" src="/wp-content/uploads/2017/02/SciViz-1024x540.jpg" alt="SciViz" width="1024" height="540" srcset="/wp-content/uploads/2017/02/SciViz-1024x540.jpg 1024w, /wp-content/uploads/2017/02/SciViz-300x158.jpg 300w, /wp-content/uploads/2017/02/SciViz-768x405.jpg 768w, /wp-content/uploads/2017/02/SciViz.jpg 1214w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><p class="wp-caption-text">A frame from a movie illustrating flys into New Orleans LIDAR terrain over Lake Pontchartrain where the three drainage canals can be seen. This sequence was also rendered for the planetarium in Baton Rouge (<a href="http://sciviz.cct.lsu.edu/gallery/katrina/links/flyintonola_Lakeview_4K.html" target="_blank">source</a>).</p></div>
<blockquote><p>Visualize this thing that you want, see it, feel it, believe in it. Make your mental blue print, and begin to build. &#8212; Robert Collier</p>
<p>Visualization is daydreaming with a purpose. &#8212; Bo Bennett</p></blockquote>
<p><span class="dropcap">T</span>he area of <strong><a href="https://en.wikipedia.org/wiki/Scientific_visualization" target="_blank">Scientific Visualization</a> (SciViz)</strong> is an interdisciplinary branch of science. According to <a href="http://www.math.yorku.ca/SCS/Gallery/milestone/milestone.pdf" target="_blank">Friendly</a>, it is &#8220;primarily concerned with the visualization of three-dimensional phenomena (architectural, meteorological, medical, biological, etc.), where the emphasis is on realistic renderings of volumes, surfaces, illumination sources, and so forth, perhaps with a dynamic (time) component&#8221;. It is also considered a subset of computer graphics, a branch of computer science. The purpose of scientific visualization is to graphically illustrate scientific data to enable scientists to understand, illustrate, and glean insight from their data.</p>
<p>In this post, I interview Dr. Werner Benger who describes his views on SciViz using Geometric Algebra and provides valuable insights about the use of SciViz in Big Data applications.</p>
<hr />
<p><a href="/wp-content/uploads/2017/02/AAEAAQAAAAAAAATTAAAAJDhiNjQ0Nzc0LTMxNzAtNDg3OC1hNTUwLWYxNGYyNmFlMzJkOQ.jpg"><img class="alignright size-medium wp-image-2620" src="/wp-content/uploads/2017/02/AAEAAQAAAAAAAATTAAAAJDhiNjQ0Nzc0LTMxNzAtNDg3OC1hNTUwLWYxNGYyNmFlMzJkOQ-300x300.jpg" alt="SciViz" width="300" height="300" srcset="/wp-content/uploads/2017/02/AAEAAQAAAAAAAATTAAAAJDhiNjQ0Nzc0LTMxNzAtNDg3OC1hNTUwLWYxNGYyNmFlMzJkOQ-300x300.jpg 300w, /wp-content/uploads/2017/02/AAEAAQAAAAAAAATTAAAAJDhiNjQ0Nzc0LTMxNzAtNDg3OC1hNTUwLWYxNGYyNmFlMzJkOQ-150x150.jpg 150w, /wp-content/uploads/2017/02/AAEAAQAAAAAAAATTAAAAJDhiNjQ0Nzc0LTMxNzAtNDg3OC1hNTUwLWYxNGYyNmFlMzJkOQ-160x160.jpg 160w, /wp-content/uploads/2017/02/AAEAAQAAAAAAAATTAAAAJDhiNjQ0Nzc0LTMxNzAtNDg3OC1hNTUwLWYxNGYyNmFlMzJkOQ-320x320.jpg 320w, /wp-content/uploads/2017/02/AAEAAQAAAAAAAATTAAAAJDhiNjQ0Nzc0LTMxNzAtNDg3OC1hNTUwLWYxNGYyNmFlMzJkOQ.jpg 406w" sizes="(max-width: 300px) 100vw, 300px" /></a><a href="https://www.linkedin.com/in/werner-benger-a6a15b28/" target="_blank" class="broken_link">Dr. Werner Benger</a> is Chief Designer, Software Architect, and Co-Founder at <a href="https://www.facebook.com/pg/AirborneHydroMapping/about/?ref=page_internal" target="_blank">Airborne Hydro Mapping Software GmbH</a> (AHMS). He worked on the design and development of the Vish Visualization Shell for Scientific Visualization of Big Data. Vish is designed to be suitable for scientific big data from any kind of application domain by using a generic data model. Within the context of AHMS, it is used for topo-bathymetric datasets from LIDAR measurements.</p>
<p>Dr. Werner Benger has a scientific background in astrophysics. His main research is in the area of Generic Visualization methods based on mathematical models for multidisciplinary applications, with a special focus on astrophysics and computational fluid dynamics. The applied methods are based on Differential Geometry, Geometric Algebra, Topology, and Fiber Bundles. His current special focus is on iso topo-bathymetric data via his work in AHMS.</p>
<hr />
<p><span style="color: #000080;"><strong>Tell us about your primary research interest: Scientific Visualization (SciViz). Why have you chosen to work in this field?</strong></span></p>
<p><a href="/wp-content/uploads/2017/02/4_cr.jpg"><img class="alignright size-medium wp-image-2653" src="/wp-content/uploads/2017/02/4_cr-300x300.jpg" alt="" width="300" height="300" srcset="/wp-content/uploads/2017/02/4_cr-300x300.jpg 300w, /wp-content/uploads/2017/02/4_cr-150x150.jpg 150w, /wp-content/uploads/2017/02/4_cr-160x160.jpg 160w, /wp-content/uploads/2017/02/4_cr-320x320.jpg 320w, /wp-content/uploads/2017/02/4_cr.jpg 350w" sizes="(max-width: 300px) 100vw, 300px" /></a>Basically, there are three purposes of visualization of scientific data:</p>
<ul>
<li>Presentation (when all is known about the data),</li>
<li>Analysis (when some questions need to be answered about the data),</li>
<li>Exploration (when we have no clue about the data yet and want to find out something new).</li>
</ul>
<p>Although user interface design is not necessarily part of SciViz, but in many cases, interactivity is needed. Particularly important is that the data that one deals with here are those with a spatio-temporal nature, it&#8217;s not just &#8220;any&#8221; data, but this specific subset.</p>
<p>Actually, I would not say that I have chosen to work in SciViz. It&#8217;s more that SciViz has chosen me. For most of the time I&#8217;ve considered myself rather an astrophysicist that became &#8220;delinquent&#8221; by engaging with computers too much. The origin came from the question how a black hole actually looks like. I asked that questions to one of my professors at university and he could not answer it, so I had to find out myself. I wrote a computer program for that purpose and that got me into this field. A couple of years ago I gave a presentation to students telling this story, you can find <a href="https://www.cct.lsu.edu/~werner/4REU2010.pdf" target="_blank">the presentation slides here</a>.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>Do you see significant differences between Engineering and Computer Science when trying to solve practical problems?</strong></span></p>
<p>As you mention Engineering vs. Computer Science &#8211; I often feel the difference between these two is that in Engineering you worry to get things to work &#8220;somehow&#8221;, while in Computer Science you also worry how things are getting to work and you want to find a systematic, future-safe approach. I&#8217;m myself more behind this theoretical approach to finding a powerful general solution that also but not only works for a special case, rather than just solving one particular special case. I also want to know why things work or why things cannot work, rather than finding an algorithm that solves a problem &#8220;somehow&#8221;.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>What major branches of Engineering and Computer Science are directly related to SciViz research and applications?</strong></span></p>
<p><a href="/wp-content/uploads/2017/02/Fields.jpg"><img class="alignright size-medium wp-image-2659" src="/wp-content/uploads/2017/02/Fields-300x107.jpg" alt="Fields" width="300" height="107" srcset="/wp-content/uploads/2017/02/Fields-300x107.jpg 300w, /wp-content/uploads/2017/02/Fields.jpg 700w" sizes="(max-width: 300px) 100vw, 300px" /></a>My own approach to scientific visualization is focusing on finding general methods that allow encapsulation and reuse of code and algorithms. Computer programmers are inherently lazy people; otherwise, they would not use computers. I&#8217;m no exception for that, and particularly lazy such that I want to implement an algorithm or data operation once, and not over and over again for similar data types. Consequently what is needed is one common concept that covers many cases under the same hood. I found that to be true through my background in astrophysics in General Relativity (GR); since this theory makes many otherwise implicit assumptions explicit.</p>
<p>The same is also true about Geometric Algebra, which &#8220;unfolds&#8221; otherwise collapsed mathematical entities, such as vectors and bivectors, and clearly states the properties of each object in a systematic way. So it is this unfolding and clarification of concepts via GA and GR (namely differential geometry and topology) that opens the path to a common data model that is powerful and reusable for those many cases that one encounters in scientific visualization. It is an overhead for a particular case, so many people who do their work under time-pressure or a close horizon don&#8217;t see the benefit of a more general data model, but in the longer term it is significantly less work and opens development resources towards more interesting topics rather than dealing with myriads of similar cases. Here is an article titled &#8220;<a href="https://www.computer.org/cms/Computer.org/ComputingNow/homepage/2009/1109/rW_CS_SafariFileFormatJungle.pdf" target="_blank">On Safari in the File Format Jungle</a>&#8221; that elaborates on this matter.</p>
<p>Systematic scientific visualization fuses all those interesting mathematical fields of differential geometry, topology, and geometric algebra. SciViz is also on the bridge between artwork and science, so touching both aspects is what many want, but only SciViz achieves if done well. You can read more about this aspect in my article &#8220;<a href="http://www.zib.de/hege/pdf/Benger-1999-Visions-of-numerical-relativity_SC-99-53.pdf" target="_blank">Visions of Numerical Relativity 1999</a>&#8220;.</p>
<p>&nbsp;</p>
<p><strong><span style="color: #000080;">What recent SciViz developments you find most important that you can tell us about?</span></strong></p>
<p>Concerning new developments &#8211; that is certainly &#8220;Big Data&#8221;, which has become a buzzword that is all around now. With more and advanced numerical and observation technology available, the trend is to no longer filter data during generation, but to just retrieve and store anything possible, leaving the crucial problem of identifying &#8211; i.e., visualizing &#8211; the important aspects of the data to the last data processing step, the visualization. This is a topic by itself of course, but just to mention that Big Data is often considered synonymous with High-Performance Computing (HPC). Actually, SciViz only covers one aspect of HPC, but indeed many methods and approaches from HPC are needed to deal with SciViz, even on single PCs and laptops. There it is of course all about parallelism, about GPU computing, about parallel I/O, and about scaling up algorithms to deal with bigger amounts of data.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>Tell us about the relations between Geometric Computing (GC) and SciViz. How does SciViz benefit from developments in GC and the other way around? </strong></span></p>
<p>Geometric Computing is a tool that is used in SciViz to solve its various detail problems. It&#8217;s frequent that in SciViz you want to achieve something and you need to search for the best GC algorithm to solve it. For the other way around, SciViz may help to develop a GC algorithm as it allows visual insight to what actually happens during the algorithm, not merely the result.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>What benefits can Geometric Algebra provide in this context for both domains? Do you find everyone agreeing with your point of view on using GA?</strong></span></p>
<p><a href="/wp-content/uploads/2017/02/isostream03.jpg"><img class="alignright size-medium wp-image-2655" src="/wp-content/uploads/2017/02/isostream03-300x236.jpg" alt="" width="300" height="236" srcset="/wp-content/uploads/2017/02/isostream03-300x236.jpg 300w, /wp-content/uploads/2017/02/isostream03-768x605.jpg 768w, /wp-content/uploads/2017/02/isostream03.jpg 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a>I always try to solve a GC problem via GA since GA is much richer in expressiveness than linear algebra and the chances that a seemingly complex algorithm can be solved by some simple but powerful elements taken out of a GA &#8220;toolbox&#8221; are high. Once you are used to thinking in terms of GA, things become easier that way, and thinking in terms of linear algebra feels like a knot in the brain. Like when talking about a &#8220;normal vector&#8221;, which is not really a vector, it&#8217;s merely identified with a vector, but what is actually a better representation is a bivector algebraically describing a plane&#8217;s direction in space.</p>
<p>This sometimes leads to passionate discussions with colleagues who still think about geometry in linear algebra and wonder how to rotate around an axis in 3D, when it&#8217;s so much easier to think about a rotation in a plane spun by two vectors. Such GA-based representation does not require any thinking, you &#8220;just do it&#8221;. But it is so hard for people to think about a bivector when talking about a plane if they are used to think about a plane&#8217;s normal vector instead, which in fact is a construct involving orthogonality and orientation, much more complex than the original object, the plane itself.</p>
<p>But then, even GA complicates matters by considering bivectors as oriented planes, but there&#8217;s not really a concept of a plane &#8220;as-is&#8221;, i.e. without orientation. That is something that can be borrowed from differential geometry as a covector, an unoriented plane, which by means of using an orientation (via the pseudoscalar) is identifiable with a bivector, then describing an oriented plane. And all those items are identified in linear vector algebra with the same object, a three-component vector.</p>
<p>Now it&#8217;s a bit of matter of taste which side is more confusing, the one identifying different geometric concepts into the same algebraic representation, or the one that unfolds a widely used geometric concept into more expressive algebraic objects. For my taste, the latter, and the more you have unfolded those geometric concepts, the better you understand which algebraic structures are required for identification &#8211; and those structures may be non-trivial in general, thus need to be considered explicitly in a general-purpose data model, even though via various optimization techniques they would vanish. This should be the last step, not the first one. &#8220;Implicit assumptions&#8221; are the death of data descriptions and file formats, there must at least be a way to identify which assumptions have been made, and they need to be part of the data description.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>What is the importance of embedding the assumptions into Big Data descriptions and file formats? How can we approach this effectively?</strong></span></p>
<p>When we classify algebraic properties of geometric concepts we obtain a &#8220;zoo&#8221; of vector types. This determines the metadata that needs to be written to a file (or other means of persistent storage such as a database) such that the data remain identifiable. Just writing floating point data is simple, but problems occur when the need arises to know what the data mean when reading them. Self-description of data is important for archival purposes and restartable algorithms, which are particularly important for long-term archiving and out-of-memory data processing. There are not many file formats that even provide the required expressivity of meta-data as required for this purpose to describe such variety of vectorial types.</p>
<p><a href="/wp-content/uploads/2017/02/TensorFibers-F5Logo.png"><img class="alignright size-full wp-image-2657" src="/wp-content/uploads/2017/02/TensorFibers-F5Logo.png" alt="TensorFibers-F5Logo" width="256" height="256" srcset="/wp-content/uploads/2017/02/TensorFibers-F5Logo.png 256w, /wp-content/uploads/2017/02/TensorFibers-F5Logo-150x150.png 150w, /wp-content/uploads/2017/02/TensorFibers-F5Logo-160x160.png 160w, /wp-content/uploads/2017/02/TensorFibers-F5Logo-320x320.png 320w" sizes="(max-width: 256px) 100vw, 256px" /></a>XML is one option, especially in the web context, <strong><a href="https://www.hdfgroup.org/" target="_blank">HDF5</a></strong> is another one, designed for high-performance applications and big data. While via XML anything is in the open, in HDF5 there already is an API to describe the properties of types. In Addition, HDF5 provides functionality of type conversions, which in this context can be utilized to e.g. implicitly convert multivectors of different numerical precision or to read a partial multivector into full multivector (for instance, if data were written by an application that only knows about vectors, but later on these data are read into another application that only knows about full multivectors).</p>
<p>For a generic application, we need runtime type identification that maps a type description, may it be provided by HDF5 or another capable file format \ storage medium, into compile-time types such that the correct precompiled code for the respective vector types can be called. On the other hand, the I/O mechanisms should not need to know about the complexity of vector types, it only needs to know about arrays of floating points plus some metadata. Thus what is left is to map the compile-time type meta-information to some run-time meta-information about types. The mechanism of type traits comes into play here for writing data. For reading data, however, it is not sufficient. When a certain data type is identified in some persistent storage, the reading code has to look up some registry to find a routine that produces actual instances of data arrays of the given type (which is then known by application code only). Given such an application code produced data array, it remains sufficient for the reading code to look at its numerical values only.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>As I understand, SciViz is a core part of any practical simulator. In your opinion, what are the software engineering methods most suitable for designing and implementing scalable SciViz software components and systems? </strong></span></p>
<p><a href="/wp-content/uploads/2017/02/Streamlines_Multiblock6.jpg"><img class="alignright size-medium wp-image-2650" src="/wp-content/uploads/2017/02/Streamlines_Multiblock6-300x188.jpg" alt="Streamlines_Multiblock6" width="300" height="188" srcset="/wp-content/uploads/2017/02/Streamlines_Multiblock6-300x188.jpg 300w, /wp-content/uploads/2017/02/Streamlines_Multiblock6-768x480.jpg 768w, /wp-content/uploads/2017/02/Streamlines_Multiblock6.jpg 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a>Well, in theory, it&#8217;s a complementary part of simulation; in practice many scientists performing 3D or 4D simulations still only look at numbers or 1D plots. This is partly due to &#8220;old-style&#8221; scientists being used to 1D plots, as this was the only way of &#8220;visualization&#8221; decades ago, and color printing of images with 3D visualizations is not possible in traditional high-profile journals where they want to publish. The other problem is the inconvenience of dealing with big data and advanced visualization systems. While there are lots of fancy visualization equipment such as Caves and Walls, only very few would make use of such. The typical scientist would not make use of anything that doesn&#8217;t run on their laptops right away. Even going to another room for doing visualization on a higher-end machine is too much overhead for many &#8220;end-users&#8221; and they would not do it unless they are forced to.</p>
<p>For design and engineering of SciViz software, I&#8217;m an advocator for using a common data model. I.e., use one central data structure to route as many types of data through this one, instead of cooking many little solutions that may or may not fit together.</p>
<p>Concerning code readability, I believe code should be written in a most intuitive way; mathematical algorithms as close to the mathematical notation as possible. For example, operator overloading and C++ 14 string literals provide syntactic sugar to do so, but a naive implementation may suffer performance issues. Expression templates have demonstrated how human-readable code can be transformed into efficient code by using C++ templates. The more constraints are known about some code, the better it can be optimized, and systems such as Gaalop or GMac that rely on symbolic algebra packages may be able to optimize a certain algorithm even better than the more generic C++ compiler. It is thus desirable that a C++ library providing GA algorithm allows for application code that is not only human-readable but also readable as a domain-specific language such that it is parseable by tools beyond the C++ compiler itself.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>How can GA be useful in this software design context? Are there any difficulties associated with using GA here?</strong></span></p>
<p><a href="/wp-content/uploads/2017/02/Software-Design.jpg"><img class="alignright size-medium wp-image-2651" src="/wp-content/uploads/2017/02/Software-Design-300x105.jpg" alt="Software Design" width="300" height="105" srcset="/wp-content/uploads/2017/02/Software-Design-300x105.jpg 300w, /wp-content/uploads/2017/02/Software-Design-768x269.jpg 768w, /wp-content/uploads/2017/02/Software-Design.jpg 970w" sizes="(max-width: 300px) 100vw, 300px" /></a>GA is as helpful here in software design as it is helpful in bridging different mathematical applications, by showing a common, unifying basis. The difficulty here is similar to using a common data model: we need the most general possible way of considering GA, not merely a version of GA for one particular case, even though that one may be very broadly used.</p>
<p>For instance, this means considering GA in arbitrary coordinate systems, not merely in orthonormal coordinate systems, which is what most implementations of GA do &#8211; because mathematically, it can be done, and the problem is solved thereby. But it&#8217;s only mathematically solved, and in practice, non-orthonormal coordinate systems are more common; for instance in numerical relativity or in computational fluid dynamic simulations. GA-based implementations need to be as general as possible to cover all such applications that can use GA as an algebraic representation. At the same time, we need to keep the highly optimized reductions that are possible for special cases, and at this time some automatic code generators may come into play to allow specifying constraints and knowledge available for a particular use case (e.g. global orthonormality of coordinates) which are not available on the level of a compiler.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>How do you think designing GA-based SciViz software, like your Vish Shell, for Big Data processing can be different from small scale GC applications?</strong></span></p>
<p><a href="/wp-content/uploads/2017/02/VishConcept.jpg"><img class="alignright size-medium wp-image-2649" src="/wp-content/uploads/2017/02/VishConcept-300x279.jpg" alt="Vish Concept" width="300" height="279" srcset="/wp-content/uploads/2017/02/VishConcept-300x279.jpg 300w, /wp-content/uploads/2017/02/VishConcept.jpg 482w" sizes="(max-width: 300px) 100vw, 300px" /></a>A certain difference is that one must avoid any overhead &#8220;per vector element&#8221; and consider doing operations on &#8220;arrays of multivectors&#8221;. This comes with constraints that need to be taken into consideration. Vish stems from a background of dealing with big data from numerical relativity and bases all its data operations on the concept of fiber bundles. This means operations are done as array operations as much as possible, which are parallelizable and allow optimal data throughput, for both I/O and transferring data on the graphics card for rendering. Modern rendering is based on vertex buffers and vertex arrays, which mathematically are fiber bundles, whereas the old OpenGL 1.0 was about primitives and lists of primitives. This model did not scale to the highly parallel data processing that happens on GPUs and thus is considered deprecated now, whereas the fiber bundle data model, envisioned originally by D. Butler in 1989, shines, even though only a few people are aware that they actually do fiber bundles.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>What role does GA have in such Big-Data software design context?</strong></span></p>
<p>In this context, GA is complementary, as it basically implements fibers on the fiber bundle data model. So the basic change is to think about operations on arrays of multivectors and to extend solutions to consider array operations instead of single variables. Now that &#8220;should&#8221; be rather easy when an array of multivectors is homogenous, i.e. each array element consists of multivectors with the same zero and non-zero components. Fortunately, this will most likely be the case in practical applications, and code-generators such as GMac are able to predict which multivector components will always be zero within an algorithm &#8211; that is an essential part of applying GA algorithms for big data, both for computational speed and even more memory consumption.</p>
<p>For a single input operation, optimizing out zeroes is just some computational optimization, but the algorithm would still work without it. For big data having many inputs, keeping arrays which are all zero are performance killers and may prevent an entire application from becoming functional. So an optional optimization for small data applications becomes a mandatory component for big data applications. But things become really complex if we had to consider heterogeneous multivector arrays where the zeros would be different at each array element. This basically leaves us with two options: Carry all zeroes everywhere for the sake of parallelism, or use locally dynamic multivectors, which will be much slower but more memory-friendly. Let&#8217;s hope we don&#8217;t have many such application cases.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>Can you tell us about other interesting aspects of Vish?</strong></span></p>
<p>I would like to point out that Vish is adhering to <a href="http://vish.fiberbundle.net/download/license/" target="_blank">a particular license with a non-military aspect</a>. I think it&#8217;s important for developers of technology to also think how their technology can be used. Otherwise, the Oppenheimer effect may strike them later on. Many people would object, and promote &#8220;free software&#8221; just for the sake of freedom, saying the military would not respect a software license anyway. However, my experience on that matter has been just the opposite. It is respected, and I had a couple of requests from the military that I was putting down, and it was accepted.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>You mentioned earlier that most scientists don&#8217;t like to use advanced SciViz tools often. What can we do in terms of educating and training new generations of researchers to change this? Can GA provide help in solving this problem?</strong></span></p>
<p><a href="/wp-content/uploads/2017/02/Rayleigh-Taylor_instability.jpg"><img class="alignright size-medium wp-image-2662" src="/wp-content/uploads/2017/02/Rayleigh-Taylor_instability-300x300.jpg" alt="Rayleigh-Taylor_instability" width="300" height="300" srcset="/wp-content/uploads/2017/02/Rayleigh-Taylor_instability-300x300.jpg 300w, /wp-content/uploads/2017/02/Rayleigh-Taylor_instability-150x150.jpg 150w, /wp-content/uploads/2017/02/Rayleigh-Taylor_instability-160x160.jpg 160w, /wp-content/uploads/2017/02/Rayleigh-Taylor_instability-320x320.jpg 320w, /wp-content/uploads/2017/02/Rayleigh-Taylor_instability.jpg 500w" sizes="(max-width: 300px) 100vw, 300px" /></a>This is a good and unsolved question. Actually, I don&#8217;t think much can be done to change the mind of current researchers, but new ones will embrace new technology in a natural way, similar to kids growing up with smartphones, while their grandparents still disapproving them. Parts of the process is due to the technology not just becoming functional, but also easy and available to use.</p>
<p>There is not much point of trying to &#8220;force&#8221; users into some technology, that is not really sustainable, but there are many people out there that would want to make their technology to be used and available, yet they struggle with the simple issue of obtaining funding for it, because in the scientific world, you don&#8217;t get papers and publications for making your software easier to use. It&#8217;s more the scientific publication culture, or rather, using &#8220;scientific publications&#8221; as a measure for funding agencies that inhibits making such tools easier. SciViz, in particular, has the problem that everyone wants and likes glossy images to present and sell their work, but hardly anyone wants to invest resources into it or pay for it. There are few exceptions, for instance, I heard about research centers with the policy that 10% of all project budgets must be allocated for doing visualization; this is a great model. By that model, even projects that don&#8217;t need visualization contribute to visualization research and deployment. With a proper funding model for SciViz development and supplementing, development and increased use of advanced SciViz tools will come naturally.</p>
<p>On the other hand, GA is more an educational topic, it does not really help to understand a data analysis in its entity, it could only help to understand a certain data analysis tool or method, to see what it does. But understanding the data itself is independent, and that is up to the scientist who produced the data to determine whether GA is of benefit in this step. But similar to SciViz tools, there is no point of trying to enforce or promote GA to those who don&#8217;t want it, but those who don&#8217;t know it yet should be made aware that it exists and what it is good for, and that should be done as early as possible in someone&#8217;s learning career. Of course, the problem is that it comes with a choice &#8211; it can be used or not, so to not burden people with unnecessary mental ballast, it would not be taught early on. But at least, it should be mentioned, so people inspired by it can look it up themselves.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=%2Findex.php%2F2017%2F02%2F20%2Fga-sciviz%2F&amp;linkname=Visualizing%20Scientific%20Insights" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=%2Findex.php%2F2017%2F02%2F20%2Fga-sciviz%2F&amp;linkname=Visualizing%20Scientific%20Insights" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=%2Findex.php%2F2017%2F02%2F20%2Fga-sciviz%2F&amp;linkname=Visualizing%20Scientific%20Insights" title="Google+" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save" href="https://www.addtoany.com/share#url=%2Findex.php%2F2017%2F02%2F20%2Fga-sciviz%2F&amp;title=Visualizing%20Scientific%20Insights" data-a2a-url="/index.php/2017/02/20/ga-sciviz/" data-a2a-title="Visualizing Scientific Insights"></a></p><p>The post <a rel="nofollow" href="/index.php/2017/02/20/ga-sciviz/">Visualizing Scientific Insights</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></content:encoded>
			</item>
		<item>
		<title>GMac: The Next Generation (2 of 2)</title>
		<link>/index.php/2017/02/10/gmac-tng-2/</link>
		<pubDate>Fri, 10 Feb 2017 03:00:04 +0000</pubDate>
		<dc:creator><![CDATA[Ahmad Eid]]></dc:creator>
				<category><![CDATA[GA Software]]></category>
		<category><![CDATA[GMac]]></category>
		<category><![CDATA[Compiler]]></category>
		<category><![CDATA[Computer Algebra]]></category>
		<category><![CDATA[Development]]></category>
		<category><![CDATA[Development Environment]]></category>
		<category><![CDATA[Domain Specific]]></category>
		<category><![CDATA[DSL]]></category>
		<category><![CDATA[Geometric Algebra]]></category>
		<category><![CDATA[GMacAPI]]></category>
		<category><![CDATA[GMacAST]]></category>
		<category><![CDATA[GMacDSL]]></category>
		<category><![CDATA[Irony Framework]]></category>
		<category><![CDATA[Mathematica]]></category>
		<category><![CDATA[Parsing]]></category>
		<category><![CDATA[Scripting]]></category>
		<category><![CDATA[Semantic Analysis]]></category>
		<category><![CDATA[TextComposerLib]]></category>

		<guid isPermaLink="false">https://gacomputing.info/?p=2531</guid>
		<description><![CDATA[<p>There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that&#46;&#46;&#46;</p>
<p>The post <a rel="nofollow" href="/index.php/2017/02/10/gmac-tng-2/">GMac: The Next Generation (2 of 2)</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2017/02/Arches.jpg"><img class="aligncenter size-large wp-image-2539" src="/wp-content/uploads/2017/02/Arches-1024x768.jpg" alt="Arches" width="1024" height="768" srcset="/wp-content/uploads/2017/02/Arches-1024x768.jpg 1024w, /wp-content/uploads/2017/02/Arches-300x225.jpg 300w, /wp-content/uploads/2017/02/Arches-768x576.jpg 768w, /wp-content/uploads/2017/02/Arches.jpg 1280w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p>
<blockquote><p>There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult. &#8212; C. A. R. Hoare.</p></blockquote>
<p><span class="dropcap">P</span>lanning for the next generation of GMac began in August 2011. I started to design the new version of GMac from scratch by reading significant parts of Terence Parr&#8217;s book &#8220;<a href="https://pragprog.com/book/tpdsl/language-implementation-patterns" target="_blank" rel="noopener">Language Implementation Patterns</a>&#8221; <sup class='endnote'><a href='#en-2531-1' id='enref-2531-1' onclick='return hhEndnotes_show(2531)'>1</a></sup>, Robert W. Sebesta&#8217;s classic book &#8220;<a href="https://www.amazon.com/Concepts-Programming-Languages-Robert-Sebesta/dp/0131395319" target="_blank" rel="noopener">Concepts of Programming Languages</a>&#8220;, and the second edition of the bestseller <a href="https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools" target="_blank" rel="noopener">Dragon Book</a> &#8220;<a href="https://www.amazon.com/Compilers-Principles-Techniques-Tools-2nd/dp/0321486811/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1486586482&amp;sr=1-1&amp;keywords=compiler+design" target="_blank" rel="noopener">Compilers: Principles, Techniques, and Tools</a>&#8220;. I had learned many lessons during developing the first GMac prototype. These books provided a solid conceptual framework for designing the new version of GMac containing all the lessons I&#8217;d learned before.</p>
<p>In the <a href="/index.php/2017/02/09/gmac-tng-1/" target="_blank" rel="noopener">previous post</a>, I talked about the first part of my journey developing GMac, the fascinating discoveries I made, and the difficulties I faced along the way. In this final part, I explain the design decisions I made for GMac and how I came to select them, in addition to the developments I hope to make in the future.</p>
<h3>Having a Symbolic Value</h3>
<blockquote><p>&#8230; with proper design, the features come cheaply. This approach is arduous, but continues to succeed. &#8211;Dennis Ritchie.</p></blockquote>
<p><a href="/wp-content/uploads/2017/02/Equations.jpg"><img class="alignright size-medium wp-image-2523" src="/wp-content/uploads/2017/02/Equations-300x200.jpg" alt="Equations" width="300" height="200" srcset="/wp-content/uploads/2017/02/Equations-300x200.jpg 300w, /wp-content/uploads/2017/02/Equations.jpg 640w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>The first line of code I wrote was in the most basic of its foundations; namely the interface between GMac and a mathematical symbolic processing system like Mathematica. In addition, I created a library of utilities and basic data structures that grew over time called <strong>UtilsLib</strong>. I initially started out trying to design a single library that is capable of unifying and handling symbolic processing for a number of <a href="https://en.wikipedia.org/wiki/Computer_algebra_system" target="_blank" rel="noopener"><strong>Computer Algebra Systems</strong></a> <strong>(CAS)</strong> like <a href="https://www.wolfram.com/mathematica/" target="_blank" rel="noopener">Mathematica</a>, <a href="https://www.maplesoft.com/products/maple/" target="_blank" rel="noopener">Maple</a>, <a href="https://www.ptc.com/en/products/mathcad" target="_blank" rel="noopener">Mathcad</a>, <a href="http://www.sagemath.org/" target="_blank" rel="noopener">SageMath</a>, <a href="http://maxima.sourceforge.net/" target="_blank" rel="noopener">Maxima</a>, etc. In order to create such class library, I would have to learn the basics of all these systems to abstract a common interface. This was a huge project by itself that would delay my dream considerably. I eventually concentrated on designing an Object Oriented (OO) interface to <a href="http://reference.wolfram.com/language/NETLink/tutorial/Overview.html" target="_blank" rel="noopener">Mathematica&#8217;s NET Link API</a> in the hope that I would have the time to expand it later to other symbolic processing systems.</p>
<p>Computer algebra systems mostly use homogeneous trees of objects, like Mathematica&#8217;s <a href="https://reference.wolfram.com/language/NETLink/ref/net/Wolfram.NETLink.Expr.html" target="_blank" rel="noopener">Expr class</a>, to store information about <a href="http://reference.wolfram.com/language/tutorial/EverythingIsAnExpression.html" target="_blank" rel="noopener">the structure of all their expressions</a>. These homogenous trees are suitable for computer algebra but not easy to handle using OO design. This is a similar problem to needing an OO interface between tables in relational databases and the OO applications interacting with them, we call that the <strong><a href="https://en.wikipedia.org/wiki/Data_access_layer" target="_blank" rel="noopener">Data Access Layer</a> (DAL)</strong>.</p>
<p>The final result is my <strong><a href="https://gmac-guides.netlify.com/index.php/gmac-math-guide/" target="_blank" rel="noopener">SymbolicInterface</a></strong> component class library, a kind of <strong>Symbolic Processing Access Layer (SPAL)</strong> to Mathematica. The main purpose of this library is to add low-level symbolic processing capabilities to GMac on symbolic scalars. A symbolic scalar is the most basic unit of computation that GMac can handle; it represents an expression that can be evaluated into a real number after substituting values into its symbolic variables if any are present. For example, all the following are basic symbolic scalars in GMac based on Mathematica syntax for symbolic expressions:</p>
<ul>
<li>-109</li>
<li>2.3456</li>
<li>Rational[6,11]</li>
<li>Pi</li>
<li>Sin[2*Pi/3]</li>
<li>Exp[-t/5]</li>
<li>x + 3 * Power[y, 2] &#8211; 5 x * y</li>
</ul>
<p>The restrictions on the Mathematica values and functions used in scalar expressions is that each value or function should be convertible into the target language in which code generation is desired. Each symbolic variable, like x, y, and t in the above expressions, should be associated with a data store in the target code; for example, a local variable, an array element, a class member, a named constant etc. Additional kinds of symbolic expressions with unified OO interfaces can be defined and evaluated like matrices, vectors, boolean expressions, rules, etc.</p>
<p>Using the SymbolicInterface classes I could now define basic operations on multivectors in any selected GA frame. I could define symbolic basis blades and their linear combinations using an approach similar to the one described in &#8220;<a href="https://www.amazon.com/Geometric-Algebra-Computer-Science-Revised/dp/0123749425" target="_blank" rel="noopener">Geometric Algebra for Computer Science</a>&#8220;. I could create and manipulate symbolic multivectors as linear combinations of basis blades with any given signature, even non-orthogonal ones like the 5D Conformal GA. The coefficients of these symbolic multivectors are symbolic scalars, not just numeric floating point numbers. I began implementing all standard operations on multivectors and blades like the geometric, outer, and inner products, inversions and involutions, outermorphisms, etc.</p>
<p>The SymbolicInterface classes are used extensively across all layers and components of GMac to communicate with Mathematica through a unified OO interface. This interface can be used in similar projects. I hope I could make it an open source component in the near future, if I could obtain proper funding for GMac, to be further developed by interested people. I also need to add automatic symbolic multivector differentiation to increase the range of applications that GMac can be used in.</p>
<h3>Being Specific</h3>
<blockquote><p>It&#8217;s OK to figure out murder mysteries, but you shouldn&#8217;t need to figure out code. You should be able to read it. &#8212; Steve McConnell.</p></blockquote>
<p><a href="/wp-content/uploads/2017/02/Coding.jpg"><img class="alignright wp-image-2526 size-medium" src="/wp-content/uploads/2017/02/Coding-300x200.jpg" alt="Coding" width="300" height="200" srcset="/wp-content/uploads/2017/02/Coding-300x200.jpg 300w, /wp-content/uploads/2017/02/Coding.jpg 640w" sizes="(max-width: 300px) 100vw, 300px" /></a>The next logical step to make was to design and implement the main user interface to the GMac system, its <strong><a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="noopener">Domain Specific Language</a> (DSL)</strong>. One of the lessons I&#8217;d learned during my Ph.D. was that using sophisticated software systems requires a well-designed interface close to the user&#8217;s specific domain of knowledge, not the software engineer&#8217;s. Two approaches, DSLs and <strong><a href="https://en.wikipedia.org/wiki/Visual_programming_language" target="_blank" rel="noopener">Visual Programming Languages</a> (VPLs)</strong>, are the best candidates for the job. A VPL can always be built around a DSL but would require an additional layer to visually interface with the user, So I decided to start with a simple Geometric Algebra based DSL <sup class='endnote'><a href='#en-2531-2' id='enref-2531-2' onclick='return hhEndnotes_show(2531)'>2</a></sup>. I hope in the future I could implement a visual environment for GMac that can be used to define GA-models using visual GA-notation and relate the DSL&#8217;s components together visually.</p>
<p>It took a lot of experimentation and re-design, but the final result is <a href="https://gmac-guides.netlify.com/index.php/gmacdsl-guide/" target="_blank" rel="noopener"><strong>GMacDSL</strong></a>. The language design of GMacDSL is simple and focused on the domain; namely GA-based modeling. GMacDSL is not <a href="https://en.wikipedia.org/wiki/Turing_completeness" target="_blank" rel="noopener">Turing-complete</a> because it doesn&#8217;t need to be. The main elements of GMacDSL are:</p>
<ol>
<li><strong>Namespaces:</strong> These are simple logical named containers for the other elements of GMacDSL similar ti Java packages and C# namespaces.</li>
<li><strong>Frames:</strong> Using GMacDSL, the user can define any fixed set of named basis vectors along with their relative metric relations including Euclidean, Orthonormal, Orthogonal, and Non-orthogonal frames. Frames are the basic abstraction on which all subsequent symbolic computations occur inside GMac.</li>
<li><strong>Subspaces:</strong> A subspace is a set of basis blades of a given frame. They are useful in many cases for selecting or defining parts of multivectors during symbolic computations.</li>
<li><strong>Pre-defined Data Types:</strong> Two types are present in GMacDSL. Scalars are symbolic expressions of real values, including number literals. In addition, each frame automatically defines an associated Multivector type; a list of scalars defining a symbolic linear combination of the Frame&#8217;s basis blades.</li>
<li><strong>Structures:</strong> User-defined combinations of named members having given types including scalars, multivectors, or other structures. These are similar to user-defined types and structs in other languages. The main purpose of structures is to implement the pattern of <a href="/index.php/2017/01/13/ga-computing3/" target="_blank" rel="noopener">Geometric Generators</a> in GMacDSL.</li>
<li><strong>Constants:</strong> These are constant-valued named data containers of any type including scalars, multivectors, and structures. The scalar values inside constants can be large symbolic expressions; they needn&#8217;t be number literals.</li>
<li><strong>Fixed Outermorphisms:</strong> These are simple outermorphisms with fixed scalar elements that are mainly used to transform related frames. For example, we can define a non-orthogonal frame using an orthogonal one and an invertible change of basis matrix. Then GMac automatically defines two fixed outermorphisms to transform multivectors between the two frames.</li>
<li><strong>Multivector Expressions:</strong> The main function of GMac is to handle standard GA operations on symbolic multivectors. Multivector expressions provide this capability to define macros and construct constants.</li>
<li><strong>Macros:</strong> A macro in GMacDSL is the most important unit of computation. Simply speaking, a macro is a list of GA-based high-level computations on scalars, multivectors, and structures that produce a single value of any type from computations performed on a number of inputs, also of any type. A macro is not a procedure or function in the familiar way of common programming languages. A macro can only call other macros defined before it in the DSL code and allows no recursion.</li>
</ol>
<p>This structure is simple to understand and use for non-programmers working with GA models while being sufficient for covering many practical GA models. In the future, I hope to develop GMacDSL using the <a href="https://en.wikipedia.org/wiki/Functional_programming" target="_blank" rel="noopener">Functional Programming Paradigm</a>. This would provide elegant and powerful syntax and semantics for GA-based models that would take great benefit from GA&#8217;s unified and elegant mathematical abstractions.</p>
<h3>Finding Irony</h3>
<blockquote><p>When debugging, novices insert corrective code; experts remove defective code. &#8212; Richard Pattis.</p></blockquote>
<div id="attachment_2494" style="width: 266px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/02/Compiler.png"><img class="size-medium wp-image-2494" src="/wp-content/uploads/2017/02/Compiler-256x300.png" alt="Compiler" width="256" height="300" srcset="/wp-content/uploads/2017/02/Compiler-256x300.png 256w, /wp-content/uploads/2017/02/Compiler.png 378w" sizes="(max-width: 256px) 100vw, 256px" /></a><p class="wp-caption-text">Construction of a typical compiler (<a href="https://commons.wikimedia.org/wiki/File:Compilador.png" target="_blank" rel="noopener">source</a>)</p></div>
<p>In order to experiment with various designs of GMacDSL I had to implement a compiler to parse and translate GMacDSL code into a suitable intermediate data structure. In 2012, I began writing the <strong>GMacCompiler</strong> <a href="https://en.wikipedia.org/wiki/Compiler#Front_end" target="_blank" rel="noopener">front-end</a> for that purpose. The first step in creating a typical <a href="https://en.wikipedia.org/wiki/Compiler" target="_blank" rel="noopener">compiler</a> is to implement its parser. I initially tried to code my own parser using the elegant functional capabilities of <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a> but I later found a much better solution called <strong><a href="http://irony.codeplex.com/" target="_blank" rel="noopener">Irony</a> </strong>by Roman Ivantsov <sup class='endnote'><a href='#en-2531-3' id='enref-2531-3' onclick='return hhEndnotes_show(2531)'>3</a></sup>. Irony has many good features that attract computer language designers to use it as a base for their language tools. Using Irony I could easily parse GMacDSL code into a homogeneous <a href="https://en.wikipedia.org/wiki/Parse_tree" target="_blank" rel="noopener"><strong>Parse Tree</strong></a>. This parse tree is not useful by itself because it&#8217;s based on a context-free Irony Grammar, but it can be converted into a more useful <strong><a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" target="_blank" rel="noopener">Abstract Syntax Tree</a> (AST)</strong> through <a href="https://www.tutorialspoint.com/compiler_design/compiler_design_semantic_analysis.htm" target="_blank" rel="noopener">semantic analysis</a>.</p>
<p>Based on Irony, I developed an infrastructure for creating simple DSLs. I call this infrastructure <strong>IronyGrammars </strong><sup class='endnote'><a href='#en-2531-4' id='enref-2531-4' onclick='return hhEndnotes_show(2531)'>4</a></sup>; it provides many services needed by typical DSL compilers like source code handling, error and warning messages reporting, <a href="https://en.wikipedia.org/wiki/Symbol_table" target="_blank" rel="noopener">symbol table</a> management, <a href="https://www.tutorialspoint.com/compiler_design/compiler_design_semantic_analysis.htm" target="_blank" rel="noopener">semantic analysis</a>, AST construction and navigation, interpretation services, etc. Naturally, the most difficult part of implementing the IronyGrammars infrastructure is the debugging. Many cycles of refactoring, testing, and debugging were made. The implementation finally settled in a relatively satisfying state after removing much code.</p>
<p>I used IronyGrammars to create the GMacCompiler front-end as a specific compiler of GMacDSL code. The GMacCompiler front-end parses and translates the GMacDSL code into the desired intermediate data structure; the <strong><a href="https://gmac-guides.netlify.com/index.php/gmacast-guide/" target="_blank" rel="noopener">GMacAST</a></strong> structure used as the primary GA-based high-level information source for further symbolic processing at later stages. I also created mini-compilers that can translate partial GMacDSL code like a single multivector expression, a single user defined structure, or a single macro. This kind of small compilers is very useful during code composition for adding temporary structure to an already created GMacAST.</p>
<h3>Caring for the Environment, Talking to Trees</h3>
<blockquote><p>Perfection (in design) is achieved not when there is nothing more to add, but rather when there is nothing more to take away. &#8212; Antoine de Saint-Exupery.</p></blockquote>
<div id="attachment_1220" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2015/11/GMacAST_MainComponents.jpeg" class="broken_link"><img class="size-medium wp-image-1220" src="/wp-content/uploads/2015/11/GMacAST_MainComponents-300x268.jpeg" alt="GMacAST Main Components" width="300" height="268" /></a><p class="wp-caption-text">GMacAST Main Components</p></div>
<p>By 2013 I had a solid perception of the main components that GMac should have. I also was almost finished with two of GMac&#8217;s core components: GMacDSL and the GMacCompiler front-end that translated GMacDSL code into the high-level GMacAST intermediate structure. It was about time to create a proper, but simple, <strong><a href="https://en.wikipedia.org/wiki/Integrated_development_environment" target="_blank" rel="noopener">Integrated Development Environment</a> (IDE)</strong>; the <strong><a href="https://gmac-guides.netlify.com/index.php/gmac-system-guide/" target="_blank" rel="noopener">GMacIDE</a></strong>.</p>
<p>The first thing I needed is a simple colored TextBox control for <a href="https://en.wikipedia.org/wiki/Syntax_highlighting" target="_blank" rel="noopener">Syntax Highlighting</a>. I soon found the nice <a href="https://www.codeproject.com/Articles/161871/Fast-Colored-TextBox-for-syntax-highlighting" target="_blank" rel="noopener">FastColoredTextBox control</a> by Pavel Torgashov <sup class='endnote'><a href='#en-2531-5' id='enref-2531-5' onclick='return hhEndnotes_show(2531)'>5</a></sup>. I implemented a simple interface for GMacDSL code management to handle projects containing multiple code files, to compile and report errors and warnings, explore the GMacAST, generate sample code from a single macro, and perform other functions.</p>
<p>The current GMacIDE is very simple, I hope in the future it can be extended to contain a set of Visual Editors for creating and modifying GMacDSL code and manage the details of code composition from GA-models. In addition, I need to add some form of interactive multivector visualization component to enable exploring GA-based geometry visually.</p>
<h3>Scripting Your Next Play</h3>
<blockquote><p>Talk is cheap. Show me the code. &#8212; Linus Torvalds.</p></blockquote>
<p><a href="/wp-content/uploads/2017/02/GMac.jpg"><img class="alignright wp-image-2476 size-medium" src="/wp-content/uploads/2017/02/GMac-300x169.jpg" alt="Script" width="300" height="169" srcset="/wp-content/uploads/2017/02/GMac-300x169.jpg 300w, /wp-content/uploads/2017/02/GMac-768x432.jpg 768w, /wp-content/uploads/2017/02/GMac-1024x576.jpg 1024w, /wp-content/uploads/2017/02/GMac.jpg 1173w" sizes="(max-width: 300px) 100vw, 300px" /></a>The GMacIDE enables the GMac user to perform many functions. One of the most important of these functions is interfacing with the <strong><a href="https://gmac-guides.netlify.com/index.php/gmac-scripting-guide/" target="_blank" rel="noopener">GMac Scripting Engine</a></strong>. Implementing a scripting engine for a system like GMac is essential. GMacDSL is not Turing-complete, the user can describe GA-based models but can&#8217;t properly interact with them unless he uses more programming structure like loops, conditional execution, expression evaluation, etc. These functions require an interpreter, at least, to be implemented properly. In addition, the powerful symbolic processing capabilities supporting GMac can be accessed using such scripting engine.</p>
<p>GMac scripting is intended for exploration of geometric ideas through GA-based geometric models and algorithms. Three languages can be integrated into a single GMac script, each for a specific purpose:</p>
<ol>
<li><a href="https://en.wikipedia.org/wiki/C_Sharp_(programming_language)" target="_blank" rel="noopener">C# code</a> comprises the main body of the script. C# is not originally designed for <a href="https://en.wikipedia.org/wiki/Scripting_language" target="_blank" rel="noopener">scripting purposes</a>, nevertheless, C# is a <a href="http://csharpindepth.com/" target="_blank" rel="noopener">very powerful</a> compiled statically typed object-oriented language that can be used for scripting. To simplify using C# as a scripting interface for GMac some <a href="https://en.wikipedia.org/wiki/Syntactic_sugar" target="_blank" rel="noopener">syntactic sugar</a> is used to &#8220;sweeten&#8221; the process of reading and writing GMac scripts.</li>
<li><a href="https://gmac-guides.netlify.com/index.php/gmacdsl-guide/" target="_blank" rel="noopener">GMacDSL code</a> can be executed on <a href="https://gmac-guides.netlify.com/index.php/gmacdsl-guide/#frames" target="_blank" rel="noopener">multivector</a> values and user-defined <a href="https://gmac-guides.netlify.com/index.php/gmacdsl-guide/#structures" target="_blank" rel="noopener">structures</a>. The scalar coefficients of multivectors can be numerical, symbolic, or a mix of both. GMac code is passed, as C# public method calls, to GMac internal services in string form to be automatically compiled and executed by the GMacCompiler.</li>
<li><a href="https://en.wikipedia.org/wiki/Mathematica" target="_blank" rel="noopener">Mathematica code</a> can be executed on the Mathematica kernel used in the background by GMac. The Mathematica text code is passed through C# service method calls to the Mathematica kernel through the SymbolicInterface classes. This can be used to exploit the full power of Mathematica through GMac to perform many symbolic manipulations and graphing tasks related to the purpose of the GA-based script exploration.</li>
</ol>
<p>The main input to the script is always a GMacAST structure compiled from the main GMacDSL code. This combination of GMacAST structure, C#, GMac, and Mathematica code, make GMac scripting a very powerful method for GA-models exploration from the simple to the complex.</p>
<p>Scripting in GMac is not intended for efficient execution of GA-based algorithms. If the user is satisfied by the final algorithm, GMacAPI can be used by a good software designer to implement an efficient, well-structured version of the script in any desired programming language, with specific types of multivectors and GA algorithms.</p>
<h3>Composing Text Art</h3>
<blockquote><p>In science, if you don&#8217;t do it, somebody else will. Whereas in art, if Beethoven didn&#8217;t compose the &#8216;Ninth Symphony,&#8217; no one else before or after is going to compose the &#8216;Ninth Symphony&#8217; that he composed; no one else is going to paint &#8216;Starry Night&#8217; by van Gogh. &#8212; Neil deGrasse Tyson.</p></blockquote>
<p><a href="/wp-content/uploads/2017/02/Composing-Code.jpg"><img class="alignright size-medium wp-image-2586" src="/wp-content/uploads/2017/02/Composing-Code-300x200.jpg" alt="Composing Code" width="300" height="200" srcset="/wp-content/uploads/2017/02/Composing-Code-300x200.jpg 300w, /wp-content/uploads/2017/02/Composing-Code.jpg 640w" sizes="(max-width: 300px) 100vw, 300px" /></a>The final stage in any compiler is <a href="https://en.wikipedia.org/wiki/Code_generation_(compiler)" target="_blank" rel="noopener">code generation</a> from some intermediate representation of the input source code. This stage is the most demanding for creativity because it relies on designing and implementing many optimizations to generate target code suitable for its specific consumer. Traditional compilers typically generate machine code for native hardware or byte code for virtual machine frameworks. This form of code is machine-oriented, cold and repetitive code not intended for reading or understanding by humans. GMac, being a DSL based <a href="https://en.wikipedia.org/wiki/Source-to-source_compiler" target="_blank" rel="noopener">source-to-source compiler</a>, produces programmer-oriented textual source code in some high-level human-readable language. The difference between designing the code generator of any typical compiler vs. the code generator of a system like GMac is similar to the difference between designing a machine that creates mechanical parts and designing a tool-set for an artist.</p>
<p>If we look up the verb <em><strong>compose</strong></em> in the <a href="https://www.merriam-webster.com/dictionary/compose" target="_blank" rel="noopener">Merriam-Webster online dictionary</a> we&#8217;ll find the following meanings:</p>
<ol>
<li><strong>A) to form by putting together</strong>: fashion; &#8216;a committee composed of three representatives&#8217;<br />
<strong>B) to form the substance of</strong>: constitute; &#8216;composed of many ingredients&#8217;<br />
<strong>C) to produce (as columns or pages of type) by composition</strong></li>
<li><strong>A) to create by mental or artistic labor</strong>: produce; &#8216;compose a sonnet&#8217;<br />
<strong>B) to formulate and write (a piece of music)</strong>: to compose music for</li>
<li><strong>to deal with or act on so as to reduce to a minimum</strong> &#8216;compose their differences&#8217;</li>
<li><strong>to arrange in proper or orderly form</strong></li>
<li><strong>to free from agitation</strong>: calm, settle &#8216;composed himself&#8217;</li>
</ol>
<p>My personal view of coding is a form of:</p>
<blockquote><p>Creative composition of highly structured, human-understandable, and machine-compilable text holding all the meanings of the verb <em><strong>compose</strong></em> stated above.</p></blockquote>
<p>To me writing code is not just about execution efficiency or blind implementation of algorithms; writing code is fundamentally artistic such that no two skilled software developers may produce the same code for a single problem. Like there can be no machine that may creatively produce music or paintings, there can be no single code generator that can, by itself, write human-understandable code with all its rich content of information, creativity, and beauty. Nevertheless, we can certainly make many smaller tool sets to help the skilled code developer layout code in the way humanly and creatively desired, while automatically generating machine-oriented code from the intermediate representation to free the <em><strong>coding artist</strong></em> from its repetitive cold nature.</p>
<p>The text generation tool set specifically created for GMac, but independently usable otherwise, is a C# library called <a href="/index.php/textcomposerlib-guide/" target="_blank" rel="noopener" class="broken_link"><strong>TextComposerLib</strong></a>. I made the decision of creating my own text generation component in 2013 after an extensive search for many similar libraries. I found no libraries that satisfied my vision for GMac. The TextComposerLib library is like a set of paint brushes to artists. The user can combine several of its text composition tools to create highly structured text. The structure can be generated on the internal level of a single document, or on the external level of files and folders.</p>
<p>In the future, I hope to make TextComposerLib more versatile and reliable by introducing <a href="https://en.wikipedia.org/wiki/Multithreading_(software)" target="_blank" rel="noopener">Multithreading</a> capabilities and designing a <a href="https://en.wikipedia.org/wiki/Service-oriented_programming" target="_blank" rel="noopener">Service-Oriented</a> interface. I also hope to release it as an open-source component for general text composition tasks.</p>
<h3>Building A Factory</h3>
<blockquote><p>Make everything as simple as possible, but not simpler. &#8212; Albert Einstein.</p></blockquote>
<p><a href="/wp-content/uploads/2017/02/Industrial-robots.jpg"><img class="alignright size-medium wp-image-2528" src="/wp-content/uploads/2017/02/Industrial-robots-300x169.jpg" alt="Factory" width="300" height="169" srcset="/wp-content/uploads/2017/02/Industrial-robots-300x169.jpg 300w, /wp-content/uploads/2017/02/Industrial-robots.jpg 500w" sizes="(max-width: 300px) 100vw, 300px" /></a>In 2014 I began implementing the GMac part I enjoyed the most; the <strong><a href="https://gmac-guides.netlify.com/index.php/gmacapi-guide/" target="_blank" rel="noopener">GMacAPI</a> </strong>code assembly component. If TextComposerLib is like a set of tools for artists to compose with, then GMacAPI is like a fully configurable production line for assembling structured code. Using this extensive and sophisticated <strong><a href="https://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="noopener">Application Programming Interface</a> (API)</strong>, you can perform a full process of assembling code libraries in any desired target programming language. Using the GMacAPI you can:</p>
<ul>
<li>Supply raw materials to the assembly line; mainly a compiled GMacAST data structure that is independent of any particular target language, like C#, Python, C++, Java, etc., from any particular external computing libraries, and from any particular software architecture required.</li>
<li>Use the full composition capabilities of TextComposerLib for producing the final code.</li>
<li>Define sub-processes for assembling subsets of the final code library by inheriting from the GMacAPI core classes.</li>
<li>Monitor and log each step of the code assembly process for debugging and maintenance.</li>
<li>Use GMacDSL macros to produce a series of optimized computationally equivalent low-level code in the target language of choice.</li>
</ul>
<p>I&#8217;m very proud of my work in the GMacAPI as it contains many interesting techniques from computer science and software engineering; especially techniques related to <a href="https://en.wikipedia.org/wiki/Optimizing_compiler" target="_blank" rel="noopener">code block optimization</a>. The tasks in which GMacAPI can be used are diverse and wide-ranging. I&#8217;ve tried my best to make it as simple as possible for a good software Engineer to use a given GA-model and create a full code library out of it. Because such goal is not easy to reach, using the GMacAPI component requires a good deal of learning and experimentation. I hope in the future to make it more accessible through some form of Visual Interface in which the software engineer can lay out the components, connect, and configure them visually with few lines of code as possible.</p>
<h3>Seeking Guidance</h3>
<blockquote><p>Conceptual integrity is the most important consideration in system design. &#8212; Fred Brooks, &#8220;The Mythical Man-Month&#8221;</p></blockquote>
<p><a href="/wp-content/uploads/2017/02/books-659690_640.jpg"><img class="alignright size-medium wp-image-2519" src="/wp-content/uploads/2017/02/books-659690_640-300x200.jpg" alt="Documentation" width="300" height="200" srcset="/wp-content/uploads/2017/02/books-659690_640-300x200.jpg 300w, /wp-content/uploads/2017/02/books-659690_640.jpg 640w" sizes="(max-width: 300px) 100vw, 300px" /></a>Software documentation is a hard but necessary part of any software system. GMac is a sophisticated system with lots of interacting components. For a good part of 2015 and 2016, I concentrated on writing the online <strong><a href="/index.php/about-gmac/" target="_blank" rel="noopener" class="broken_link">GMac Guides</a></strong>. The GMac Guides explain in good details the structure of the main components of GMac and how to use them as intended. While writing these guides I discovered some design deficiencies in some parts of GMac that needed fixing or enhancing. This is simply because I couldn&#8217;t explain them to myself in plain English, or with a direct example when I tried to write the GMac Guides.</p>
<p>Naturally, the full power of GMac can only be illustrated through practical examples. I&#8217;ve created the <strong><a href="https://gmac-guides.netlify.com/index.php/gmac-samples/" target="_blank" rel="noopener">GMac Samples</a></strong> page on this website for this purpose. In time this page should contain enough examples that I hope would motivate users to explore the computational space using Geometric Algebra and GMac.</p>
<h3>The Next Generation</h3>
<blockquote><p>Space: the final frontier. These are the voyages of the starship Enterprise. Its continuing mission: to explore strange new worlds, to seek out new life and new civilizations, to boldly go where no one has gone before. &#8212; <a href="https://www.youtube.com/watch?v=HnDtvZXYHgE" target="_blank" rel="noopener">Captain Jean-Luc Picard, Star Trek: The Next Generation</a></p></blockquote>
<div id="attachment_2497" style="width: 949px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/02/GMac-Components.png"><img class="wp-image-2497 size-full" src="/wp-content/uploads/2017/02/GMac-Components.png" alt="GMac Components" width="939" height="440" srcset="/wp-content/uploads/2017/02/GMac-Components.png 939w, /wp-content/uploads/2017/02/GMac-Components-300x141.png 300w, /wp-content/uploads/2017/02/GMac-Components-768x360.png 768w, /wp-content/uploads/2017/02/GMac-Components-520x245.png 520w" sizes="(max-width: 939px) 100vw, 939px" /></a><p class="wp-caption-text">The main components of GMac</p></div>
<p>I&#8217;m writing these words on the 9th of February 2017; it is my 40th birthday. This post is my final thoughts on the 8 years journey creating my own vessel for exploration, GMac. I don&#8217;t know if I will actually get to use it, as I hope, to explore the computational universe. I still need to add a visualization component and a multivector differentiation component to the mix. I also hope I could modify the design to use other CAS like SymPy or Maple and add a Visual Interface to create GMacDSL code that should be developed to apply functional programming techniques. Many other enhancements and components are possible. Nevertheless, I have learned a lot as I initially expected. I&#8217;m now ready to explore applications and algorithms with my own tool. I&#8217;m ready to contact other people to exchange ideas and investigate possibilities. I&#8217;m ready to begin a new journey as this one ends.</p>
<p><img class="alignright wp-image-2554 size-full" src="/wp-content/uploads/2017/02/Done.png" width="375" height="40" srcset="/wp-content/uploads/2017/02/Done.png 375w, /wp-content/uploads/2017/02/Done-300x32.png 300w" sizes="(max-width: 375px) 100vw, 375px" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class='endnotes' id='hhendnotes-2531'>
<ol>
<li id='en-2531-1'>Terence Parr is the creator of <a href="http://www.antlr.org/" target="_blank" rel="noopener"><strong>ANTLR</strong></a> <strong>(AN</strong>other<strong> T</strong>ool for<strong> L</strong>anguage<strong> R</strong>ecognition<strong>)</strong>; a powerful parser generator for reading, processing, executing, or translating structured text or binary files. It&#8217;s widely used to build languages, tools, and frameworks. From a grammar, ANTLR generates a parser that can build and walk parse trees. <span class='endnotereverse'><a href='#enref-2531-1'>&#8617;</a></span></li>
<li id='en-2531-2'>For more information about DSLs and alternative approaches, you can read my post &#8220;<a href="/index.php/2015/09/11/ga-computing1/" target="_blank" rel="noopener">Computing: Please, Mind Your Language!</a>&#8220;. <span class='endnotereverse'><a href='#enref-2531-2'>&#8617;</a></span></li>
<li id='en-2531-3'>You can find good Irony tutorials <a href="https://blogs.msdn.microsoft.com/kirillosenkov/2009/10/31/irony/" target="_blank" rel="noopener">here</a> and <a href="https://www.codeproject.com/Articles/22650/Irony-NET-Compiler-Construction-Kit" target="_blank" rel="noopener">here</a>, in addition to the many samples coming with the <a href="https://github.com/Alxandr/Irony" target="_blank" rel="noopener">Irony source code</a>. <span class='endnotereverse'><a href='#enref-2531-3'>&#8617;</a></span></li>
<li id='en-2531-4'>The IronyGrammars class library is not yet documented. I hope I could release it as an open-source project in the future. <span class='endnotereverse'><a href='#enref-2531-4'>&#8617;</a></span></li>
<li id='en-2531-5'>You can find the FCTB source code <a href="https://github.com/PavelTorgashov/FastColoredTextBox" target="_blank" rel="noopener">here</a>. <span class='endnotereverse'><a href='#enref-2531-5'>&#8617;</a></span></li>
</ol>
</div>
<p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=%2Findex.php%2F2017%2F02%2F10%2Fgmac-tng-2%2F&amp;linkname=GMac%3A%20The%20Next%20Generation%20%282%20of%202%29" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=%2Findex.php%2F2017%2F02%2F10%2Fgmac-tng-2%2F&amp;linkname=GMac%3A%20The%20Next%20Generation%20%282%20of%202%29" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=%2Findex.php%2F2017%2F02%2F10%2Fgmac-tng-2%2F&amp;linkname=GMac%3A%20The%20Next%20Generation%20%282%20of%202%29" title="Google+" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save" href="https://www.addtoany.com/share#url=%2Findex.php%2F2017%2F02%2F10%2Fgmac-tng-2%2F&amp;title=GMac%3A%20The%20Next%20Generation%20%282%20of%202%29" data-a2a-url="/index.php/2017/02/10/gmac-tng-2/" data-a2a-title="GMac: The Next Generation (2 of 2)"></a></p><p>The post <a rel="nofollow" href="/index.php/2017/02/10/gmac-tng-2/">GMac: The Next Generation (2 of 2)</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></content:encoded>
			</item>
		<item>
		<title>GMac: The Next Generation (1 of 2)</title>
		<link>/index.php/2017/02/09/gmac-tng-1/</link>
		<pubDate>Thu, 09 Feb 2017 16:00:02 +0000</pubDate>
		<dc:creator><![CDATA[Ahmad Eid]]></dc:creator>
				<category><![CDATA[GA Software]]></category>
		<category><![CDATA[GMac]]></category>
		<category><![CDATA[Belief in Allah]]></category>
		<category><![CDATA[Computational Universe]]></category>
		<category><![CDATA[Effort]]></category>
		<category><![CDATA[Geometric Algebra]]></category>
		<category><![CDATA[Introverted]]></category>
		<category><![CDATA[Journey]]></category>
		<category><![CDATA[Object Oriented]]></category>
		<category><![CDATA[Ph.D.]]></category>
		<category><![CDATA[Programming Paradigm]]></category>
		<category><![CDATA[Requirements]]></category>
		<category><![CDATA[Software Engineering]]></category>

		<guid isPermaLink="false">https://gacomputing.info/?p=2532</guid>
		<description><![CDATA[<p>The belief that complex systems require armies of designers and programmers is wrong. A system that is not understood in its entirety, or at least to a significant degree of detail by a single&#46;&#46;&#46;</p>
<p>The post <a rel="nofollow" href="/index.php/2017/02/09/gmac-tng-1/">GMac: The Next Generation (1 of 2)</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2017/02/water-1828846_1280.jpg"><img class="aligncenter size-large wp-image-2536" src="/wp-content/uploads/2017/02/water-1828846_1280-1024x682.jpg" alt="Water Drop" width="1024" height="682" srcset="/wp-content/uploads/2017/02/water-1828846_1280-1024x682.jpg 1024w, /wp-content/uploads/2017/02/water-1828846_1280-300x200.jpg 300w, /wp-content/uploads/2017/02/water-1828846_1280-768x512.jpg 768w, /wp-content/uploads/2017/02/water-1828846_1280.jpg 1280w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p>
<blockquote><p>The belief that complex systems require armies of designers and programmers is wrong. A system that is not understood in its entirety, or at least to a significant degree of detail by a single individual, should probably not be built. &#8212; Niklaus Wirth.</p></blockquote>
<p><span class="dropcap">I</span>n the summer of 2003, I was almost at the end of <a href="https://arxiv.org/abs/1607.06973" target="_blank">my M.Sc. thesis</a>. One day I was surfing the web searching for some references to add to the thesis I&#8217;d been writing. I ran into Mikael Nilsson’s interesting <a href="http://cid.nada.kth.se/pdf/CID-201.pdf" target="_blank">M.Sc. thesis</a> “Geometric Algebra with Conzilla: Building a Conceptual Web of Mathematics”. His work contains a nice introduction to Geometric Algebra, with accompanying <a href="https://en.wikipedia.org/wiki/Unified_Modeling_Language" target="_blank">UML</a>-based conceptual models. It got me very curious about GA. I made some more searches finding a few papers, books, and tutorials. After reading some of them I was suddenly transferred into a new world of algebraic abstractions. For the first time in my life as a student, engineer, and software developer I could hope to express, explore, and manipulate geometric abstractions with such clarity. I then decided that my Ph.D. will be about exploring Geometric Algebra using the best way I know: developing software. It was a natural decision to make given GA&#8217;s potential, but a hard and lonely journey to make. About 8 years have passed now developing my tool, <strong><a href="/index.php/about-gmac/" target="_blank" class="broken_link">GMac</a></strong>, into its current state all by myself passing through difficult events I could only have passed by Allah&#8217;s well and mercy.</p>
<p>In this post and the next, I talk about this journey and some of the lessons I learned along the way. I talk about how the current GMac design came to appear and the joys I found learning the hard way that profound belief <sup class='endnote'><a href='#en-2532-1' id='enref-2532-1' onclick='return hhEndnotes_show(2532)'>1</a></sup>, solid foundation, clear goals, and lots of patience are together the only way to realizing distant dreams.</p>
<h3>Discovering The Computational Universe</h3>
<blockquote><p>I had a very selfish reason for building Mathematica. I wanted to use it myself, a bit like Galileo got to use his telescope four hundred years ago. But I wanted to look, not at the astronomical universe, but at the computational universe. &#8212; Stephen Wolfram.</p></blockquote>
<div id="attachment_2486" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/02/Rule30-first-500-rows.png"><img class="size-medium wp-image-2486" src="/wp-content/uploads/2017/02/Rule30-first-500-rows-300x150.png" alt="Rule30-first-500-rows" width="300" height="150" srcset="/wp-content/uploads/2017/02/Rule30-first-500-rows-300x150.png 300w, /wp-content/uploads/2017/02/Rule30-first-500-rows-768x384.png 768w, /wp-content/uploads/2017/02/Rule30-first-500-rows.png 1008w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Rule 30: Rich behavior can emerge from very simple computational rules. (<a href="https://en.wikipedia.org/wiki/Rule_30" target="_blank">source</a>)</p></div>
<p>In the Autumn of 2005, I&#8217;d just begun my Ph.D. preparatory courses when I had another perceptual shift, this time in how I think about computations. I found Stephen Wolfram&#8217;s 2002 fascinating book <strong>&#8220;<a href="http://www.wolframscience.com/thebook.html" target="_blank">A New Kind of Science</a>&#8221; (NKS)</strong> after watching <a href="https://www.youtube.com/watch?v=_eC14GonZnU&amp;t=2s" target="_blank">one of his lectures about it</a>. After reading a few pages of NKS online, I couldn&#8217;t stop until I finished reading the whole book, without the endnotes, in just 2 weeks. I couldn&#8217;t wait to buy the book because it would take at least a month to arrive back then so <a href="http://www.wolframscience.com/nks/" target="_blank">I read it online</a>.</p>
<p>Reading this book made me rethink about many concepts of science, mathematics, and computation that I took for granted. Concepts like <a href="http://www.wolframscience.com/nks/chap-4--systems-based-on-numbers/" target="_blank">numbers</a>, <a href="http://www.wolframscience.com/nks/chap-6--starting-from-randomness/" target="_blank">chaos</a>, <a href="http://www.wolframscience.com/nks/chap-6--starting-from-randomness/" target="_blank">randomness</a>, <a href="http://www.wolframscience.com/nks/chap-3--the-world-of-simple-programs/" target="_blank">complexity</a>, <a href="https://www.youtube.com/watch?v=DJ0WG3D3m1U" target="_blank">intelligence</a>, <a href="http://www.wolframscience.com/nks/p606--traditional-mathematics-and-mathematical-formulas/" target="_blank">mathematical models</a>, and <a href="http://www.wolframscience.com/nks/chap-11--the-notion-of-computation/" target="_blank">the nature of computation</a>. Although I don&#8217;t agree with everything he says in his book, Wolfram&#8217;s insights and explorations are fascinating and inspiring for someone like me. The most intriguing of all the concepts he talks about is the <strong><a href="http://www.stephenwolfram.com/publications/mining-computational-universe/" target="_blank">Computational Universe</a></strong>. Wolfram used <a href="https://en.wikipedia.org/wiki/Cellular_automaton" target="_blank">cellular automata</a> and similar computational tools for mapping and mining the computational universe.</p>
<p>I instantly realized that Geometric Algebra can be a uniquely valuable tool in any attempt to explore the computational universe. I just needed the right computational vessel to make such explorations. I searched a lot but found none that suited my goals. I read that Wolfram had created <a href="https://en.wikipedia.org/wiki/Wolfram_Mathematica" target="_blank"><strong>Mathematica</strong></a> as his personal lab for doing computational experiments. All this made me decide to create my own GA-based tool for voyaging and exploring the computational universe, and so my journey began.</p>
<h3>Creating The Perfect Library</h3>
<blockquote><p>Good judgment comes from experience, and experience comes from bad judgment. &#8212; Frederick P. Brooks</p></blockquote>
<div id="attachment_2487" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/02/OOPrinciples.jpg"><img class="size-medium wp-image-2487" src="/wp-content/uploads/2017/02/OOPrinciples-300x266.jpg" alt="OO Design Principles" width="300" height="266" srcset="/wp-content/uploads/2017/02/OOPrinciples-300x266.jpg 300w, /wp-content/uploads/2017/02/OOPrinciples.jpg 620w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Object Oriented Design Principles (<a href="https://www.codeproject.com/Articles/186107/Object-Orientation-Beginners-Tutorial" target="_blank">source</a>)</p></div>
<p>When it comes to repetitive tasks, good software developers are the laziest of people; they prefer to create programs to do the repetitive tasks for them <sup class='endnote'><a href='#en-2532-2' id='enref-2532-2' onclick='return hhEndnotes_show(2532)'>2</a></sup>. To be more accurate, their deep creativity drives their apparent laziness. They never want to do the same task twice, and if they have to, they never want to do it in the same way. They almost always enjoy finding the most general framework for doing several tasks at once with minimum effort; I&#8217;m one of those people.</p>
<p>I started my actual Ph.D. research work in 2007 by studying GA mathematics through reading the excellent book &#8220;<a href="http://www.sciencedirect.com/science/book/9780123694652" target="_blank">Geometric Algebra for Computer Science</a>&#8220;. In 2008 I started to investigate several software designs and implementations in hope to implement a single perfect universal GA-based software library.</p>
<p>Driven by my creative laziness, I initially thought that the powerful unification GA brings to mathematics can be directly translated into a unified software library suitable for all <a href="/index.php/2015/09/18/ga-computing2/" target="_blank">Geometric Computing</a> purposes. I was naive back then with little experience in the difficult problems that face designing large sophisticated multi-purpose software systems. I gradually realized that this perfect software library is a myth. While working on the development of two big decision support software systems based on relational databases for several years, I gradually gained experience in the true meaning of the phrase &#8220;Necessity is the Mother of Invention&#8221;.</p>
<p>Successful software libraries are mainly driven by necessity not only by the elegance of some underlying abstraction, even a beautiful algebraic abstraction such as GA. Each particular application has its own set of necessities that we, software engineers, call requirements: <a href="https://en.wikipedia.org/wiki/Functional_requirement" target="_blank">functional</a>, <a href="https://en.wikipedia.org/wiki/Non-functional_requirement" target="_blank">non-functional</a>, financial, scope related, performance related, etc. There can never be a single perfect software library suitable for all applications in a wide-ranging domain like Geometric Computing.</p>
<p>Failing in my initial attempt I went higher in the level of abstraction. I had a good background in <a href="https://en.wikipedia.org/wiki/Object-oriented_design" target="_blank">Object-Oriented (OO) Software Design</a>. Why not, I asked myself, create an OO design based on the mathematical concepts of Geometric Algebra and then derive specific concrete implementations for specific applications. After all, this is how I learned about GA originally; using UML to diagram GA&#8217;s main concepts and relations. I soon found that OO design is a good conceptual tool to study some domain, but there can never be a single OO design suitable for all purposes either; especially when good memory\processing performance is critical <sup class='endnote'><a href='#en-2532-3' id='enref-2532-3' onclick='return hhEndnotes_show(2532)'>3</a></sup>. This got me to learn about other <a href="https://en.wikipedia.org/wiki/Programming_paradigm" target="_blank">programming paradigms</a> I&#8217;ve never considered reading about before.</p>
<h3>Shifting Paradigms</h3>
<blockquote><p>One principle problem of educating software engineers is that they will not use a new method until they believe it works and, more importantly, that they will not believe the method will work until they see it for themselves. &#8212; W. S. Humphrey, The Personal Software Process</p></blockquote>
<div id="attachment_2480" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/02/Programming-Paradigms.png"><img class="size-medium wp-image-2480" src="/wp-content/uploads/2017/02/Programming-Paradigms-300x261.png" alt="Programming Paradigms" width="300" height="261" srcset="/wp-content/uploads/2017/02/Programming-Paradigms-300x261.png 300w, /wp-content/uploads/2017/02/Programming-Paradigms-768x667.png 768w, /wp-content/uploads/2017/02/Programming-Paradigms-1024x889.png 1024w, /wp-content/uploads/2017/02/Programming-Paradigms.png 1179w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Programming Paradigms (<a href="https://en.wikipedia.org/wiki/File:Programming_paradigms.svg" target="_blank">source</a>)</p></div>
<p>Back in 2009, I only knew about <a href="https://en.wikipedia.org/wiki/Procedural_programming" target="_blank">procedural programming</a> and <a href="https://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank">object oriented programming</a>. I did some reading and discovered many other paradigms like functional, aspect-oriented, concurrent, dynamic, feature-oriented, and more. I realized that GA can be used equally well as an algebraic base for creating software in all of these paradigms. My deep creative laziness led me to the most general of all paradigms: <a href="https://en.wikipedia.org/wiki/Automatic_programming" target="_blank">Automatic Meta-Programming</a>.</p>
<p>In April 2009 I bought and read the book &#8220;<a href="https://www.amazon.com/Generative-Programming-Methods-Tools-Applications/dp/0201309777" target="_blank">Generative Programming: Methods, Tools, and Applications</a>&#8221; in which the authors present a grand tour of <a href="http://program-transformation.org/Transform/GenerativeProgrammingWiki" target="_blank">Generative Programming</a> that is bound to become a classic. The book focuses on the generally unappreciated connection, back then, between <strong><a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank">Domain Specific Languages</a> (DSLs)</strong> and Generative Programming as a motivation for future developments. I immediately started designing and implementing the first prototype of my dream GA-based software vessel for exploring the computational universe; I called it GMac. The prototype took a couple of months to be functional for the purpose of completing my Ph.D. <sup class='endnote'><a href='#en-2532-4' id='enref-2532-4' onclick='return hhEndnotes_show(2532)'>4</a></sup>.</p>
<p>I tried to apply some of what I&#8217;d learned from the Generative Programming book to implement simple GA-based algorithms, which I call <em><strong>G</strong></em>eometric <em><strong>Mac</strong></em>ros, through code generation. A geometric macro is a set of standard GA multivector expressions assigned to local variables inside the macro. There are no <a href="https://en.wikipedia.org/wiki/Control_flow" target="_blank">control flow statements</a> inside this simple computational concept. All the computational power mainly comes from the mathematics of GA itself. I used the GMac prototype to implement parts of a ray tracer that I implemented based on Kevin Suffern&#8217;s nice book &#8220;<a href="http://www.raytracegroundup.com/" target="_blank">Ray Tracing from the Ground Up</a>&#8220;, in addition to some other small computational problems.</p>
<p>Using Automatic Programming and Code Generation is a fundamental design decision I made for GMac. My experience with OO design can be expected to extend to all other programming paradigms. There can be no universal design methodology suitable for all applications. Even more, in a single large application, we might need several paradigms to be used <sup class='endnote'><a href='#en-2532-5' id='enref-2532-5' onclick='return hhEndnotes_show(2532)'>5</a></sup>. The only common activity between all paradigms is the creative composition of structured textual code that is both human-readable and machine-compilable. Instead of trying to force some kind of fixed design method upon GA-based application developers, we can just provide a set of powerful tools to help them in composing their application in whatever programming paradigm, software system design, or programming language they choose. I still believe this is the best, most effective, and most general way to use GA in software development.</p>
<h3>Swimming Upstream</h3>
<blockquote><p>I had to resign from the University to continue my intellectual research project. &#8212; <a href="http://www.arabphilosophers.com/English/philosophers/contemporary/contemporary-names/Abdl-Wahab%20Elmessiri/Article/E_Elmessiri.htm" target="_blank">Professor Abdel-Wahab Elmessiri</a> <sup class='endnote'><a href='#en-2532-6' id='enref-2532-6' onclick='return hhEndnotes_show(2532)'>6</a></sup></p></blockquote>
<div id="attachment_2548" style="width: 295px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/02/Introvert-Brain.jpg"><img class="size-large wp-image-2548" src="/wp-content/uploads/2017/02/Introvert-Brain-285x1024.jpg" alt="Introvert Brain" width="285" height="1024" srcset="/wp-content/uploads/2017/02/Introvert-Brain-285x1024.jpg 285w, /wp-content/uploads/2017/02/Introvert-Brain.jpg 736w" sizes="(max-width: 285px) 100vw, 285px" /></a><p class="wp-caption-text">I&#8217;m an Introvert. The brains of Introverts and Extroverts work differently.</p></div>
<p>My Ph.D. part of the journey was completed in April 2010 when I defended my thesis. It was an exhausting part of my life with many difficulties resulting from working in an anti-scientific, anti-creative environment by design; especially for <a href="https://www.quietrev.com/6-illustrations-that-show-what-its-like-in-an-introverts-head/" target="_blank">introverted people</a> like me <sup class='endnote'><a href='#en-2532-7' id='enref-2532-7' onclick='return hhEndnotes_show(2532)'>7</a></sup>. In this difficult environment, I met many talented, highly creative, and mostly self-educated people. These people motivated their colleagues and students to make the best research possible and sincerely promoted good education. I&#8217;m very grateful for their presence in my life. The system itself is designed to kill the hope in such talented people or drive them out into more scientifically and humanly attractive environments <sup class='endnote'><a href='#en-2532-8' id='enref-2532-8' onclick='return hhEndnotes_show(2532)'>8</a></sup>. As Barry Schwartz <sup class='endnote'><a href='#en-2532-9' id='enref-2532-9' onclick='return hhEndnotes_show(2532)'>9</a></sup> describes it in <a href="https://www.ted.com/talks/barry_schwartz_the_way_we_think_about_work_is_broken?language=en" target="_blank">his beautiful TED talk</a>:</p>
<blockquote><p>It is not true that you &#8220;just can&#8217;t get good help anymore.&#8221; It is true that you &#8220;can&#8217;t get good help anymore&#8221; when you give people work to do that is demeaning and soulless. And interestingly enough, Adam Smith — the same guy who gave us this incredible invention of mass production, and division of labor — understood this. He said, of people who worked in assembly lines, of men who worked in assembly lines, he says: &#8220;He generally becomes as stupid as it is possible for a human being to become.&#8221; Now, notice the word here is &#8220;become.&#8221; &#8220;He generally becomes as stupid as it is possible for a human being to become.&#8221; Whether he intended it or not, what Adam Smith was telling us there, is that the very shape of the institution within which people work creates people who are fitted to the demands of that institution and deprives people of the opportunity to derive the kinds of satisfactions from their work that we take for granted.</p></blockquote>
<p>You can get some idea about the results of this sad situation by reading this 2011 article by Hillel Ofek: &#8220;<a href="http://www.thenewatlantis.com/publications/why-the-arabic-world-turned-away-from-science" target="_blank">Why the Arabic World Turned Away From Science</a>&#8220;. I can only pray and hope this situation changes in the near future.</p>
<p>In 2010 I made a mistake trying to publish my Ph.D. work as an article in a high-profile journal not concerned about Geometric Algebra. They rejected the article for good reasons, mostly not related to GA but to the article itself. The editor gave me a piece of advice going around Geometric Algebra having nothing new to offer in terms of applications in computer science. He emphasized that more effort must be made by the GA community to overcome this situation by finding new insights that only GA can provide. I realized then that choosing to do research using GA is a lonely path to take. Recently, I made some <a href="/index.php/category/interview/" target="_blank">interviews</a> with leading researchers in the GA community who stated this experience in similar words. The situation has gotten much better in the last couple of years where GA-related research started to appear at increasing rates in many fields in engineering and computer science.</p>
<p>After completing my Ph.D. back in 2010 I knew I had to design a new version of GMac to realize my dream vessel for exploring the computational universe with Geometric Algebra. I knew it would be a difficult journey to make. As Walter Bright puts it in his article &#8220;<a href="http://www.drdobbs.com/architecture-and-design/so-you-want-to-write-your-own-language/240165488" target="_blank">So You Want To Write Your Own Language?</a>&#8220;:</p>
<blockquote><p>First off, you&#8217;re in for a lot of work…years of work…most of which will be wandering in the desert. The odds of success are heavily stacked against you. If you are not strongly self-motivated to do this, it isn&#8217;t going to happen. If you need validation and encouragement from others, it isn&#8217;t going to happen.</p></blockquote>
<p>Nevertheless, I was certain that GA will be accepted in the near future as a major language for mathematical modeling in computer science and engineering. I was also certain that I will gain much experience and feel many joys developing the next generation of GMac. I could only work on my project alone against the surrounding environment for two to four months per year because of my many family obligations and non-research work duties. These available months weren&#8217;t even consecutive; they were spread along the year with no apparent order. During all these years whenever I got an opportunity to make research I faced a difficult question. Should I focus on writing papers in computer science topics not related to Geometric Algebra to be promoted? Or should I invest the little time I had in developing my dream vessel? I always chose the second.</p>
<p>After I finally got promoted to Assistant Professor <sup class='endnote'><a href='#en-2532-10' id='enref-2532-10' onclick='return hhEndnotes_show(2532)'>10</a></sup> in July 2010 and for another full year up to Summer 2011, I had to find additional jobs to support my family, so I had to delay developing the next generation of GMac until August 2011.</p>
<p>In <a href="/index.php/2017/02/10/gmac-tng-2/" target="_blank">the final part</a> of this series, I will talk about the next phase of my journey developing GMac&#8217;s next generation. I will explain its main components and how I arrived at their design.</p>
<p><img class="size-full wp-image-2554 alignright" src="/wp-content/uploads/2017/02/Done.png" alt="" width="375" height="40" srcset="/wp-content/uploads/2017/02/Done.png 375w, /wp-content/uploads/2017/02/Done-300x32.png 300w" sizes="(max-width: 375px) 100vw, 375px" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class='endnotes' id='hhendnotes-2532'>
<ol>
<li id='en-2532-1'>Belief in Islam, or &#8220;Iman&#8221; in Arabic, has 6 pillars: Belief in Allah, Belief in the angels, Belief in the revealed books, Belief in the commissioned Messengers (peace be upon them), Belief in the resurrection and the events of Qiyamah, Belief in the predestination by Allah of all things, both the (seemingly) good and the (seemingly) bad. You can read more details <a href="http://www.missionislam.com/knowledge/sixpillarsiman.htm" target="_blank">about this central concept in here</a>. You can also watch this beautiful lecture illustrating the profound effects of believing in these 6 pillars on <a href="https://www.islamreligion.com/articles/78/jeffrey-lang-professor-of-mathematics-and-writer-usa/" target="_blank">Dr. Jeffrey Lang</a>, an Associate Professor of Mathematics at the University of Kansas. <span class='endnotereverse'><a href='#enref-2532-1'>&#8617;</a></span></li>
<li id='en-2532-2'>Many online articles express this idea in one form or another as a common experience. For some examples, see <a href="https://swizec.com/blog/programmers-are-fucking-lazy/swizec/2648" target="_blank">here</a>, <a href="https://blog.codinghorror.com/how-to-be-lazy-dumb-and-successful/" target="_blank">here</a>, and <a href="https://jaxenter.com/results-developers-strategically-lazy-113513.html" target="_blank">here</a>. <span class='endnotereverse'><a href='#enref-2532-2'>&#8617;</a></span></li>
<li id='en-2532-3'>I now know from first-hand experience that there are many deep conceptual problems associated with Object-Oriented Programming and the misuse of Object-Oriented Design. You can get a good idea by watching David West&#8217;s lecture &#8220;<a href="https://www.youtube.com/watch?v=RdE-d_EhzmA" target="_blank">OOP is Dead! Long Live OODD!</a>&#8221; <span class='endnotereverse'><a href='#enref-2532-3'>&#8617;</a></span></li>
<li id='en-2532-4'>All the details of this GMac prototype can be found in my Ph.D. You can download a softcopy from <a href="https://arxiv.org/abs/1607.04767" target="_blank">here</a>, or buy a hard copy <a href="https://www.amazon.com/Code-Generation-Geometric-Algebra-Abstractions/dp/3330804653" target="_blank">from Amazon</a>. <span class='endnotereverse'><a href='#enref-2532-4'>&#8617;</a></span></li>
<li id='en-2532-5'>This occasional necessity affected the design of some powerful modern multi-paradigm languages like <a href="https://en.wikipedia.org/wiki/F_Sharp_(programming_language)" target="_blank">F#</a> and <a href="https://www.scala-lang.org/" target="_blank">Scala</a>, for example. <span class='endnotereverse'><a href='#enref-2532-5'>&#8617;</a></span></li>
<li id='en-2532-6'>Professor Abdel-Wahab Elmessiri is a famous Egyptian thinker, one of the critics of western modernity, and a pro of founding an &#8216;Islamic&#8217; version of modernism, author of the Encyclopedia &#8220;Jews, Judaism and Zionism&#8221;. <span class='endnotereverse'><a href='#enref-2532-6'>&#8617;</a></span></li>
<li id='en-2532-7'>In 2014, I read Susan Cain&#8217;s fascinating book &#8220;<a href="https://www.goodreads.com/book/show/8520610-quiet" target="_blank">Quiet: The Power of Introverts in a World That Can&#8217;t Stop Talking</a>&#8220;. It profoundly changed how I perceive myself and others. You can get an idea about the importance of her ideas for all humans by watching <a href="https://www.ted.com/talks/susan_cain_the_power_of_introverts" target="_blank">her TED talk</a>. Also, <a href="https://www.quietrev.com/6-illustrations-that-show-what-its-like-in-an-introverts-head/" target="_blank">this nice article</a> illustrates how introverts&#8217; minds work internally. I recommend following her ideas as they are important for any activities requiring human interactions, especially teaching and learning. <span class='endnotereverse'><a href='#enref-2532-7'>&#8617;</a></span></li>
<li id='en-2532-8'>The direct cause of this can be found in <a href="http://www.yesmagazine.org/happiness/want-the-good-life-your-neighbors-need-it-too" target="_blank">this article</a>, where epidemiologist Richard Wilkinson discusses new research showing that, among developed countries, the healthiest and happiest aren&#8217;t those with the highest incomes but those with the most equality. <span class='endnotereverse'><a href='#enref-2532-8'>&#8617;</a></span></li>
<li id='en-2532-9'>Barry Schwartz studies the link between economics and psychology, offering startling insights into modern life. He is the author of the book &#8220;Why We Work&#8221; providing an eye-opening, groundbreaking tour of the purpose of work in our lives. <span class='endnotereverse'><a href='#enref-2532-9'>&#8617;</a></span></li>
<li id='en-2532-10'>You can read more about academic ranks in Egyptian universities in <a href="https://en.wikipedia.org/wiki/Academic_ranks_in_Egypt" target="_blank">here</a>. <span class='endnotereverse'><a href='#enref-2532-10'>&#8617;</a></span></li>
</ol>
</div>
<p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=%2Findex.php%2F2017%2F02%2F09%2Fgmac-tng-1%2F&amp;linkname=GMac%3A%20The%20Next%20Generation%20%281%20of%202%29" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=%2Findex.php%2F2017%2F02%2F09%2Fgmac-tng-1%2F&amp;linkname=GMac%3A%20The%20Next%20Generation%20%281%20of%202%29" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=%2Findex.php%2F2017%2F02%2F09%2Fgmac-tng-1%2F&amp;linkname=GMac%3A%20The%20Next%20Generation%20%281%20of%202%29" title="Google+" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save" href="https://www.addtoany.com/share#url=%2Findex.php%2F2017%2F02%2F09%2Fgmac-tng-1%2F&amp;title=GMac%3A%20The%20Next%20Generation%20%281%20of%202%29" data-a2a-url="/index.php/2017/02/09/gmac-tng-1/" data-a2a-title="GMac: The Next Generation (1 of 2)"></a></p><p>The post <a rel="nofollow" href="/index.php/2017/02/09/gmac-tng-1/">GMac: The Next Generation (1 of 2)</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Elements of Geometric Algebra</title>
		<link>/index.php/2017/01/28/ga-elements/</link>
		<pubDate>Sat, 28 Jan 2017 14:00:08 +0000</pubDate>
		<dc:creator><![CDATA[Ahmad Eid]]></dc:creator>
				<category><![CDATA[GA Math]]></category>
		<category><![CDATA[Geometric Algebra]]></category>
		<category><![CDATA[Blades]]></category>
		<category><![CDATA[Contraction]]></category>
		<category><![CDATA[Geometric Product]]></category>
		<category><![CDATA[Inner Product]]></category>
		<category><![CDATA[Linear Transforms]]></category>
		<category><![CDATA[Metric]]></category>
		<category><![CDATA[Numbers]]></category>
		<category><![CDATA[Orthogonal Transforms]]></category>
		<category><![CDATA[Outer Product]]></category>
		<category><![CDATA[Outermorphism]]></category>
		<category><![CDATA[Space Embedding]]></category>
		<category><![CDATA[Vector Space]]></category>
		<category><![CDATA[Versors]]></category>

		<guid isPermaLink="false">http://gacomputing.info/?p=2285</guid>
		<description><![CDATA[<p>Geometry can in no way be viewed&#8230; as a brach of mathematics; instead, geometry relates to something already given in nature, namely, space. I also had realized that there must be a branch of&#46;&#46;&#46;</p>
<p>The post <a rel="nofollow" href="/index.php/2017/01/28/ga-elements/">Elements of Geometric Algebra</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2017/01/molecules-1511909_1280.jpg"><img class="aligncenter size-large wp-image-2288" src="/wp-content/uploads/2017/01/molecules-1511909_1280-1024x737.jpg" alt="Elements" width="1024" height="737" srcset="/wp-content/uploads/2017/01/molecules-1511909_1280-1024x737.jpg 1024w, /wp-content/uploads/2017/01/molecules-1511909_1280-300x216.jpg 300w, /wp-content/uploads/2017/01/molecules-1511909_1280-768x553.jpg 768w, /wp-content/uploads/2017/01/molecules-1511909_1280.jpg 1280w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p>
<blockquote><p>Geometry can in no way be viewed&#8230; as a brach of mathematics; instead, geometry relates to something already given in nature, namely, space. I also had realized that there must be a branch of mathematics which yields in a purely abstract way laws similar to geometry. &#8212; Hermann Grassmann</p></blockquote>
<p><span class="dropcap">A</span>ny useful mathematical structure consists of some integrating abstract elements. The mathematical structure of Geometric Algebra is sophisticated but very elegant and easy to understand. In my view as a software engineer, I could identify 10 main elements <sup class='endnote'><a href='#en-2285-1' id='enref-2285-1' onclick='return hhEndnotes_show(2285)'>1</a></sup> of the mathematical structure of GA. Some of these elements are well studied mathematical disciplines by their own right. The integration of the 10 elements, however, produces a rich mathematical language capable of expressing much more than the mere sum of its parts. In this post, I will describe each component and talk a little about its significance and varieties without delving into any mathematical details. The interested reader can find many tutorials and links to explain in full details the mathematics of Geometric Algebra on my <a href="/index.php/ga-online-resources/" target="_blank" rel="noopener noreferrer">GA Online Resources page</a>. The information in this post can be useful for someone starting to study GA and wanting a clear roadmap for understanding and relating its main concepts and algebraic tools.</p>
<h3>Reaching Escape Velocity</h3>
<blockquote><p>You don’t see something until you have the right metaphor to let you perceive it. &#8212; James Gleick, Chaos: Making a New Science</p></blockquote>
<div id="attachment_1600" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2016/04/GA-Components.png" rel="attachment wp-att-1600"><img class="wp-image-1600 size-medium" src="/wp-content/uploads/2016/04/GA-Components-300x300.png" alt="GA Components" width="300" height="300" srcset="/wp-content/uploads/2016/04/GA-Components-300x300.png 300w, /wp-content/uploads/2016/04/GA-Components-150x150.png 150w, /wp-content/uploads/2016/04/GA-Components-160x160.png 160w, /wp-content/uploads/2016/04/GA-Components-320x320.png 320w, /wp-content/uploads/2016/04/GA-Components.png 764w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">The 10 Elements of Geometric Algebra</p></div>
<p>It&#8217;s physically hard to <a href="http://scienceblogs.com/startswithabang/2012/06/22/its-hard-to-leave-this-world/" target="_blank" rel="noopener noreferrer">leave the Earth into space</a>. We need to construct a complex system with lots of engineering effort to overcome <a href="http://www.animations.physics.unsw.edu.au/jw/gravity.htm" target="_blank" rel="noopener noreferrer">Earth&#8217;s gravity</a>. It&#8217;s been conceptually harder for people at some times in history to imagine this is even possible, or that the Earth is actually round for that matter. As soon as we got out there, we could create a whole new world of concepts, possibilities, activities, and <a href="http://www.therichest.com/rich-list/the-biggest/20-shocking-nasa-inventions-we-use-everyday/" target="_blank" rel="noopener noreferrer">applications</a> related to space exploration that <a href="https://en.wikipedia.org/wiki/NASA_spin-off_technologies" target="_blank" rel="noopener noreferrer">affects our daily lives</a>.</p>
<p>A similar situation exists in the way we understand and model our physical reality. We tend to be conceptually limited to think geometrically using 3D Euclidean space; even 2D for many people. This tendency is most apparent in our reliance for more than a century on <a href="https://en.wikipedia.org/wiki/Vector_calculus" target="_blank" rel="noopener noreferrer">3D vector analysis</a> with its limited mathematical structure and special-case algebraic operations of dot product and cross product extracted from Hamilton&#8217;s algebra of quaternions <sup class='endnote'><a href='#en-2285-2' id='enref-2285-2' onclick='return hhEndnotes_show(2285)'>2</a></sup>. To escape from this conceptual prison, we need to embrace <a href="https://plato.stanford.edu/entries/geometry-19th/" target="_blank" rel="noopener noreferrer">19th-century geometry</a> <sup class='endnote'><a href='#en-2285-3' id='enref-2285-3' onclick='return hhEndnotes_show(2285)'>3</a></sup> with its transcending dimension independent concepts and ideas. The problems we face while trying to understand and use this fascinating set of geometric ideas are analogous to difficulties we faced trying to reach the escape velocity of the Earth. We need a powerful mathematical structure to symbolically encode, manipulate, and explore such concepts and ideas freely. Geometric Algebra is the most powerful candidate for this difficult task. To understand the reason, we need to understand GA&#8217;s main elements and how they integrate to construct an algebraic language suitable for exploring these transcending geometric ideas better than any other single algebraic tool currently available.</p>
<h3>1. The Field</h3>
<div id="attachment_1603" style="width: 504px" class="wp-caption alignright"><a href="/wp-content/uploads/2016/04/ellipse.png" rel="attachment wp-att-1603"><img class="size-full wp-image-1603" src="/wp-content/uploads/2016/04/ellipse.png" alt="ellipse" width="494" height="323" srcset="/wp-content/uploads/2016/04/ellipse.png 494w, /wp-content/uploads/2016/04/ellipse-300x196.png 300w" sizes="(max-width: 494px) 100vw, 494px" /></a><p class="wp-caption-text">Analytic Geometry and Trigonometry Represent 2D and 3D Euclidean Geometry using many relations between numbers (<a href="https://www.mathalino.com/reviewer/analytic-geometry/ellipse">source</a>)</p></div>
<p>At the base of geometric algebra structure, we find the scalars (i.e. numbers) used in representing and processing geometric quantities. We mostly work with rational, real, and complex scalars in our geometric models and applications. At the most abstract level, all three number systems have essential abstract properties in common, given the mathematical name of <a href="https://en.wikipedia.org/wiki/Field_(mathematics)">Fields</a>. Many other, rather strange, mathematical fields (number systems) exist and can be the basis of constructing a geometric algebra for some specific application, such as <a href="https://en.wikipedia.org/wiki/Finite_field#Applications">finite fields</a>, <a href="https://en.wikipedia.org/wiki/P-adic_number">p-adic numbers</a>, and <a href="https://en.wikipedia.org/wiki/Hyperreal_number">hyperreal numbers</a>. On the other extreme, in the lowest level of any geometric computing software implementation, concrete representations of numbers, like the notorious floating-points, are the practical data representation method. All geometric processing happens through primitive operations on numbers inside computers.</p>
<p>Historically, the first attempts to find an algebra to represent geometry resulted in <a href="https://en.wikipedia.org/wiki/Trigonometry">trigonometry</a> and <a href="https://en.wikipedia.org/wiki/Analytic_geometry">analytic geometry</a>. These two methods, still used today, essentially relate sets of numbers (representing coordinates, lengths, angles, areas, volumes, etc.) using many equations that can be useful in simple 2D and 3D geometric applications <sup class='endnote'><a href='#en-2285-4' id='enref-2285-4' onclick='return hhEndnotes_show(2285)'>4</a></sup>. For more involved or abstract geometric reasoning tasks, the equations become too complex to be useful even for geometrically simple curves and surfaces. Eventually, the need for representing geometry in higher dimensions led to the development of vector spaces.</p>
<h3>2. The Vector Space</h3>
<div id="attachment_2223" style="width: 306px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/01/Linear_combination_in_2D_space.png"><img class="size-medium wp-image-2223" src="/wp-content/uploads/2017/01/Linear_combination_in_2D_space-296x300.png" alt="Linear Combinations" width="296" height="300" srcset="/wp-content/uploads/2017/01/Linear_combination_in_2D_space-296x300.png 296w, /wp-content/uploads/2017/01/Linear_combination_in_2D_space.png 603w" sizes="(max-width: 296px) 100vw, 296px" /></a><p class="wp-caption-text">Vector Spaces are sets of elements closed under Linear Combinations (<a href="https://commons.wikimedia.org/wiki/File:Linear_combination_in_2D_space.png">source</a>)</p></div>
<p>The second component in the mathematical structure of geometric algebra is a finite dimensional <a href="https://en.wikipedia.org/wiki/Vector_space">Vector Space</a> over the selected field. Here the term &#8220;vector&#8221; is taken in its most abstract meaning as a mathematical entity satisfying specific properties. The main purpose of vector spaces is to study properties of sets of entities closed under <a href="https://en.wikipedia.org/wiki/Linear_combination" target="_blank" rel="noopener noreferrer">Linear Combinations</a>. <a href="https://en.wikipedia.org/wiki/Examples_of_vector_spaces">Many objects in mathematics</a> can be used as vectors in this abstract context including:</p>
<ul>
<li>Classical <a href="https://en.wikipedia.org/wiki/Euclidean_vector">Euclidean vectors</a> over real numbers (straight arrows having &#8220;length&#8221; and &#8220;direction&#8221; in space).</li>
<li>Any field is actually a 1D vector space over itself.</li>
<li>Coordinate spaces which are tuples of the same size along with addition and scalar multiplication are common representations of vector spaces.</li>
<li>Matrices are vectors with additional structure.</li>
<li>Polynomials of one or more variables.</li>
</ul>
<p>To correctly understand Geometric Algebra we must first understand Vector Spaces. This can only be done from the <a href="https://en.wikipedia.org/wiki/Abstract_algebra" target="_blank" rel="noopener noreferrer">Abstract Algebra</a> point of view <sup class='endnote'><a href='#en-2285-5' id='enref-2285-5' onclick='return hhEndnotes_show(2285)'>5</a></sup>. not the coordinates-based Matrix Algebra point of view <sup class='endnote'><a href='#en-2285-6' id='enref-2285-6' onclick='return hhEndnotes_show(2285)'>6</a></sup>. It&#8217;s important for engineering and computer science students to be exposed to abstract algebra in their early study to free their minds of the numerical coordinate based representations and ascend to the level of abstraction necessary for Abstract Geometric Thinking <sup class='endnote'><a href='#en-2285-7' id='enref-2285-7' onclick='return hhEndnotes_show(2285)'>7</a></sup>. In summary, a vector is a symbolic abstraction different from the concrete tuple of coordinates that can represent it numerically within a given basis set.</p>
<h3>3. The Metric</h3>
<div id="attachment_1606" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2016/04/euclidMetricAnnot.png" rel="attachment wp-att-1606"><img class="size-medium wp-image-1606" src="/wp-content/uploads/2016/04/euclidMetricAnnot-300x260.png" alt="Minkowski Metric" width="300" height="260" srcset="/wp-content/uploads/2016/04/euclidMetricAnnot-300x260.png 300w, /wp-content/uploads/2016/04/euclidMetricAnnot.png 528w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">In Euclidean space, if the &#8216;distance&#8217; between two points is zero then the points are identical (have the same coordinates) but in other geometries, such as Minkowski geometry, this is not necessarily true (<a href="http://www.euclideanspace.com/maths/geometry/space/metric/index.htm">source</a>).</p></div>
<p>One of the simplest geometric figures we know about from early childhood is the circle. When we grow up a little, we are told that a circle is the set of all points having <strong>equal distance</strong> from a fixed point, its center. When we grow up more we discover that the concept of <strong>distance</strong> has <a href="https://en.wikipedia.org/wiki/Distance" target="_blank" rel="noopener noreferrer">many meanings</a>. For example, if we study physics and read about relativity we find a very strange kind of distance defining what is called the <a href="https://en.wikipedia.org/wiki/Minkowski_space" target="_blank" rel="noopener noreferrer">Minkowski Space</a> where two different points can have a distance equal to zero! Because the difference between two points (positions) is, geometrically, a vector (direction), we may have a non-zero vector with zero length in this strange space! Such kinds of distances are found all over physics, engineering, and computer science. The familiar <a href="https://en.wikipedia.org/wiki/Euclidean_space" target="_blank" rel="noopener noreferrer">Euclidean Space</a> is just <a href="https://en.wikipedia.org/wiki/Minkowski_distance" target="_blank" rel="noopener noreferrer">a special case</a> in this collection.</p>
<p>Mathematically, we capture the concept of distance using <a href="https://en.wikipedia.org/wiki/Metric_(mathematics)" target="_blank" rel="noopener noreferrer">Metrics</a> and use it to define <a href="https://en.wikipedia.org/wiki/Metric_space" target="_blank" rel="noopener noreferrer">Metric Spaces</a> having <a href="https://en.wikipedia.org/wiki/Category:Metric_geometry" target="_blank" rel="noopener noreferrer">Metric Geometry</a>. It&#8217;s not possible to model many important relations between points, vectors, and subspaces without first defining a metric. Properties and relations like distance, length, angles, orthogonality, etc. require a well-defined metric. By associating different metrics with the same vector space, we completely change the kinds of geometric concepts we can describe. This is why the metric we select for constructing a Geometric Algebra is very important in all following geometric interpretations of the space and its multivectors.</p>
<div id="attachment_2264" style="width: 905px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/metric.jpg"><img class="size-full wp-image-2264" src="/wp-content/uploads/2017/01/metric.jpg" alt="Metric Geometry" width="895" height="342" srcset="/wp-content/uploads/2017/01/metric.jpg 895w, /wp-content/uploads/2017/01/metric-300x115.jpg 300w, /wp-content/uploads/2017/01/metric-768x293.jpg 768w" sizes="(max-width: 895px) 100vw, 895px" /></a><p class="wp-caption-text">On the left: Two circles in Euclidean Space, on the right: The same circles in Minkowski space. By changing the metric, the generation of geometric concepts, like a circle, create different sets of points and relations (<a href="http://www.pitt.edu/~jdnorton/teaching/HPS_0410/chapters_2017_Jan_1/spacetime/index.html" target="_blank" rel="noopener noreferrer">source</a>)</p></div>
<p>Applying the Geometric Generators pattern to different metrics results in very different sets of points. For example, using a point C and number r we can generate a circle by finding all other points having distance r from C. In Euclidean space this generates the familiar round set of points we call a circle. In other metrics, the result is quite different. The beauty of 19th-century geometry can only be viewed using such important mathematical concept, which is also a fundamental part of the construction of Geometric Algebra.</p>
<p>Algebraically, we can use the <a href="https://en.wikipedia.org/wiki/Inner_product_space" target="_blank" rel="noopener noreferrer"><strong>inner product</strong></a>, the <strong><a href="https://en.wikipedia.org/wiki/Dot_product" target="_blank" rel="noopener noreferrer">dot product</a></strong> in Euclidean space, of vectors to represent the metric associated with their vector space. For the construction of Geometric Algebra, a better algebraic foundation of a metric is to use a <strong><a href="https://en.wikipedia.org/wiki/Symmetric_bilinear_form" target="_blank" rel="noopener noreferrer">symmetric bilinear form</a></strong> or the equivalent <strong><a href="https://en.wikipedia.org/wiki/Quadratic_form" target="_blank" rel="noopener noreferrer">quadratic form</a></strong>.</p>
<h3>4. Linear Transforms</h3>
<div id="attachment_2268" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/01/Linear-Transform.jpg"><img class="size-medium wp-image-2268" src="/wp-content/uploads/2017/01/Linear-Transform-300x229.jpg" alt="Linear Transform" width="300" height="229" srcset="/wp-content/uploads/2017/01/Linear-Transform-300x229.jpg 300w, /wp-content/uploads/2017/01/Linear-Transform.jpg 436w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">A Linear Transform is an abstract concept that can be represented by different matrices on different sets of basis (<a href="https://en.wikipedia.org/wiki/Linear_map#/media/File:Linear_transformation_visualization.svg" target="_blank" rel="noopener noreferrer">source</a>)</p></div>
<p>As engineers, we tend to perceive a <a href="https://en.wikipedia.org/wiki/Linear_map" target="_blank" rel="noopener noreferrer">Linear Transform</a> as a matrix that when multiplied by a coordinate vector generates another. This is another case of mixing the representation with the concept. Just as vectors are abstractions, linear transforms are abstractions. We should understand that matrices are not the only, or even the best, representations for linear transforms in all cases.</p>
<p>This way of thinking explains why many properties of matrices, including square matrices, are <a href="https://en.wikipedia.org/wiki/Matrix_similarity" target="_blank" rel="noopener noreferrer">invariant</a> under <a href="https://en.wikipedia.org/wiki/Change_of_basis" target="_blank" rel="noopener noreferrer">change of basis</a> linear transforms like rank, having an inverse, orthogonality of its row\column vectors, eigenvalues, determinant, etc. These properties are independent of the selected set of vector basis and are actually properties of the abstract linear transform the matrix represents. Some operations on matrices preserve such properties and can be used to study the linear transform, while other matrix operations are pure calculation without significant meaning with regard to the linear transformation the matrix represents. Studying Geometric Algebra requires this level of distinction especially when generalizing linear transformations from being applied to vectors to being applied to subspaces, i.e. outermophisms operating on GA blades.</p>
<div id="attachment_2270" style="width: 310px" class="wp-caption alignleft"><a href="/wp-content/uploads/2017/01/Sparse-Fourier-Transform.jpg"><img class="size-medium wp-image-2270" src="/wp-content/uploads/2017/01/Sparse-Fourier-Transform-300x183.jpg" alt="Sparse Fourier Transform" width="300" height="183" srcset="/wp-content/uploads/2017/01/Sparse-Fourier-Transform-300x183.jpg 300w, /wp-content/uploads/2017/01/Sparse-Fourier-Transform.jpg 601w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Using Linear Transforms we can apply the <a href="https://en.wikipedia.org/wiki/Superposition_principle" target="_blank" rel="noopener noreferrer">Superposition principle</a>.</p></div>
<p>In engineering, the use of linear transformations is particularly important. Most engineers are taught to use and analyze linear systems at an early stage of their study. If we model a physical system as an abstract linear system, we can analyze the response of the linear system to a complicated input signal by analyzing the signal into simpler ones. Here we consider a signal as a vector that can be expressed as a linear combination of basis vectors (basis signals). Now using the composite linear transform the system performs we can compute the system output for each basis signal and apply the same linear combination of outputs to obtain the total system output due to the full input signal. This is called the <a href="https://en.wikipedia.org/wiki/Superposition_principle" target="_blank" rel="noopener noreferrer">Superposition Principle</a>; a cornerstone in modern engineering.</p>
<div id="attachment_2283" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/01/Projective-Space.jpg"><img class="size-medium wp-image-2283" src="/wp-content/uploads/2017/01/Projective-Space-300x225.jpg" alt="Curves in Projective Space" width="300" height="225" srcset="/wp-content/uploads/2017/01/Projective-Space-300x225.jpg 300w, /wp-content/uploads/2017/01/Projective-Space-768x576.jpg 768w, /wp-content/uploads/2017/01/Projective-Space.jpg 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Linear Transforms are important for studying Projective Spaces (<a href="https://commons.wikimedia.org/wiki/File:Parabola_%26_cubic_curve_in_projective_space.png" target="_blank" rel="noopener noreferrer">source</a>)</p></div>
<p>One important use of linear transforms in geometric modeling is the representation of <a href="https://en.wikipedia.org/wiki/Homography" target="_blank" rel="noopener noreferrer">Projective Transformations</a> (Homographies) between <a href="https://en.wikipedia.org/wiki/Projective_space" target="_blank" rel="noopener noreferrer">Projective Spaces</a>. The study and use of <a href="https://en.wikipedia.org/wiki/Projective_geometry" target="_blank" rel="noopener noreferrer">Projective Geometry</a> are fundamental to many applications in Computer Graphics, Computer Vision, Robotics, and Image Processing. Geometric Algebra is a perfect fit for expressing and developing ideas related to projective geometry as illustrated by the many articles relating GA to Projective Geometry both theoretically and practically.</p>
<p>If we use GA to model some practical problem, we probably need several GA spaces each representing one aspect of the problem. In this case, we need to define several linear transforms to switch between the GA spaces. As I will explain shortly, linear transforms on vectors can be automatically extended to subspaces using Outermorphisms. This way, any multivector can be transformed between GA spaces as we need.</p>
<h3>5. The Outer Product</h3>
<div id="attachment_2395" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/01/Vector.jpg"><img class="size-medium wp-image-2395" src="/wp-content/uploads/2017/01/Vector-300x294.jpg" alt="Vector" width="300" height="294" srcset="/wp-content/uploads/2017/01/Vector-300x294.jpg 300w, /wp-content/uploads/2017/01/Vector.jpg 463w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Vectors encode much geometric information algebraically. The initial point is always the origin within our algebraic context (<a href="https://www.quora.com/What-is-Euclidean-space-and-how-is-it-related-to-a-vector-space-in-layman-terms" target="_blank" rel="noopener noreferrer">source</a>)</p></div>
<p>Now we get to the new, and fun, elements of geometric algebra. A direction vector V in Euclidean space can be used to represent an infinite straight line passing through the origin O parallel to the vector V. By multiplying a scalar with our vector and adding the result to the origin point we can generate any point on this specific line. We can also take any point P on this line and find the vector W = P &#8211; O. Now V and W are <a href="https://en.wikipedia.org/wiki/Linear_independence" target="_blank" rel="noopener noreferrer">linearly dependent</a> because they are just scaled versions of each other. This construction is familiar to most of us, but the following generalization is not. From this kind of construction we can abstract some general properties of a vector:</p>
<ol>
<li>A vector is an algebraic representation of a one-dimensional <a href="https://en.wikipedia.org/wiki/Linear_subspace" target="_blank" rel="noopener noreferrer">subspace</a> of the vector space (the line passing through the origin in our Euclidean space example).</li>
<li>Many vectors can represent the same subspace; just by varying the scalar they are multiplied by we get a new algebraic representation. All these vector representations are linearly dependent.</li>
<li>The main geometric properties of any vector are: its dimension (one), its attitude in space, and the scalar it&#8217;s multiplied with (its geometric length in the special case of Euclidean spaces)</li>
<li>Vectors within the same subspace can be linearly combined to produce other vectors in the same subspace, they can also be compared, by a division, to extract their relative &#8220;lengths&#8221; or associated scalars.</li>
</ol>
<div id="attachment_2393" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/01/blades.jpg"><img class="size-medium wp-image-2393" src="/wp-content/uploads/2017/01/blades-300x233.jpg" alt="Blades" width="300" height="233" srcset="/wp-content/uploads/2017/01/blades-300x233.jpg 300w, /wp-content/uploads/2017/01/blades.jpg 609w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">The outer product of k linearly independent vectors is called a k-blade</p></div>
<p>These 4 properties can be generalized to subspaces of higher dimension (2, 3, etc.) within the larger vector space. We can use new algebraic operation called the <strong>Outer Product</strong>, or the <a href="https://en.wikipedia.org/wiki/Exterior_algebra" target="_blank" rel="noopener noreferrer"><strong>Exterior Product</strong></a>. Using the outer product of several vectors we get a new algebraic concept called the <a href="https://en.wikipedia.org/wiki/Blade_(geometry)" target="_blank" rel="noopener noreferrer"><strong>Blade</strong></a>. Blades come in grades depending on how many <a href="https://en.wikipedia.org/wiki/Linear_independence" target="_blank" rel="noopener noreferrer">Linearly Independent</a> (LID) vectors are multiplied using the outer product. We then have 0-Blades (simple scalars or numbers), 1-Blades (vectors), 2-Blades (<a href="https://en.wikipedia.org/wiki/Bivector" target="_blank" rel="noopener noreferrer">bivectors</a> or the outer product of two LID vectors), 3-Blades (trivectors), etc.</p>
<p>The general characteristics of blades follow a generalization of vectors with an additional structure provided by the outer product:</p>
<ol>
<li>A blade is an algebraic representation of a k-dimensional <a href="https://en.wikipedia.org/wiki/Linear_subspace" target="_blank" rel="noopener noreferrer">subspace</a> of the vector space (the line, plane, volume, hyperplane passing through the origin in our Euclidean space example). Any vector having zero outer product with a blade is inside its subspace. This is called the <strong>Outer Product Null Space (OPNS)</strong> representation of subspaces.</li>
<li>Many k-blades can represent the same k-dimensional subspace; just by varying the scalar they are multiplied by we get a new algebraic representation. All these blade representations are linearly dependent.</li>
<li>The main geometric properties of any k-blade are: its dimension (k), its attitude in space, and the scalar it&#8217;s multiplied with (its geometric length, area, volume, etc. in the special case of Euclidean spaces).</li>
<li>Blades representing the same subspace can be linearly combined to produce other blades <sup class='endnote'><a href='#en-2285-8' id='enref-2285-8' onclick='return hhEndnotes_show(2285)'>8</a></sup> in the same subspace, they can also be compared, by a division, to extract their relative &#8220;weights&#8221; or associated scalars.</li>
</ol>
<p>Many of the <a href="https://en.wikipedia.org/wiki/Comparison_of_vector_algebra_and_geometric_algebra" target="_blank" rel="noopener noreferrer">algebraic and geometric operations</a> we are used to doing with vectors and numbers can be done more elegantly using blades. The most important benefit of using blades and the outer product is to algebraically capture the concept of linear independence. To find if a vector belongs to some subspace using classical matrix-based linear algebra, we need to <a href="https://en.wikipedia.org/wiki/Linear_independence#Evaluating_linear_independence" target="_blank" rel="noopener noreferrer">solve a set of linear equations</a>, This is essentially a complex algorithmic procedure, not a simple abstract algebraic operation that can be combined with other algebraic operations. Using a blade that represents our subspace, we can simply take the outer product with any vector and if the result is zero the vector belongs to the subspace. The more we reduce the need for &#8220;matrix manipulation algorithms&#8221; and use basic symbolic algebra instead, the more clear and unified our mathematical models become.</p>
<h3><strong>6. The Contraction</strong></h3>
<div id="attachment_2398" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/01/Orthogonalization.png"><img class="size-medium wp-image-2398" src="/wp-content/uploads/2017/01/Orthogonalization-300x150.png" alt="Orthogonalization" width="300" height="150" srcset="/wp-content/uploads/2017/01/Orthogonalization-300x150.png 300w, /wp-content/uploads/2017/01/Orthogonalization.png 343w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">The first two steps of the Gram–Schmidt process for orthogonalizing two vectors depend on the inner product (<a href="https://en.wikipedia.org/wiki/Gram%E2%80%93Schmidt_process" target="_blank" rel="noopener noreferrer">source</a>)</p></div>
<p>Vectors belonging to different 1-D subspaces in the Euclidean space can be compared and manipulated in several ways:</p>
<ul>
<li>We can find the &#8220;length&#8221; of a vector using its inner product with itself.</li>
<li>We can find the &#8220;angle&#8221; between two vectors using their inner product and lengths.</li>
<li>We can project a vector on another also using the inner product.</li>
<li>We can convert a set of LID vectors into orthogonal ones also using an algebraic process that depends mostly on the inner product.</li>
</ul>
<p>It seems that the inner product is an essential operation in vector algebra. Extending vectors to blades require comparing and manipulating blades using a similar operation. Many generalizations for the inner product exit with varying algebraic properties and geometric significance.</p>
<div id="attachment_2399" style="width: 239px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/01/Orthogonal-Complement.jpg"><img class="size-medium wp-image-2399" src="/wp-content/uploads/2017/01/Orthogonal-Complement-229x300.jpg" alt="Orthogonal Complement" width="229" height="300" srcset="/wp-content/uploads/2017/01/Orthogonal-Complement-229x300.jpg 229w, /wp-content/uploads/2017/01/Orthogonal-Complement.jpg 288w" sizes="(max-width: 229px) 100vw, 229px" /></a><p class="wp-caption-text">In 3D Euclidean space, the orthogonal complement of a vector is the plane normal to it and vice versa (<a href="https://commons.wikimedia.org/wiki/File:Normal_vectors2.svg" target="_blank" rel="noopener noreferrer">source</a>)</p></div>
<p>The <strong>Left Contraction Product</strong> is one such algebraic generalization defined on blades with strong geometric significance. In Euclidean space, if we have an r-dimensional subspace represented by the r-blade A, and an s-dimensional subspace represented by the s-blade B, and r is less or equal to s, then the contraction of A on B represents a new (s-r)-blade (an (s-r)-dimensional subspace) obtained as follows:</p>
<ol>
<li>Project A&#8217;s subspace on B&#8217;s subspace, assume this gives a subspace represented by a blade P.</li>
<li>Find the <a href="https://en.wikipedia.org/wiki/Orthogonal_complement" target="_blank" rel="noopener noreferrer">orthogonal complement</a> of P&#8217;s subspace within B&#8217;s subspace. This orthogonal complement is represented by blade C computed algebraically from the left contraction of A on B.</li>
</ol>
<p>We can summarize this process saying tat the left contraction of A on B finds the blade orthogonal to A&#8217;s projection within B. This fundamental operation on blades has many important mathematical and geometric properties that can simplify computing with subspaces. Instead of computing with the vectors that span a subspace, using matrix algorithms, we can now directly do all the following operations on subspaces of any dimension without the need for their spanning vectors, and without the need for matrix algebra:</p>
<ul>
<li>Find the &#8220;norm&#8221; (length, area, volume, etc.) of a subspace.</li>
<li>Find the unit blade that represents a subspace.</li>
<li>Find the &#8220;inverse&#8221; of a blade; the same blade divided by its squared norm.</li>
<li>Project a subspace on another subspace.</li>
<li>Find the angle between two same-dimension subspaces (assuming they intersect in a single line).</li>
<li>Test the orthogonality of a vector to a whole subspace.</li>
<li>Find the orthogonal complement of a subspace within a larger subspace.</li>
<li>Generalize the notorious <a href="https://en.wikipedia.org/wiki/Cross_product" target="_blank" rel="noopener noreferrer">cross product</a> to any dimension. The cross product of two vectors in 3D Euclidean space is geometrically equivalent to the orthogonal complement of the plane spanned by the two vectors.</li>
<li>Indirectly represent a subspace with a blade as the set of all vectors having a zero contraction with the blade. This method is called the <strong>Inner Product Null Space (IPNS)</strong> representation of subspaces. We can convert between the IPNS and OPNS using a simple dualization algebraic operation.</li>
</ul>
<p>In summary, using the outer product we create OPNS blades to directly represent subspaces. Using the contraction we convert between the OPNS blade and an IPNS blade representing the same subspace indirectly. Using both operations on blades we get a rich algebra for computing with subspaces of any dimension with any metric. Using the addition operation we can now define linear combinations of blades of different grades to construct <a href="https://en.wikipedia.org/wiki/Multivector" target="_blank" rel="noopener noreferrer"><strong>Multivectors</strong></a>; a powerful and geometrically significant algebraic alternative to matrices and tensors. All linear operations on blades can be extended using linear combinations to act on multivectors. This beautiful mathematical structure is called the <a href="https://link.springer.com/chapter/10.1007%2F978-94-015-8402-9_5" target="_blank" rel="noopener noreferrer">Grassmann-Cayley Algebra</a> and is used extensively to study <a href="https://en.wikipedia.org/wiki/Projective_geometry" target="_blank" rel="noopener noreferrer">projective geometry</a>; an important part in the full construction of Geometric Algebra.</p>
<h3>7. Outermorphisms</h3>
<div id="attachment_2405" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/01/Outermorphism.jpg"><img class="size-medium wp-image-2405" src="/wp-content/uploads/2017/01/Outermorphism-300x144.jpg" alt="Outermorphism" width="300" height="144" srcset="/wp-content/uploads/2017/01/Outermorphism-300x144.jpg 300w, /wp-content/uploads/2017/01/Outermorphism-768x368.jpg 768w, /wp-content/uploads/2017/01/Outermorphism-1024x491.jpg 1024w, /wp-content/uploads/2017/01/Outermorphism.jpg 1061w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Mathematical definition of the outermorphism</p></div>
<p>As we generalized the metric, the inner product, to act on blades, we now generalize linear transforms on vectors to act on blades. An <a href="https://en.wikipedia.org/wiki/Outermorphism" target="_blank" rel="noopener noreferrer"><strong>Outermorphism</strong></a> is a simple extension of a linear transform with many fascinating properties and implications:</p>
<ol>
<li>First, we begin with an abstract definition of a <a href="https://en.wikipedia.org/wiki/Linear_map" target="_blank" rel="noopener noreferrer">linear mapping</a> f(.) between two vector spaces defined on the same scalar field. If the two vector spaces are the same, this mapping is called a linear operator or linear <a href="https://en.wikipedia.org/wiki/Endomorphism" target="_blank" rel="noopener noreferrer">endomorphism</a>. We may or may not use a matrix to define the linear mapping.</li>
<li>Next, we extend the effect of the linear map to scalars by simply defining f(x) = x for all scalars x.</li>
<li>Finally, we extend the linear map to act on blades by making it invariant to the outer product. Meaning that the transform of the outer product of some vectors equals the outer product of the transforms of the vectors.</li>
</ol>
<p>Using this simple algebraic extension we can apply any linear transform to blades and multivectors. We can symbolically study in a coordinate-free manner the effects of linear transforms on subspaces, not just single vectors. We can numerically compute the outermorphisms of blades using sparse matrices. This can be very useful in many <a href="https://en.wikipedia.org/wiki/Numerical_linear_algebra" target="_blank" rel="noopener noreferrer">numerical linear algebra</a> algorithms and certainly deserves much more attention than is currently given.</p>
<div id="attachment_2409" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/01/Determinants.png"><img class="size-medium wp-image-2409" src="/wp-content/uploads/2017/01/Determinants-300x253.png" alt="Determinants" width="300" height="253" srcset="/wp-content/uploads/2017/01/Determinants-300x253.png 300w, /wp-content/uploads/2017/01/Determinants.png 570w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Using outermorphisms, we can study the properties of determinants with clear geometric meaning (<a href="https://commons.wikimedia.org/wiki/File:Determinant_parallelepiped.svg#/media/File:Determinant_parallelepiped.svg" target="_blank" rel="noopener noreferrer">source</a>)</p></div>
<p>Using outermorphisms, many abstract concepts related to linear mappings are much easier to express and understand:</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Determinant" target="_blank" rel="noopener noreferrer"><strong>Determinants</strong></a> are classically associated with square matrices, but they are actually more related to linear operators. For a linear operator, its determinant is the ratio of the effect of the linear operator on the space <a href="https://en.wikipedia.org/wiki/Classification_of_Clifford_algebras#Unit_pseudoscalar" target="_blank" rel="noopener noreferrer">Pseudo-scalar blade</a> relative to the Pseudo-scalar blade itself.  The whole theory of determinants can be derived from outermorphisms much more elegantly and clearly without any use of matrices or coordinates.</li>
<li>The <strong><a href="https://en.wikipedia.org/wiki/Adjugate_matrix" target="_blank" rel="noopener noreferrer">adjoint linear operator</a></strong> is also classically associated with square matrices while being a more abstract and fundamental concept of linear operators. Outermorphisms also represent adjoint operators in a more natural way both symbolically and numerically.</li>
<li>We can study many properties of the <strong>inverse of a linear operator</strong> using outermorpisms. We find, for example, that to apply the inverse operator to an IPNS blade we need a different algebraic treatment <sup class='endnote'><a href='#en-2285-9' id='enref-2285-9' onclick='return hhEndnotes_show(2285)'>9</a></sup> than that in the case of an OPNS blade to get geometrically consistent results.</li>
<li>We can use outermorphisms to represent a very important class of linear operators: the <strong>Orthogonal Transformations</strong> that preserve the metric of the vector space <sup class='endnote'><a href='#en-2285-10' id='enref-2285-10' onclick='return hhEndnotes_show(2285)'>10</a></sup>. Orthogonal transformations are typically represented using <a href="https://en.wikipedia.org/wiki/Orthogonal_matrix" target="_blank" rel="noopener noreferrer">orthogonal matrices</a>, but outermorphisms provide many useful and geometrically significant insights about their abstract coordinate-free properties.</li>
</ul>
<p>With outermorphisms we have all the mathematical structure of Linear Transforms generalized to subspaces of any dimension. With the Outer Product, Contraction, and Outermorphisms we have a large toolset for computing with subspaces without the need for subspace decomposition or depending on matrices and coordinates.</p>
<h3>8. The Geometric Product</h3>
<div id="attachment_2422" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/01/Versor.jpg"><img class="size-medium wp-image-2422" src="/wp-content/uploads/2017/01/Versor-300x185.jpg" alt="Vector Reflection" width="300" height="185" srcset="/wp-content/uploads/2017/01/Versor-300x185.jpg 300w, /wp-content/uploads/2017/01/Versor.jpg 526w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">The reflection of a vector &#8220;x&#8221; in a direct vector &#8220;a&#8221; or its orthogonal hyperplane &#8220;A&#8221; can be simply expressed using the geometric product</p></div>
<p>The final algebraic ingredient of the fascinating GA mathematical structure is the <a href="https://en.wikipedia.org/wiki/Geometric_algebra" target="_blank" rel="noopener noreferrer"><strong>Geometric Product</strong></a>. The geometric product is the most general bilinear product in GA between arbitrary multivectors. The outer product, contraction, and all other bilinear products are special cases of the geometric product and can, in fact, be defined based on the geometric product alone. The full algebraic structure of GA can be <a href="http://vixra.org/abs/1306.0178" target="_blank" rel="noopener noreferrer">stated axiomatically</a> based on the geometric product and addition operations without using the other products. Personally, I don&#8217;t like this pure mathematics approach because it delays the geometric significance to a later stage. For so many years, <a href="https://en.wikipedia.org/wiki/Clifford_algebra" target="_blank" rel="noopener noreferrer"><strong>Clifford Algebra</strong></a> was treated just like any other algebra in pure mathematics, and the powerful geometrically significant structure we are talking about here was hidden behind the cold symbols and pure algebraic relations.</p>
<p>One important tool the geometric product provides is the ability to reflect a vector c in another vector n directly, or in the hyperplane n indirectly represents. This seemingly simple but very useful algebraic tool opens the door for the powerful versor representation for orthogonal linear operators we will talk about in the next section.</p>
<h3>9. Versors</h3>
<div id="attachment_2241" style="width: 270px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/01/Versor_action_on_Hurwitz_quaternions.jpg"><img class="size-medium wp-image-2241" src="/wp-content/uploads/2017/01/Versor_action_on_Hurwitz_quaternions-260x300.jpg" alt="Versor action on Hurwitz quaternions" width="260" height="300" srcset="/wp-content/uploads/2017/01/Versor_action_on_Hurwitz_quaternions-260x300.jpg 260w, /wp-content/uploads/2017/01/Versor_action_on_Hurwitz_quaternions-768x885.jpg 768w, /wp-content/uploads/2017/01/Versor_action_on_Hurwitz_quaternions-888x1024.jpg 888w, /wp-content/uploads/2017/01/Versor_action_on_Hurwitz_quaternions.jpg 948w" sizes="(max-width: 260px) 100vw, 260px" /></a><p class="wp-caption-text">Versors represent Orthogonal Transformations in GA spaces (<a href="https://commons.wikimedia.org/wiki/File:Versor_action_on_Hurwitz_quaternions.svg" target="_blank" rel="noopener noreferrer">source</a>)</p></div>
<p>Versors constitute a very useful class of multivectors. A versor is the geometric product of several vectors, each having a non-zero inner product with itself. If the vectors are also orthogonal, the versor is actually a blade. Because of this, every versor has an inverse with respect to the geometric product. The geometric significance of these algebraic properties can be found by reading an important result of the</p>
<p>The geometric significance of these algebraic properties can be found by reading an important result of the <a href="https://link.springer.com/chapter/10.1007%2F978-1-4613-0137-0_7" target="_blank" rel="noopener noreferrer"><strong>Cartan–Dieudonné theorem</strong></a>:</p>
<blockquote><p>Any Orthogonal Transformation is a composition of a series of reflections in homogeneous hyperplanes.</p></blockquote>
<p>This theorem is the base of the <a href="https://en.wikipedia.org/wiki/Householder_transformation" target="_blank" rel="noopener noreferrer">Householder matrices</a> in classical linear algebra for example. Because we can express reflections in hyperplanes using a simple geometric product of vectors, any orthogonal transformation in our GA can be expressed as a series of geometric products with vectors. This important algebraic tool is called the <strong>Versor Product</strong>.</p>
<div id="attachment_2424" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/01/Rotor.jpg"><img class="size-medium wp-image-2424" src="/wp-content/uploads/2017/01/Rotor-300x234.jpg" alt="Rotor" width="300" height="234" srcset="/wp-content/uploads/2017/01/Rotor-300x234.jpg 300w, /wp-content/uploads/2017/01/Rotor.jpg 566w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">A rotor is a versor composed of two reflections</p></div>
<p>Special kinds of versors exist having important practical applications. For example, a <a href="https://en.wikipedia.org/wiki/Rotor_(mathematics)" target="_blank" rel="noopener noreferrer"><strong>rotor</strong></a> in Euclidean GA is the geometric product of two unit vectors that is algebraically isomorphic to <a href="https://en.wikipedia.org/wiki/Complex_number" target="_blank" rel="noopener noreferrer">complex numbers</a> (in the 2D GA case) or to <a href="https://en.wikipedia.org/wiki/Quaternion" target="_blank" rel="noopener noreferrer">quaternions</a> (in the 3D GA case). Rotors are very useful and efficient tools for applying rotations to arbitrary subspaces with many properties better than <a href="https://en.wikipedia.org/wiki/Rotation_matrix" target="_blank" rel="noopener noreferrer">rotation matrices</a> and <a href="https://en.wikipedia.org/wiki/Rotation_formalisms_in_three_dimensions" target="_blank" rel="noopener noreferrer">other related representations</a>.</p>
<p>In fact, using the versor product all <a href="https://en.wikipedia.org/wiki/Isometry" target="_blank" rel="noopener noreferrer">isometries</a> of the base vector space can be algebraically represented using multivectors. In this way, multivectors represent both <strong>Geometric States</strong> (subspaces as blades) and metric-preserving <strong>Geometric Actions</strong> (orthogonal transforms as versors). We now have a very powerful, compact, and geometrically significant algebra ready for our final step: ascending to higher dimensions.</p>
<h3>10. GA Space Embedding</h3>
<blockquote><p>Thus, in a sense, mathematics has been most advanced by those who distinguished themselves by intuition rather than by rigorous proofs. &#8212; Felix Klein</p></blockquote>
<div id="attachment_2434" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/01/Homogeneous-Coordinates.jpg"><img class="size-medium wp-image-2434" src="/wp-content/uploads/2017/01/Homogeneous-Coordinates-300x274.jpg" alt="Homogeneous Coordinates" width="300" height="274" srcset="/wp-content/uploads/2017/01/Homogeneous-Coordinates-300x274.jpg 300w, /wp-content/uploads/2017/01/Homogeneous-Coordinates.jpg 604w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Going one more dimension we can represent points in 2D Euclidean space using linear vectors of 3D projective space (<a href="https://en.wikipedia.org/wiki/Homogeneous_coordinates#/media/File:RationalBezier2D.svg" target="_blank" rel="noopener noreferrer">source</a>)</p></div>
<p>The previous 9 elements of GA construct a set of algebraic tools to conceptually escape into higher dimensions. To understand the significance of this process, we can study a simpler example having a great practical impact in computer science and engineering: <a href="https://en.wikipedia.org/wiki/Homogeneous_coordinates" target="_blank" rel="noopener noreferrer"><strong>Homogeneous Coordinates</strong></a> and the related <strong><a href="https://link.springer.com/chapter/10.1007/978-90-481-3776-3_2" target="_blank" rel="noopener noreferrer">Homogeneous Transformation Matrices</a></strong>.</p>
<p>In Euclidean space, simple geometric concepts like points, general lines, and planes can&#8217;t be mathematically represented as elements of a linear vector space; they simply don&#8217;t satisfy the abstract axioms of vector spaces. In 1827, <a href="https://en.wikipedia.org/wiki/August_Ferdinand_M%C3%B6bius" target="_blank" rel="noopener noreferrer">August Ferdinand Möbius</a> introduced homogeneous coordinates, or projective coordinates, to solve this problem. By <a href="https://en.wikipedia.org/wiki/Embedding" target="_blank" rel="noopener noreferrer"><strong>embedding</strong></a> our Euclidean space into a one-dimension-higher <a href="https://en.wikipedia.org/wiki/Projective_space" target="_blank" rel="noopener noreferrer">projective space</a>, we could easily model additional geometric concepts as finite projective vectors like directions, points, points at infinity, and weighted points. This algebraic tool has greatly impacted many applications in engineering and computer science including robotics, computer graphics, computer vision, computer-aided design, and more.</p>
<div id="attachment_2437" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/01/Sphere-Inversion.jpg"><img class="size-medium wp-image-2437" src="/wp-content/uploads/2017/01/Sphere-Inversion-300x250.jpg" alt="Sphere Inversion" width="300" height="250" srcset="/wp-content/uploads/2017/01/Sphere-Inversion-300x250.jpg 300w, /wp-content/uploads/2017/01/Sphere-Inversion.jpg 415w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Stereographic projection as an inversion of a sphere (<a href="https://en.wikipedia.org/wiki/Inversive_geometry#/media/File:Inv-stereogr-proj.svg" target="_blank" rel="noopener noreferrer">source</a>)</p></div>
<p>Using the powerful algebraic elements of Geometric Algebra we can exploit the idea of embedding a space inside a larger space to its fullest. Many geometric concepts can be &#8220;algebraically linearized&#8221; this way; meaning they can be completely represented using multivectors, instead of the commonly used <a href="https://graphics.stanford.edu/courses/cs368-05-spring/handouts/basic.pdf" target="_blank" rel="noopener noreferrer">combinatorial geometric representations</a>. This transition in representation can have profound conceptual and computational effects on many important areas like <a href="https://en.wikipedia.org/wiki/Discrete_geometry" target="_blank" rel="noopener noreferrer">computational and discrete geometry</a>, for example. To get an idea about such geometric concepts, here is a list of some geometric states (objects) and actions (transformations) that can be represented by multivectors (GA blades and versors) in the 5D <a href="https://slehar.wordpress.com/2014/07/24/geometric-algebra-conformal-geometry/" target="_blank" rel="noopener noreferrer">Conformal Geometric Algebra</a> (CGA). The <a href="https://en.wikipedia.org/wiki/Conformal_geometric_algebra" target="_blank" rel="noopener noreferrer">5D CGA</a> is the result of embedding our 3D Euclidean space into a 2-dimensions larger conformal space having a Minkowski metric:</p>
<ul>
<li><strong>Round and Flat Geometric Primitives:</strong> Spheres and Planes in general positions in space &#8211; General Circles and Lines &#8211; Point Pairs resulting from intersecting a line and a sphere, for example &#8211; Points as zero-radius spheres. We can even have rounds with imaginary radius and lines and points at infinity useful for many intermediate geometric computations.</li>
<li><strong>Tangent Geometric Primitives:</strong></li>
<li><strong>Similarity Transformations:</strong> Rotations, Translations, Uniform Scaling, Reflection in arbitrary Planes, and their compositions including <strong><a href="http://www.euclideanspace.com/maths/algebra/clifford/geometry/transforms/motors/index.htm" target="_blank" rel="noopener noreferrer">Motors</a></strong> used extensively in representing <a href="https://en.wikipedia.org/wiki/Screw_theory" target="_blank" rel="noopener noreferrer">Screw Motions</a>.</li>
<li><strong>Special Kinds of Conformal Transformations:</strong> Most notably, reflections in spheres that can be composed into many useful transformations used, for example, to study <a href="https://en.wikipedia.org/wiki/Inversive_geometry" target="_blank" rel="noopener noreferrer">Inversive Geometry</a>.</li>
</ul>
<p>All these geometric concepts and their <a href="https://en.wikipedia.org/wiki/Incidence_geometry" target="_blank" rel="noopener noreferrer"><strong>incidence relations</strong></a> can be represented and studied with GA&#8217;s linear multivectors without any use of matrices, just by adding two more dimensions with a Minkowski metric to our 3D Euclidean space. Many more higher-dimension GA embeddings are currently studied <sup class='endnote'><a href='#en-2285-11' id='enref-2285-11' onclick='return hhEndnotes_show(2285)'>11</a></sup> that can add more complex geometric objects and transformations to our list of typical geometric primitives. We are just at the beginning of a great journey of fascinating geometric explorations.</p>
<p><img class="alignright size-full wp-image-2442" src="/wp-content/uploads/2017/01/done8.png" alt="" width="371" height="40" srcset="/wp-content/uploads/2017/01/done8.png 371w, /wp-content/uploads/2017/01/done8-300x32.png 300w" sizes="(max-width: 371px) 100vw, 371px" /></p>
<p>&nbsp;</p>
<div class='endnotes' id='hhendnotes-2285'>
<ol>
<li id='en-2285-1'>There is a very important 11th element of Multivector Differentiation that leads to <a href="https://en.wikipedia.org/wiki/Geometric_calculus" target="_blank" rel="noopener noreferrer">Geometric Calculus</a>, I&#8217;m still trying to study this element, though. See <a href="https://arxiv.org/abs/1306.2278" target="_blank" rel="noopener noreferrer">this paper</a> for a good introduction. <span class='endnotereverse'><a href='#enref-2285-1'>&#8617;</a></span></li>
<li id='en-2285-2'>See &#8220;<a href="https://arxiv.org/abs/1509.00501" target="_blank" rel="noopener noreferrer">The vector algebra war: a historical perspective</a>&#8221; <span class='endnotereverse'><a href='#enref-2285-2'>&#8617;</a></span></li>
<li id='en-2285-3'>See for example Raymond O. Wells Jr&#8217;s paper &#8220;<a href="https://arxiv.org/abs/1301.0643" target="_blank" rel="noopener noreferrer">Key developments in geometry in the 19th Century</a>&#8221; and Jeremy Gray&#8217;s book &#8220;<a href="https://link.springer.com/book/10.1007/978-0-85729-060-1" target="_blank" rel="noopener noreferrer">Worlds Out of Nothing &#8211; A Course in the History of Geometry in the 19th Century</a>&#8221; <span class='endnotereverse'><a href='#enref-2285-3'>&#8617;</a></span></li>
<li id='en-2285-4'>For example, many trigonometric identities and relations can be found <a href="https://en.wikipedia.org/wiki/List_of_trigonometric_identities">here</a>, and analytic geometry definitions and formulas <a href="https://en.wikipedia.org/wiki/Conic_section">here</a> and <a href="http://www.mathportal.org/formulas/analytic_geometry_formulas.pdf">here</a> <span class='endnotereverse'><a href='#enref-2285-4'>&#8617;</a></span></li>
<li id='en-2285-5'>See for example Sheldon Axler&#8217;s book: &#8220;<a href="https://www.amazon.com/Linear-Algebra-Right-Undergraduate-Mathematics/dp/0387982582" target="_blank" rel="noopener noreferrer">Linear Algebra Done Right</a>&#8221; <span class='endnotereverse'><a href='#enref-2285-5'>&#8617;</a></span></li>
<li id='en-2285-6'>See for example Carl D. Meyer&#8217;s book &#8220;<a href="https://www.amazon.com/Matrix-analysis-applied-linear-algebra/dp/0898714540/ref=la_B001HPYZR6_1_1?s=books&amp;ie=UTF8&amp;qid=1484915394&amp;sr=1-1" target="_blank" rel="noopener noreferrer">Matrix analysis and applied linear algebra</a>&#8221; <span class='endnotereverse'><a href='#enref-2285-6'>&#8617;</a></span></li>
<li id='en-2285-7'>See <a href="https://nrich.maths.org/2487" target="_blank" rel="noopener noreferrer">this article</a> about &#8220;The Development of Spatial and Geometric Thinking&#8221; and <a href="http://www.learner.org/courses/learningmath/geometry/pdfs/session9/vand.pdf" target="_blank" rel="noopener noreferrer">this chapter</a> about &#8220;Geometric Thinking and Geometric Concepts&#8221; <span class='endnotereverse'><a href='#enref-2285-7'>&#8617;</a></span></li>
<li id='en-2285-8'>To be accurate, a general linear combination of k-blades is not guaranteed to algebraically produce another k-blade, the set of all k-blades of some space is not a vector space by itself, a more general algebraic concept is the k-vector. The set of all k-vectors is, algebraically, a vector space that k-blades are some of its &#8220;linear&#8221; members. <span class='endnotereverse'><a href='#enref-2285-8'>&#8617;</a></span></li>
<li id='en-2285-9'>Namely to use the inverse adjoint outermorphism rather than the original outermorphism itself. This is similar to <a href="https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/transforming-normals" target="_blank" rel="noopener noreferrer">transforming normal vectors</a> with homogenous matrices where we need to use the inverse transpose matrix rather than the original matrix. <span class='endnotereverse'><a href='#enref-2285-9'>&#8617;</a></span></li>
<li id='en-2285-10'>If V(.) is an orthogonal operator then its outermorphism is invariant with respect to both the outer product and the contraction. This has many significant implications for Geometric Algebra as we will see when talking about versors shortly. <span class='endnotereverse'><a href='#enref-2285-10'>&#8617;</a></span></li>
<li id='en-2285-11'>See for example these papers <a href="https://link.springer.com/article/10.1007/s00006-016-0731-5" target="_blank" rel="noopener noreferrer">here</a>, <a href="https://link.springer.com/article/10.1007/s00006-016-0647-0" target="_blank" rel="noopener noreferrer">here</a>, <a href="https://link.springer.com/article/10.1007/s00006-015-0625-y" target="_blank" rel="noopener noreferrer">here</a>, and <a href="https://link.springer.com/article/10.1007/s13366-014-0218-2" target="_blank" rel="noopener noreferrer">here</a>. <span class='endnotereverse'><a href='#enref-2285-11'>&#8617;</a></span></li>
</ol>
</div>
<p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=%2Findex.php%2F2017%2F01%2F28%2Fga-elements%2F&amp;linkname=Elements%20of%20Geometric%20Algebra" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=%2Findex.php%2F2017%2F01%2F28%2Fga-elements%2F&amp;linkname=Elements%20of%20Geometric%20Algebra" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=%2Findex.php%2F2017%2F01%2F28%2Fga-elements%2F&amp;linkname=Elements%20of%20Geometric%20Algebra" title="Google+" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save" href="https://www.addtoany.com/share#url=%2Findex.php%2F2017%2F01%2F28%2Fga-elements%2F&amp;title=Elements%20of%20Geometric%20Algebra" data-a2a-url="/index.php/2017/01/28/ga-elements/" data-a2a-title="Elements of Geometric Algebra"></a></p><p>The post <a rel="nofollow" href="/index.php/2017/01/28/ga-elements/">Elements of Geometric Algebra</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Cybernetics with Transdisciplinary Geometric Algebra</title>
		<link>/index.php/2017/01/27/ga-cybernetics/</link>
		<pubDate>Fri, 27 Jan 2017 13:23:10 +0000</pubDate>
		<dc:creator><![CDATA[Ahmad Eid]]></dc:creator>
				<category><![CDATA[GA Applications]]></category>
		<category><![CDATA[Geometric Algebra]]></category>
		<category><![CDATA[Interview]]></category>
		<category><![CDATA[Computer Vision]]></category>
		<category><![CDATA[Control]]></category>
		<category><![CDATA[Cybernetics]]></category>
		<category><![CDATA[Geometric Computing]]></category>
		<category><![CDATA[Geometry]]></category>
		<category><![CDATA[Lie Groups]]></category>
		<category><![CDATA[Neural Computing]]></category>
		<category><![CDATA[Projective Geometry]]></category>
		<category><![CDATA[Robotics]]></category>

		<guid isPermaLink="false">https://gacomputing.info/?p=2369</guid>
		<description><![CDATA[<p>Hard sciences are successful because they deal with the soft problems; soft sciences are struggling because they deal with the hard problems. &#8212; Heinz von Foerster Cyberneticist, or cybernetician, is a person practicing Cybernetics: a&#46;&#46;&#46;</p>
<p>The post <a rel="nofollow" href="/index.php/2017/01/27/ga-cybernetics/">Cybernetics with Transdisciplinary Geometric Algebra</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2017/01/Cybernetics.jpg"><img class="aligncenter size-large wp-image-2372" src="/wp-content/uploads/2017/01/Cybernetics-1024x680.jpg" alt="Cybernetics" width="1024" height="680" srcset="/wp-content/uploads/2017/01/Cybernetics-1024x680.jpg 1024w, /wp-content/uploads/2017/01/Cybernetics-300x199.jpg 300w, /wp-content/uploads/2017/01/Cybernetics-768x510.jpg 768w, /wp-content/uploads/2017/01/Cybernetics.jpg 1280w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p>
<blockquote><p>Hard sciences are successful because they deal with the soft problems; soft sciences are struggling because they deal with the hard problems. &#8212; Heinz von Foerster</p></blockquote>
<p><span class="dropcap">A</span> Cyberneticist, or cybernetician, is a person practicing <a href="https://en.wikipedia.org/wiki/Cybernetics" target="_blank">Cybernetics</a>: a transdisciplinary approach for exploring regulatory systems; their structures, constraints, and possibilities. Professor Eduardo Bayro-Corrochano is one such leading academic who uses Geometric Algebra to handle the diverse fields of theoretical knowledge and practical application he needs. Such fields include Robotics, Neural Computing, Computer Vision, and Lie Algebras. In this post, I interview Prof. Eduardo Bayro who tells us about how using GA in his work can simplify dealing with such diverse fields, and how can GA relate, generalize, and unify ideas from these fields together in his mind and the minds of his students.</p>
<hr />
<p><a href="/wp-content/uploads/2017/01/Prof.-Eduardo-Bayro.jpg"><img class="alignright size-medium wp-image-2380" src="/wp-content/uploads/2017/01/Prof.-Eduardo-Bayro-180x300.jpg" alt="Prof. Eduardo Bayro" width="180" height="300" srcset="/wp-content/uploads/2017/01/Prof.-Eduardo-Bayro-180x300.jpg 180w, /wp-content/uploads/2017/01/Prof.-Eduardo-Bayro.jpg 409w" sizes="(max-width: 180px) 100vw, 180px" /></a>Professor Eduardo Bayro started working on the applications of GA in the late 1990’s. His work is to stress the application of GA in cybernetics which typically involves Robotics, Neural Computing, Computer Vision, and Lie Algebras. Using GA-based geometric computing he tackled problems related to the building of intelligent machines, particularly Humanoids, to formulate algorithms for dealing with computer graphics curves, spheres, hyperplanes, and simple geometric tasks. Another goal is to build intelligent machines with real devices using geometric control, geometric perception and even quaternion wavelet transform, quaternion spike, or quantum quaternion neurons. Currently, he is preparing a new book series of 3 volumes on these topics. He is laying out the theory of future geometric intelligent robots and machines with powerful FPGA and Nvidia geometric accelerators.</p>
<hr />
<p><span style="color: #003366;"><strong>Tell us about the benefits of using Geometric Algebra in Geometric Computing applications.  </strong></span></p>
<p>Geometric Algebra (GA) is a powerful geometric language for the modeling of the physics of systems. It is a highly intuitive language and provides many algebraic tools very useful to tackle complex equation manipulations. GA allows economical representations of transformations due to the GA multivector representation as opposite to analytic geometry or vector calculus. GA-based representations avoid redundant parameters and elegantly encapsulate the geometry of the problem. As a result due to its economical representations, GA is a well-suited framework for the development of real-time computations.</p>
<p>&nbsp;</p>
<p><span style="color: #003366;"><strong>How can using GA simplify dealing with the diverse fields of interdisciplinary applications you are working on? What about its range of applicability?</strong></span></p>
<p><a href="/wp-content/uploads/2017/01/normal_ams_borro.jpg"><img class="alignright size-medium wp-image-2386" src="/wp-content/uploads/2017/01/normal_ams_borro-257x300.jpg" alt="Non-Euclidean Geometry" width="257" height="300" srcset="/wp-content/uploads/2017/01/normal_ams_borro-257x300.jpg 257w, /wp-content/uploads/2017/01/normal_ams_borro.jpg 400w" sizes="(max-width: 257px) 100vw, 257px" /></a>GA achieves the unification of many domains like multilinear algebra, multivariable analysis, conformal geometry, Lie group and Lie algebras, projective geometry, quantum mechanics and general relativity. GA allows:</p>
<ul>
<li>Extending and completing algebraic operations on vectors and multi-vectors.</li>
<li>Providing unified concepts for geometry and algebra.</li>
<li>Providing explicit interpretation of geometric entities and operations on them in arbitrary dimensions with Euclidean and pseudo-Euclidean metrics.</li>
<li>Acting as an advanced formalism for rotations and in general Lie groups in arbitrary dimensions.</li>
<li>Acting as a metalanguage for high-level reasoning.</li>
</ul>
<p>Because of these features, Geometric Algebra has a wide range of applications: graphics engineering, signal and image processing, computer vision, neural networks and quantum computing, machine learning, and robotics.</p>
<p>&nbsp;</p>
<p><span style="color: #003366;"><strong>Tell us about the recent developments of applying GA in your research activities.</strong></span></p>
<p><a href="/wp-content/uploads/2017/01/jetson-tk1.png"><img class="alignright size-medium wp-image-2382" src="/wp-content/uploads/2017/01/jetson-tk1-300x171.png" alt="jetson-tk1" width="300" height="171" srcset="/wp-content/uploads/2017/01/jetson-tk1-300x171.png 300w, /wp-content/uploads/2017/01/jetson-tk1.png 350w" sizes="(max-width: 300px) 100vw, 300px" /></a>Recent achievements in geometric accelerators using packets like Versor (P. Colapinto) or Gaalop (Geometric Algebra Algorithms Optimizer, D. Hildenbrand) allow us with FPGA or NVidia to accelerate computations even more. In my lab, we develop and build intelligent machines like in medical robotics or humanoids. The development of GA algorithms follows: algorithmic modeling, using our own C++ programs or Versor, then simply the algorithms with Maple or Gaalop and accelerate them with either FPFGA or Nvidia. The results are quite impressive for real time applications and the visualization of computing in higher dimensions which in turn helps us to gain insight and achieve correctness in the prove of theorems and improve the performance of our algorithms. We are working now to develop in the next 3 years a single small chip for geometric computing using GA with a power superior as the <a href="http://www.nvidia.com/object/jetson-tk1-embedded-dev-kit.html" target="_blank">Jetson TK1 Nvidia</a> card.</p>
<p>&nbsp;</p>
<p><span style="color: #003366;"><strong>In your opinion, are there any relations between Neural Learning and Geometric Learning? How do you use GA as a tool for exploring such relations?</strong></span></p>
<p><a href="/wp-content/uploads/2017/01/neurons-1739997_640.jpg"><img class="alignright size-medium wp-image-2383" src="/wp-content/uploads/2017/01/neurons-1739997_640-300x214.jpg" alt="Neurons" width="300" height="214" srcset="/wp-content/uploads/2017/01/neurons-1739997_640-300x214.jpg 300w, /wp-content/uploads/2017/01/neurons-1739997_640.jpg 640w" sizes="(max-width: 300px) 100vw, 300px" /></a>The tricky question is what should be a true geometric learning? We started by generalizing the McCulloch-Pitts neuron replacing its inner product via the geometric product, so the neural network weights are then multivectors and the learning rules are formulated using the gradient of multivectors as well. Our networks for classification via their kernels map the data using multivectors to a direct product of Hilbert spaces to separate multivector clusters, this helps a lot to find optimal hyperplanes. We have worked on geometric neural computing since 1995, in fact, we have generalized in GA most of the neural networks: i.e. multivector valued [SOM, NeuralGAS, MLP, ART], Clifford SVM and Quaternion Spike neural Network, currently we are developing the quaternion quantum Neural Network. This year we are also focusing on geometric high-order recurrent Neural Networks.</p>
<p>&nbsp;</p>
<p><span style="color: #003366;"><strong>Tell us about your books describing your valuable work and experience with GA, and the new books you are currently preparing.</strong></span></p>
<p><a href="/wp-content/uploads/2017/01/Geometric-Computing-Book.jpg"><img class="alignright size-medium wp-image-2384" src="/wp-content/uploads/2017/01/Geometric-Computing-Book-199x300.jpg" alt="Geometric Computing Book" width="199" height="300" srcset="/wp-content/uploads/2017/01/Geometric-Computing-Book-199x300.jpg 199w, /wp-content/uploads/2017/01/Geometric-Computing-Book.jpg 331w" sizes="(max-width: 199px) 100vw, 199px" /></a>I have been teaching since 1997 using the material of my work which was then published in two books:</p>
<ul>
<li>Geometric Computing for Perception Action Systems. Eduardo Bayro-Corrochano, Springer-Verlag, April 2001.</li>
<li>Geometric Computing: for Wavelet Transforms, Robot Vision, Learning, Control, and Action. Eduardo Bayro-Corrochano, Springer-Verlag, 2010.</li>
</ul>
<p>I am preparing a more comprehensive series in three volumes:</p>
<ul>
<li>Vol. I: GA for computer vision and machine learning,</li>
<li>Vol. II: GA for Robotics,</li>
<li>Vol. III: GA for Signal Processing, Filtering, Transforms and Quantum Computing.</li>
</ul>
<p>These three volumes are based on my first two books, of course, while including new exciting results. My books generally differ from many the current books on GA applications because my books cover computer vision, graphics engineering, neural networks, machine learning, robotics, integral transforms, and ultimately the endeavor of building intelligent machines with GA; they present real applications. The other books are more related to the foundations of GA and its restricted use to the develop algorithms in computer science and its sub-fields like computer graphics. That is why my continuous work during all these years is helping to be able to prepare these new three volumes, which I believe will certainly establish the true geometric computing for the future development of intelligent machines.</p>
<p>&nbsp;</p>
<p><span style="color: #003366;"><strong>Tell us about your practical experience teaching applied Geometric Algebra. How do you overcome the challenges you face while using GA in teaching?</strong></span></p>
<p><a href="/wp-content/uploads/2017/01/robocup-400467_640.jpg"><img class="alignright size-medium wp-image-2387" src="/wp-content/uploads/2017/01/robocup-400467_640-300x198.jpg" alt="Robocup" width="300" height="198" srcset="/wp-content/uploads/2017/01/robocup-400467_640-300x198.jpg 300w, /wp-content/uploads/2017/01/robocup-400467_640.jpg 640w" sizes="(max-width: 300px) 100vw, 300px" /></a>I call for studying and applying GA for future cybernetics in my lectures at different universities in Europe, North America (MIT) and Latin America. I have students with different backgrounds as in physics, mathematics, or engineering; some well prepared for some topics and less for others, so I start as in a fractal approach for conveying knowledge:</p>
<ul>
<li>We study 2D- and 3D-GA to become acquainted with the formulation of the geometric primitives and the use of different Clifford operations.</li>
<li>Then we model the kinematics of points, lines and planes particularly to understand well screw theory and differential kinematics.</li>
<li>Then I explain the basic of differential geometry like the Geometric Laplace-Beltrami Operator for applications in Euclidean and pseudo-Euclidean spaces.</li>
<li>We study in depth Lie Groups and Lie algebras using spinors and versors for Euclidean, Affine, and 2D and 3D projective geometry.</li>
<li>Then I explain projective geometry using Euclidean and Minkowski metrics for the projective plane and spaces and extensions of the projective space in R(3,3).</li>
</ul>
<p>In this manner, the students have learned the most important ingredients to move the Conformal Geometric Algebra and high dimensional geometric algebras like G(6,3) and G(8,2). Thanks to our optimized routines for GA in C++ (with NVidia) and Maple (using the Clifford 14.0 package of R. Ablamowicz), we can prove theorems and develop real-time algorithms for intelligent machines.</p>
<p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=%2Findex.php%2F2017%2F01%2F27%2Fga-cybernetics%2F&amp;linkname=Cybernetics%20with%20Transdisciplinary%20Geometric%20Algebra" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=%2Findex.php%2F2017%2F01%2F27%2Fga-cybernetics%2F&amp;linkname=Cybernetics%20with%20Transdisciplinary%20Geometric%20Algebra" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=%2Findex.php%2F2017%2F01%2F27%2Fga-cybernetics%2F&amp;linkname=Cybernetics%20with%20Transdisciplinary%20Geometric%20Algebra" title="Google+" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save" href="https://www.addtoany.com/share#url=%2Findex.php%2F2017%2F01%2F27%2Fga-cybernetics%2F&amp;title=Cybernetics%20with%20Transdisciplinary%20Geometric%20Algebra" data-a2a-url="/index.php/2017/01/27/ga-cybernetics/" data-a2a-title="Cybernetics with Transdisciplinary Geometric Algebra"></a></p><p>The post <a rel="nofollow" href="/index.php/2017/01/27/ga-cybernetics/">Cybernetics with Transdisciplinary Geometric Algebra</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Geometric Algebra in Computer Science</title>
		<link>/index.php/2017/01/17/ga-computer-science/</link>
		<pubDate>Tue, 17 Jan 2017 20:15:10 +0000</pubDate>
		<dc:creator><![CDATA[Ahmad Eid]]></dc:creator>
				<category><![CDATA[GA Applications]]></category>
		<category><![CDATA[GA Computing]]></category>
		<category><![CDATA[GA Software]]></category>
		<category><![CDATA[Interview]]></category>
		<category><![CDATA[Computer Graphics]]></category>
		<category><![CDATA[Computer Science]]></category>
		<category><![CDATA[Computer Vision]]></category>
		<category><![CDATA[Computing]]></category>
		<category><![CDATA[Geometric Algebra]]></category>
		<category><![CDATA[Neural Computing]]></category>
		<category><![CDATA[Robotics]]></category>
		<category><![CDATA[School]]></category>
		<category><![CDATA[Teaching]]></category>

		<guid isPermaLink="false">http://gacomputing.info/?p=2137</guid>
		<description><![CDATA[<p>&#160; [Computer science] is not really about computers and it&#8217;s not about computers in the same sense that physics is not really about particle accelerators, and biology is not about microscopes and Petri dishes&#8230;&#46;&#46;&#46;</p>
<p>The post <a rel="nofollow" href="/index.php/2017/01/17/ga-computer-science/">Geometric Algebra in Computer Science</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>&nbsp;</p>
<p><a href="/wp-content/uploads/2017/01/Computer-Science.jpg"><img class="aligncenter size-large wp-image-2354" src="/wp-content/uploads/2017/01/Computer-Science-1024x724.jpg" alt="Computer Science" width="1024" height="724" srcset="/wp-content/uploads/2017/01/Computer-Science-1024x724.jpg 1024w, /wp-content/uploads/2017/01/Computer-Science-300x212.jpg 300w, /wp-content/uploads/2017/01/Computer-Science-768x543.jpg 768w, /wp-content/uploads/2017/01/Computer-Science.jpg 1280w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p>
<blockquote><p>[Computer science] is not really about computers and it&#8217;s not about computers in the same sense that physics is not really about particle accelerators, and biology is not about microscopes and Petri dishes&#8230; and geometry isn&#8217;t really about using surveying instruments. &#8212; Hal Abelson</p></blockquote>
<p><span class="dropcap">O</span>ne of the most important fields of application for Geometric algebra can be found in Computer Science. In this post, I interview 3 key researchers who apply Geometric Algebra in their work to share their valuable experience and insights. Their applied research spans many applications in computer science including Computer Graphics, Robotics, Computer Vision, Image Processing, Neural Computing, and more.</p>
<p>&nbsp;</p>
<h3><strong>Dr. Leo Dorst</strong></h3>
<p><span style="color: #003366;"><strong><a href="/wp-content/uploads/2017/01/Dr.-Leo-Dorst.jpg"><img class="alignright size-full wp-image-2355" src="/wp-content/uploads/2017/01/Dr.-Leo-Dorst.jpg" alt="Dr. Leo Dorst" width="200" height="200" srcset="/wp-content/uploads/2017/01/Dr.-Leo-Dorst.jpg 200w, /wp-content/uploads/2017/01/Dr.-Leo-Dorst-150x150.jpg 150w, /wp-content/uploads/2017/01/Dr.-Leo-Dorst-160x160.jpg 160w, /wp-content/uploads/2017/01/Dr.-Leo-Dorst-320x320.jpg 320w" sizes="(max-width: 200px) 100vw, 200px" /></a>Tell us about your primary research and teaching interests. What sort of satisfaction do you get when working on your primary interests?</strong></span></p>
<p>My primary interest is the interplay between geometry and its algebraic representation. It is great fun to derive some equation solving a problem, and then hearing it begin to talk to you about aspects you had never considered in the original formulation. This works most strongly in GA, which is why I love that framework. However, it is hard to find funding for this in abstracto. I am currently tying it into a project on restoring broken archaeological artifacts based on 3D scans (project-gravitate.eu); in a theoretical work package, this pulls in my earlier work on geometric path planning and mathematical morphology and offers an opportunity to study finite elements methods from a GA point of view.</p>
<p>&nbsp;</p>
<p><strong><span style="color: #003366;">What do you think are the main characteristics of GA as a mathematical modeling language?</span></strong></p>
<p>GA clears your mind and your software, even when you decide to stick to LA in practice (at least, in the beginning). The disgusting number of different terms and techniques in LA which are all, in hindsight, ways to avoid using the outer product are a good example. Once you realize that outer product exists, much of the operations described in natural language (like &#8216;span&#8217;) coherently collapse to elementary and compact algebraic operations under your own control. Certainly, in computer science where 3D is just not enough (the spaces involved in machine learning are very high-dimensional), the outer product MUST be taught. And once you have the outer product, you might as well absorb the geometric product for generalized projections and rejections. As for operators, use rotors instead of quaternions, so you have something that is real and that generalizes to n-D.</p>
<p>&nbsp;</p>
<p><span style="color: #003366;"><strong>Tell us about your important book, coauthored with S. Mann and D. Fontijne, &#8220;Geometric Algebra for Computer Science&#8221; (GA4CS). How can the GA community make more books like it to help attract more people to learn and apply GA in their research and teaching?</strong></span></p>
<p>After I just learned GA, I was amazed by the clarity it provides at the computational basis for geometry, and its new elements and operators at an intermediate level of abstraction: it is great to have the very interesting new primitives, especially in CGA (conformal geometric algebra). What can we do more or better once we learn to think in terms of those primitives? I knew I could not develop the consequences for intermediate and high-level algorithms myself &#8212; there is just too much reform to do, in too many fields. So we wrote a book to convey the basic tools and the algebraically supported intuition of their interplay, for others to do that work, each in their own subfield. It has not quite taken off yet in the way I hoped, though there are some examples (such as work by Ishida at Honda on genetic algorithms for road-following using GA primitives and their interactions as the chromosomes and cross-over operations). We need more work at that intermediate level, showing how or when the possibility not to go down to the vector level pays off.</p>
<p>&nbsp;</p>
<p><span style="color: #003366;"><strong>If you were to write a second book on GA mathematics and applications after 10 years of GA4CS, what new GA topics would you include? What new applications?</strong></span></p>
<p>At some point it would be good to collate some convincing applications of the new thinking, directly employing the intermediate primitives (like the Honda example above, or the application to GIS). Our 2011 &#8216;Guide to GA in Practice&#8217; contains some good chapters in those directions, but a proper book would need more tight editorial coherence. I would like to see parts on projective geometric algebra since that is so important to graphics (I believe R(3,3) is the right model, but we still need to learn to encode the world in its primitives, the line complexes), and on finite element methods done in GA (with special emphasis on 3D meshes).</p>
<p>&nbsp;</p>
<h3>Dr. Dietmar Hildenbrand</h3>
<p><span style="color: #003366;"><strong><a href="/wp-content/uploads/2017/01/Dr.-Dietmar-Hildenbrand.jpg"><img class="alignright size-medium wp-image-2356" src="/wp-content/uploads/2017/01/Dr.-Dietmar-Hildenbrand-297x300.jpg" alt="Dr. Dietmar Hildenbrand" width="297" height="300" srcset="/wp-content/uploads/2017/01/Dr.-Dietmar-Hildenbrand-297x300.jpg 297w, /wp-content/uploads/2017/01/Dr.-Dietmar-Hildenbrand.jpg 564w" sizes="(max-width: 297px) 100vw, 297px" /></a>What reasons made you want to do research related to Geometric Algebra? Tell us about the difficulties you faced </strong><strong>and the satisfactions you felt during your journey with GA until now.</strong></span></p>
<p>When I started to work with GA in 2003, I was immediately very impressed how easy it is to develop 3D algorithms dealing with geometric objects and operations based on GA. I was very happy to use a tool providing me an immediate visual result for mathematical expressions: CLUCalc from Christian Perwass. I am still developing most of my GA algorithms with CLUCalc and, in my opinion, CLUCalc is still today the best tool in order to learn how to use Geometric Algebra for 3D applications.</p>
<p>In 2004, when I organized and presented a GA tutorial at the Eurographics conference in Grenoble together with Christian Perwass, Daniel Fontijne, and Leo Dorst, the feedback was positive and negative at the same time.<br />
On one hand, many people were happy about the expressiveness of GA, but on the other hand, it was clear for everybody that implementations of computer graphics applications were not competitive in terms of runtime performance.</p>
<p>I realized that improving the runtime performance of GA will be the key to convincing engineers to use GA in their applications. At that time, nobody really expected that it could be possible for implementations of GA algorithms to be faster than the conventional implementation. But, in 2006, we were happy to present even two different implementations proving exactly that for a computer animation application (the movement of the arm of a virtual character).</p>
<p>&nbsp;</p>
<p><span style="color: #003366;"><strong>Tell us about Geometric Algebra Computing (GAC). What were your initial expectations when you started working </strong></span><span style="color: #003366;"><strong>on that topic? What is its current state? How do you see the future of GAC and its applications in computer science </strong></span><span style="color: #003366;"><strong>and engineering?</strong></span></p>
<p>Our approach for the just mentioned proof-of-concept application was very specific. This is why our next goal was a general system making it possible for almost every engineer to include GA in his/her application. And, the description of GA algorithms should be as much as possible similar to how CLUCalc ist doing that.</p>
<p>Now, we are happy to provide the Gaalop (Geometric Algebra Algorithms Optimizer) precompiler for the integration of GA into standard programming languages such as C++, OpenCL, CUDA and C++ AMP.</p>
<p>The integration is done based on GaalopScript, which is very much inspired by the CLUCalc scripting language. This technology is described in my book &#8220;Foundations of Geometric Algebra Computing&#8221; from 2013. Since 2015 this technology is part of the ecosystem of the HSA Foundation of more than 40 companies dealing with new heterogeneous computing architectures. Now, we have this technology available, as well as some other GA tools such as GMac, Gaigen, Gaalet and Versor, but the community working with it is still very small. The future of GAC and its applications in computer science and engineering relies heavily on whether we will succeed in closing this gap.</p>
<p>&nbsp;</p>
<p><span style="color: #003366;"><strong>What steps do you think should the GA community take to gain wider spread of GA among the larger community of engineers and computer scientists?</strong></span></p>
<p>Today, we indeed have this GAC technology available for easy to develop, geometrically intuitive, robust and fast engineering applications, but there is still only a small number of people knowing it. Exactly at this point, the book &#8220;Introduction to Geometric Algebra Computing&#8221;, that I am just writing, comes into place. The main goal of this book is to close the gap with an introduction of GA from an engineering/computing perspective. The intended audiences are students, engineers, and researchers interested in learning GAC. This book is intended to give a rapid introduction to the computing with Geometric Algebra and its power for geometric modeling. From the geometric objects point of view, it focuses on the most basic ones, namely points, lines, and circles. We call this algebra Compass Ruler Algebra since you are able to handle it comparable to working with compass and ruler. It offers the possibility to compute with these geometric objects and their geometric operations and transformations in a very intuitive way. While focusing on 2D it is easily expandable to 3D computations as used in many books dealing with the very popular Conformal Geometric Algebra in engineering applications such as computer graphics, computer vision, and robotics. This book follows a top-down approach. Focusing first on how to use GA, it is up to the reader how much he/she would like to go into the details.</p>
<p>Another attempt to gain wider spread is the ENGAGE (Empowering Novel Geometric Algebra for Graphics &amp; Engineering) workshop as part of the CGI (Computer Graphics International) conference. This year, this will be in Japan (<a href="http://fj.ics.keio.ac.jp/cgi17/" target="_blank">http://fj.ics.keio.ac.jp/cgi17/</a>). But, sure, there is still the need of many good ideas in order to attract more and more engineers.</p>
<p>&nbsp;</p>
<p><span style="color: #003366;"><strong>I know you are interested in teaching GA in schools. From your point of view, what steps are required in the near future to reach a wide acceptance of this idea? What are the difficulties you see facing its achievement?</strong></span></p>
<p>Yes, you are right, I already have some experience with GA at schools. Because of its geometric intuitiveness, it is very easy for children to develop algorithms in GA. In some workshops, I could see that children are happy to solve simple robotics problems which they normally are not able to before university. A colleague of mine already taught special relativity based on GA at school. But the main problem is to make GA really part of the curriculum. Maybe some teachers/responsibles for curricula will use my above mentioned new book for teaching themselves and for introducing it already in school.</p>
<p>&nbsp;</p>
<h3><strong>Dr. Eckhard Hitzer</strong></h3>
<p><span style="color: #003366;"><strong><a href="/wp-content/uploads/2017/01/Dr.-Eckhard-Hitzer.jpg"><img class="alignright size-full wp-image-2357" src="/wp-content/uploads/2017/01/Dr.-Eckhard-Hitzer.jpg" alt="Dr. Eckhard Hitzer" width="200" height="160" /></a>During the previous years, you&#8217;ve been following the developments in applied GA through your GA Updates blog. How do you see the current state of GA research? In what application areas do you expect the next developments will probably be?</strong></span></p>
<p>Geometric Algebra research is not only revolutionizing algorithm development in many fields (robotics, visualization, mapping, virtual reality, GIS, molecular dynamics, telecommunication, offshore mechatronics, 3D cadastres, navigation, &#8230;), it also begins to exhibit superior accuracy, stability, and speed, and is increasingly introduced in mainstream computing ecosystems.</p>
<p>&nbsp;</p>
<p><span style="color: #003366;"><strong>What types of problems, from your experience, can be handled with GA more effectively relative to classical techniques in neural computing and signal processing? What kinds of ideas can be investigated in these two areas using GA&#8217;s powerful mathematics?</strong></span></p>
<p>In neural computing and signal processing Geometric Algebra allows to generalize 1D and 2D algorithms seamlessly to higher dimensions with great advantages for electromagnetic signals, including light and color, and it fully captures, analyzes and reproduces complex high dimensional geometric relationships and topology. It begins to be used for technologies needed for autonomous driving, color face recognition, land mine detection, speech recognition, new forms of tomography, &#8230;</p>
<p>&nbsp;</p>
<p><span style="color: #003366;"><strong>If you are talking to a new post-graduate student and trying to explain the benefits of using GA in his future research activities, what would you tell him about GA? What pitfalls would you warn him not to get into? What expectations should he have related to the future of GA research?</strong></span></p>
<p>Be ready to unlearn often inefficient, inaccurate, unintuitive matrix methods and systems of linear equations. Instead learn to think and work directly in terms of geometric entities, their relations, transformations, and interactions, all efficiently and invariantly expressed directly by geometric algebra entities and their products. Resist the initial temptation to fall back into coordinate system component techniques, which hide geometric realities behind veils of stupendous numerical arrays. Expect to liberate your geometric intuition, and be able to work with an advanced single universal integrative mathematical system for whatever problem or task you may face in the future.</p>
<p>&nbsp;</p>
<p><span style="color: #003366;"><strong>How can the GA community gain more supporters and members in the near future? What kinds of events, funding proposals, online activities, etc. should the GA community focus on to attain this goal?</strong></span></p>
<p>Organizing sessions and workshops at major science and engineering conferences is a good way. International collaborative projects might be another. Submitting research papers to all types of science and engineering journals, when the applications topic permits that, rather than highly specialized journals. Preprints published ASAP on servers like vixra.org, preprint.org, etc. and open access, will also help. In addition, sharing lectures and software demos on YouTube will help interested students, professionals, and engineers to know about geometric algebra even outside formal educational and academic workshop settings.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=%2Findex.php%2F2017%2F01%2F17%2Fga-computer-science%2F&amp;linkname=Geometric%20Algebra%20in%20Computer%20Science" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=%2Findex.php%2F2017%2F01%2F17%2Fga-computer-science%2F&amp;linkname=Geometric%20Algebra%20in%20Computer%20Science" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=%2Findex.php%2F2017%2F01%2F17%2Fga-computer-science%2F&amp;linkname=Geometric%20Algebra%20in%20Computer%20Science" title="Google+" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save" href="https://www.addtoany.com/share#url=%2Findex.php%2F2017%2F01%2F17%2Fga-computer-science%2F&amp;title=Geometric%20Algebra%20in%20Computer%20Science" data-a2a-url="/index.php/2017/01/17/ga-computer-science/" data-a2a-title="Geometric Algebra in Computer Science"></a></p><p>The post <a rel="nofollow" href="/index.php/2017/01/17/ga-computer-science/">Geometric Algebra in Computer Science</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Founders of Geometric Calculus</title>
		<link>/index.php/2017/01/17/founding-geometric-calculus/</link>
		<pubDate>Tue, 17 Jan 2017 17:21:45 +0000</pubDate>
		<dc:creator><![CDATA[Ahmad Eid]]></dc:creator>
				<category><![CDATA[GA History]]></category>
		<category><![CDATA[Geometric Algebra]]></category>
		<category><![CDATA[Interview]]></category>
		<category><![CDATA[Clifford Algebra]]></category>
		<category><![CDATA[Differential Geometry]]></category>
		<category><![CDATA[Dr. Garret Sobczyk]]></category>
		<category><![CDATA[Foundations]]></category>
		<category><![CDATA[Geometric Calculus]]></category>
		<category><![CDATA[Linear Algebra]]></category>
		<category><![CDATA[Mathematics]]></category>
		<category><![CDATA[Physics]]></category>
		<category><![CDATA[Prof. David Hestenes]]></category>

		<guid isPermaLink="false">https://gacomputing.info/?p=2331</guid>
		<description><![CDATA[<p>Our minds are finite, and yet even in those circumstances of finitude, we are surrounded by possibilities that are infinite, and the purpose of human life is to grasp as much as we can&#46;&#46;&#46;</p>
<p>The post <a rel="nofollow" href="/index.php/2017/01/17/founding-geometric-calculus/">Founders of Geometric Calculus</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2017/01/bridge-246913_1280.jpg"><img class="aligncenter size-large wp-image-2340" src="/wp-content/uploads/2017/01/bridge-246913_1280-1024x682.jpg" alt="Bridge" width="1024" height="682" srcset="/wp-content/uploads/2017/01/bridge-246913_1280-1024x682.jpg 1024w, /wp-content/uploads/2017/01/bridge-246913_1280-300x200.jpg 300w, /wp-content/uploads/2017/01/bridge-246913_1280-768x512.jpg 768w, /wp-content/uploads/2017/01/bridge-246913_1280.jpg 1280w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p>
<blockquote><p>Our minds are finite, and yet even in those circumstances of finitude, we are surrounded by possibilities that are infinite, and the purpose of human life is to grasp as much as we can out of that infinitude. &#8212; Alfred North Whitehead</p></blockquote>
<p><span class="dropcap">F</span>oundations of modern Geometric Algebra and Geometric Calculus were laid down by Prof. David Hestenes and Dr. Garret Sobczyk 50 years ago. In this post, I interview Dr. Garret Sobczyk who tells us about his fascinating life journey with Prof. Hestenes. Their journey eventually inspired many researchers to follow their lead in learning, developing, and applying Geometric Algebra and Geometric Calculus to many fields of science.</p>
<hr />
<p><strong>Dr. Garret Sobczyk</strong></p>
<p><a href="/wp-content/uploads/2017/01/me.png"><img class="alignright size-full wp-image-2338" src="/wp-content/uploads/2017/01/me.png" alt="Dr. Garret Sobczyk" width="230" height="384" srcset="/wp-content/uploads/2017/01/me.png 230w, /wp-content/uploads/2017/01/me-180x300.png 180w" sizes="(max-width: 230px) 100vw, 230px" /></a>Dr. Garret Sobczyk is Emeritus Professor of Mathematics, Universidad de las Americas-Puebla, Mexico. Dr. Sobczyk first learned about Clifford geometric algebras from Prof. David Hestenes as a graduate student in mathematics at Arizona State University in 1966. He became convinced early on that geometric algebra is rightly considered to be the completion of the real number system to include the concept of direction. He obtained his Ph.D. in mathematics in 1971 and eagerly set forth to convince the world. This quest led him to spend 5 years in Poland as a postdoctoral student at the Institute of Theoretical Physics in Wroclaw, before returning to the United States in 1983. He coauthored with Prof. David Hestenes the book, “Clifford Algebra to Geometric Calculus: A Unified Language for Mathematics and Physics”, published in 1985. He held several academic positions in the United States and Mexico, before settling with his Polish wife Wanda at the Universidad de Las Americas in Cholula, Mexico in 1993. He has published over 30 articles exploring the close relationships between geometric algebra and linear and multilinear algebra and other topics and is a member of Sistema Nacional de Investigadores de Mexico.</p>
<hr />
<h3>The Fellowship of Founders</h3>
<p><span style="color: #003366;"><strong>Tell us about your early work with Dr. David Hestenes. What made you decide to work with him on the development of Geometric Algebra (GA) and Geometric Calculus (GC)?</strong></span></p>
<p><a href="/wp-content/uploads/2017/01/World-Line.jpg"><img class="alignright size-medium wp-image-2345" src="/wp-content/uploads/2017/01/World-Line-293x300.jpg" alt="World-Line" width="293" height="300" srcset="/wp-content/uploads/2017/01/World-Line-293x300.jpg 293w, /wp-content/uploads/2017/01/World-Line.jpg 450w" sizes="(max-width: 293px) 100vw, 293px" /></a>Thank you, Ahmad, for giving me the opportunity to share with you some of my early memories as a graduate student at Arizona State University (ASU) working in geometric algebra.</p>
<p>It was in 1965 when I had just completed my Master’s Degree in Mathematics and was looking for direction to continue my studies for a Ph.D. that I decided to explore possibilities in mathematical physics. Professor David Hestenes, a new professor at ASU, was offering a course in electrodynamics that caught my attention. On the first day of class, he began by introducing Geometric Algebra (GA) and the geometric product of vectors. I was amazed that I had never heard of the concept of a bivector as a directed area, or of the geometric product of vectors. It was over the course of that year that I decided that I wanted to dedicate my efforts for my Ph.D. into developing GA as a basic language in mathematics that I believed it to be then, and still do now a half a century later!</p>
<p>&nbsp;</p>
<p><span style="color: #003366;"><strong>I suspect it wasn&#8217;t easy for you to learn and apply Geometric Algebra back then. What did you do?</strong></span></p>
<p>Indeed, I did not have an easy beginning. David, at first suggested topics in Kellogg’s Potential Theory and Harmonic Analysis or generalizing Elliptic Functions. All of these were very good topics which have been extensively developed by European groups such as the Delanghe-Sommen group in Belgium, and others, but I was unable to make any real progress in these areas. It was at this point, almost in desperation, that I started to look at very basic ideas in linear algebra and differential geometry. Surely, if GA was indeed a basic language (over the continual skepticism of my Father; then a Professor of Mathematics at Clemson University, with a Ph.D. from Princeton University when he was a 23 year old), GA should offer new insights in these basic fields. Even to this day, most mathematicians believe that trying to reformulate differential geometry in GA is only putting old wine in new bottles.</p>
<p><a href="/wp-content/uploads/2017/01/Killing-vector-s2.jpg"><img class="alignright size-medium wp-image-2346" src="/wp-content/uploads/2017/01/Killing-vector-s2-300x240.jpg" alt="Killing-vector-s2" width="300" height="240" srcset="/wp-content/uploads/2017/01/Killing-vector-s2-300x240.jpg 300w, /wp-content/uploads/2017/01/Killing-vector-s2.jpg 512w" sizes="(max-width: 300px) 100vw, 300px" /></a>I undertook a serious study of linear and multilinear algebra out of books by Gel’fand, Shilov, and Greub, and basic differential geometry. I was also greatly influenced by books such as “Science Awakening” by van der Waerden, Tobias Dantzig’s book, “Number The Language of Science”, Wilder’s “Evolution of Mathematical Concepts”, and Michael Crowe’s “History of Vector Analysis”. I considered my first “breakthrough” in linear algebra to be when I discovered how to derive the Cayley-Hamilton theorem in GA by first looking at the simplest 2-dimensional case. I spent a great deal of time developing the notion of the vector and simplicial derivatives in GA as a basic tool in linear algebra. Almost all of my 1971 Ph.D. thesis consisted of a systematic development of the general simplicial derivative as a basic tool in linear algebra.</p>
<p>It was only toward the end of my thesis that I was able to start making progress in laying down the basic ideas of Riemannian Curvature in differential geometry, material which David and I developed further over a period of four years afterwards, and would later make up the heart of our book “Clifford Algebra to Geometric Calculus: A Unified Language for Mathematics and Physics”, which wasn’t published until a decade later in 1984.</p>
<p>&nbsp;</p>
<h3>Facing the Real World</h3>
<p><span style="color: #003366;"><strong>Tell us about your steps after finishing your Ph.D. Were you able to easily get recognition for your groundbreaking work with Prof. Hestenes?</strong></span></p>
<p>After finishing my Ph.D. at ASU in 1971, I was unsuccessful in obtaining any academic position. The first academic job crunch was on and for every teaching position at a University or College there were hundreds of applicants, and Mathematics Departments to which I applied were suspicious of me working in an unknown area and with a young theoretical physicist as my thesis adviser. Fortunately, ASU kept me on for an additional year as a Visiting Assistant Professor, which gave us the chance to continue working closely together in developing GA. At first, we planned on publishing four papers, which later formed the basis of our book. The following year, I was still unsuccessful in obtaining any academic position.</p>
<p>At first, I visited a number of American University Mathematics Departments with well-known people in differential geometry, but none were interested in GA or in my work. I also realized that my basic knowledge of differential geometry was insufficient to convince anyone of any need to reformulate it in a new language. In 1973, I visited European Universities in different countries and was invited to give a number of talks about GA, but it was only in Poland that I was offered a Research Fellowship with the Polish Academy of Sciences, which allowed me to continue to develop basic tools in GA that eventually went into our book CA to GC in 1984. I returned to Poland in 1976 with a Postdoctoral Research Grant from Stoney Brook University in NY, allowing me to continue my work with new colleagues at the Institute of Theoretical Physics in Wroclaw until 1980.</p>
<p>&nbsp;</p>
<p><span style="color: #003366;"><strong>Were you able to use your knowledge of GA in teaching? How did you manage that in the following years?</strong></span></p>
<p><a href="/wp-content/uploads/2017/01/CA2GC.jpg"><img class="alignright wp-image-2347 size-medium" src="/wp-content/uploads/2017/01/CA2GC-200x300.jpg" alt="Clifford Algebra to Geometric Calculus" width="200" height="300" srcset="/wp-content/uploads/2017/01/CA2GC-200x300.jpg 200w, /wp-content/uploads/2017/01/CA2GC.jpg 333w" sizes="(max-width: 200px) 100vw, 200px" /></a>I enjoyed two academic appointments as an Assistant and Associate professor of Mathematics at Spring Hill College, Mobile, Ala., and at Lander College, Greenwood, SC in the 1980’s, and began developing material to teach undergraduate students GA and calculus. Finally, in 1984, our book CA to GC was published, which provided a needed boost to my career, but even to this day, the book has been largely ignored by the majority of the Mathematics Community.</p>
<p>It was difficult to teach GA and GC to students at this level because it usually takes a full year to get students comfortable with GA, and an undergraduate student is expected to master many other subjects as well. As my Finnish friend and colleague, the late Professor Pertti Lounesto remarked, about the best you can do is “smuggled it in” under the guise of closely related material, such as vector analysis and differential forms.</p>
<p>&nbsp;</p>
<p><span style="color: #003366;"><strong>We can see how difficult your journey had been following your ideas. Did the situation get better at a later stage?</strong></span></p>
<p>Fortunately, during the 1990’s and into the new century, Professor Hestenes was successful at drawing considerable new interest to the area among computer scientists and engineers, by utilizing GA in an innovative way to lay down the foundations of projective and conformal geometries.</p>
<p>In 1990 I accepted a very promising offer by Professor Jaime Keller of the Universidad Nacional Autonoma de Mexico to work with him as Assistant Editor of the new International Journal that he was creating, “Advances in Applied Clifford Algebras”, with the hope of both consolidating this growing field of research, and promoting wider international recognition. It was an exciting two years of growth, and of discovering the exotic culture of modern Mexico, alongside the ancient Mayan civilization that may well have been among the earliest to invent the concept of the number zero, and a base 20 type number system.</p>
<p><a href="/wp-content/uploads/2017/01/bookcover1.jpg"><img class="alignright size-medium wp-image-2359" src="/wp-content/uploads/2017/01/bookcover1-200x300.jpg" alt="bookcover1" width="200" height="300" srcset="/wp-content/uploads/2017/01/bookcover1-200x300.jpg 200w, /wp-content/uploads/2017/01/bookcover1-768x1154.jpg 768w, /wp-content/uploads/2017/01/bookcover1-681x1024.jpg 681w, /wp-content/uploads/2017/01/bookcover1.jpg 827w" sizes="(max-width: 200px) 100vw, 200px" /></a>At the Universidad de Las Americas &#8211; Puebla, over the years 1993 &#8211; present, I continued to develop material for teaching GA at the undergraduate level, with an emphasis on basic linear algebra and elementary differential geometry, leading to the publication of my book, “New Foundations in Mathematics: The Geometric Concept of Number”, Birkhauser-Springer 2013. In this book, I emphasize the development of linear algebra and basic ideas of differential geometry in terms of GA, including the basic concept of the spectral basis. The idea of a spectral basis is what really connects the ideas of a geometric algebra to the traditional approaches to linear algebra and ubiquitous matrices. When GA is properly understood as providing a geometric basis for matrices, the well-established consistency of matrix algebra, in turn, proves the mathematical soundness of GA, without the need to go into more complicated arguments involving tensor analysis and the higher level abstract concepts of advanced mathematics. Also, in the book, I lay down preliminary material on application of the idea of a spectral basis in basic ideas in numerical analysis, such as Hermite interpolation and rational approximation.</p>
<p>&nbsp;</p>
<h3>Present and Future</h3>
<p><span style="color: #003366;"><strong>How do you see the current state of GA and GC among researchers?</strong></span></p>
<p>Clifford analysis, as developed by various groups, both in the United States and Europe enjoys recognition as a respectable area of research in advanced mathematics. In addition to the work of Professor Hestenes, Professor Baylis in Canada, other researchers in Mexico, China and around the World, geometric algebra has enjoyed increasing success among theoretical physicists in relativity and quantum mechanics. Clifford algebra is also used by some of the top theoretical physicists at prestigious universities in string theory and its generalizations. As you know, it has also attracted significant and growing attention in the computer science and engineering communities.</p>
<p>&nbsp;</p>
<p><span style="color: #003366;"><strong>What are your expectations of the future of GA and GC in teaching? What kind of research do you believe should be conducted to effectively relate GA and GC to mainstream mathematics and applications?</strong></span></p>
<p>I have no easy answer to this question. One of the main obstacles to teaching GA is the lack of powerful computer software to aid and check abstract hand calculations, although many new software products are becoming available. Two software packages that I have found to be useful in my teaching and research is the original stand-alone early numerical software package “CLICAL” by Lounesto, and the Mexican developed Mathematica Package [cliffordt.nb] 2007, by G. Aragon-Camarasa, J.L. Aragon, and M.A. Rodriguez. There are quite are a number of recent attempts to introduce GA at the undergraduate level that I am aware of. However, GA is still hardly recognized at all at the undergraduate level, as I firmly believe that it should be. I believe that it is the natural completion of the concept of number to include the concept of direction, and it should be taught that way down into the high school level. It is in this area that I have concentrated my own efforts. There is much left to be done to correctly lay down the foundations, even at a fundamental level, in order to facilitate progress at progressively more advanced levels in mathematics, physics, computer science, and engineering, including diverse areas such as quantum computing, robotics, the structure Lie groups and Lie Algebras, and artificial intelligence. The future lies in the hands of the younger generations.</p>
<p>&nbsp;</p>
<p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=%2Findex.php%2F2017%2F01%2F17%2Ffounding-geometric-calculus%2F&amp;linkname=Founders%20of%20Geometric%20Calculus" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=%2Findex.php%2F2017%2F01%2F17%2Ffounding-geometric-calculus%2F&amp;linkname=Founders%20of%20Geometric%20Calculus" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=%2Findex.php%2F2017%2F01%2F17%2Ffounding-geometric-calculus%2F&amp;linkname=Founders%20of%20Geometric%20Calculus" title="Google+" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save" href="https://www.addtoany.com/share#url=%2Findex.php%2F2017%2F01%2F17%2Ffounding-geometric-calculus%2F&amp;title=Founders%20of%20Geometric%20Calculus" data-a2a-url="/index.php/2017/01/17/founding-geometric-calculus/" data-a2a-title="Founders of Geometric Calculus"></a></p><p>The post <a rel="nofollow" href="/index.php/2017/01/17/founding-geometric-calculus/">Founders of Geometric Calculus</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></content:encoded>
			</item>
	</channel>
</rss>
