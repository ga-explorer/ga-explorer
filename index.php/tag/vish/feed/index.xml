<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Vish &#8211; Geometric Algebra Explorer</title>
	<atom:link href="/index.php/tag/vish/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Voyaging the Computational Universe with Geometric Algebra</description>
	<lastBuildDate>Tue, 07 Nov 2017 06:57:43 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.8.3</generator>

<image>
	<url>/wp-content/uploads/2016/12/cropped-GAExplorer-Icon-150x150.jpg</url>
	<title>Vish &#8211; Geometric Algebra Explorer</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Visualizing Scientific Insights</title>
		<link>/index.php/2017/02/20/ga-sciviz/</link>
		<pubDate>Mon, 20 Feb 2017 20:51:31 +0000</pubDate>
		<dc:creator><![CDATA[Ahmad Eid]]></dc:creator>
				<category><![CDATA[GA Computing]]></category>
		<category><![CDATA[GA Software]]></category>
		<category><![CDATA[Interview]]></category>
		<category><![CDATA[Astrophysics]]></category>
		<category><![CDATA[Big Data]]></category>
		<category><![CDATA[Computing]]></category>
		<category><![CDATA[Fiber Bundles]]></category>
		<category><![CDATA[Geometric Algebra]]></category>
		<category><![CDATA[Geometric Computing]]></category>
		<category><![CDATA[HDF5]]></category>
		<category><![CDATA[High Performance Computing]]></category>
		<category><![CDATA[Scientific Visualization]]></category>
		<category><![CDATA[SciViz]]></category>
		<category><![CDATA[Vish]]></category>

		<guid isPermaLink="false">https://gacomputing.info/?p=2447</guid>
		<description><![CDATA[<p>The area of Scientific Visualization (SciViz) is an interdisciplinary branch of science. According to Friendly, it is "primarily concerned with the visualization of three-dimensional phenomena (architectural, meteorological, medical, biological, etc.), where the emphasis is on realistic renderings of volumes, surfaces, illumination sources, and so forth, perhaps with a dynamic (time) component". It is also considered a subset of computer graphics, a branch of computer science. The purpose of scientific visualization is to graphically illustrate scientific data to enable scientists to understand, illustrate, and glean insight from their data.<br />
In this post, I interview Dr. Werner Benger who describes his views on SciViz using Geometric Algebra and provides valuable insights about the use of SciViz in Big Data applications.</p>
<p>The post <a rel="nofollow" href="/index.php/2017/02/20/ga-sciviz/">Visualizing Scientific Insights</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></description>
				<content:encoded><![CDATA[<div id="attachment_2646" style="width: 1034px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/02/SciViz.jpg"><img class="size-large wp-image-2646" src="/wp-content/uploads/2017/02/SciViz-1024x540.jpg" alt="SciViz" width="1024" height="540" srcset="/wp-content/uploads/2017/02/SciViz-1024x540.jpg 1024w, /wp-content/uploads/2017/02/SciViz-300x158.jpg 300w, /wp-content/uploads/2017/02/SciViz-768x405.jpg 768w, /wp-content/uploads/2017/02/SciViz.jpg 1214w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><p class="wp-caption-text">A frame from a movie illustrating flys into New Orleans LIDAR terrain over Lake Pontchartrain where the three drainage canals can be seen. This sequence was also rendered for the planetarium in Baton Rouge (<a href="http://sciviz.cct.lsu.edu/gallery/katrina/links/flyintonola_Lakeview_4K.html" target="_blank" rel="noopener">source</a>).</p></div>
<blockquote><p>Visualize this thing that you want, see it, feel it, believe in it. Make your mental blue print, and begin to build. &#8212; Robert Collier</p>
<p>Visualization is daydreaming with a purpose. &#8212; Bo Bennett</p></blockquote>
<span class="dropcap">T</span>he area of <strong><a href="https://en.wikipedia.org/wiki/Scientific_visualization" target="_blank" rel="noopener">Scientific Visualization</a> (SciViz)</strong> is an interdisciplinary branch of science. According to <a href="http://www.math.yorku.ca/SCS/Gallery/milestone/milestone.pdf" target="_blank" rel="noopener">Friendly</a>, it is &#8220;primarily concerned with the visualization of three-dimensional phenomena (architectural, meteorological, medical, biological, etc.), where the emphasis is on realistic renderings of volumes, surfaces, illumination sources, and so forth, perhaps with a dynamic (time) component&#8221;. It is also considered a subset of computer graphics, a branch of computer science. The purpose of scientific visualization is to graphically illustrate scientific data to enable scientists to understand, illustrate, and glean insight from their data.</p>
<p>In this post, I interview Dr. Werner Benger who describes his views on SciViz using Geometric Algebra and provides valuable insights about the use of SciViz in Big Data applications.</p>
<hr />
<p><a href="/wp-content/uploads/2017/02/AAEAAQAAAAAAAATTAAAAJDhiNjQ0Nzc0LTMxNzAtNDg3OC1hNTUwLWYxNGYyNmFlMzJkOQ.jpg"><img class="alignright size-medium wp-image-2620" src="/wp-content/uploads/2017/02/AAEAAQAAAAAAAATTAAAAJDhiNjQ0Nzc0LTMxNzAtNDg3OC1hNTUwLWYxNGYyNmFlMzJkOQ-300x300.jpg" alt="SciViz" width="300" height="300" srcset="/wp-content/uploads/2017/02/AAEAAQAAAAAAAATTAAAAJDhiNjQ0Nzc0LTMxNzAtNDg3OC1hNTUwLWYxNGYyNmFlMzJkOQ-300x300.jpg 300w, /wp-content/uploads/2017/02/AAEAAQAAAAAAAATTAAAAJDhiNjQ0Nzc0LTMxNzAtNDg3OC1hNTUwLWYxNGYyNmFlMzJkOQ-150x150.jpg 150w, /wp-content/uploads/2017/02/AAEAAQAAAAAAAATTAAAAJDhiNjQ0Nzc0LTMxNzAtNDg3OC1hNTUwLWYxNGYyNmFlMzJkOQ-160x160.jpg 160w, /wp-content/uploads/2017/02/AAEAAQAAAAAAAATTAAAAJDhiNjQ0Nzc0LTMxNzAtNDg3OC1hNTUwLWYxNGYyNmFlMzJkOQ-320x320.jpg 320w, /wp-content/uploads/2017/02/AAEAAQAAAAAAAATTAAAAJDhiNjQ0Nzc0LTMxNzAtNDg3OC1hNTUwLWYxNGYyNmFlMzJkOQ.jpg 406w" sizes="(max-width: 300px) 100vw, 300px" /></a><a href="https://www.linkedin.com/in/werner-benger-a6a15b28/" target="_blank" rel="noopener" class="broken_link">Dr. Werner Benger</a> is Chief Designer, Software Architect, and Co-Founder at <a href="https://www.facebook.com/pg/AirborneHydroMapping/about/?ref=page_internal" target="_blank" rel="noopener">Airborne Hydro Mapping Software GmbH</a> (AHMS). He worked on the design and development of the Vish Visualization Shell for Scientific Visualization of Big Data. Vish is designed to be suitable for scientific big data from any kind of application domain by using a generic data model. Within the context of AHMS, it is used for topo-bathymetric datasets from LIDAR measurements.</p>
<p>Dr. Werner Benger has a scientific background in astrophysics. His main research is in the area of Generic Visualization methods based on mathematical models for multidisciplinary applications, with a special focus on astrophysics and computational fluid dynamics. The applied methods are based on Differential Geometry, Geometric Algebra, Topology, and Fiber Bundles. His current special focus is on iso topo-bathymetric data via his work in AHMS.</p>
<hr />
<p><span style="color: #000080;"><strong>Tell us about your primary research interest: Scientific Visualization (SciViz). Why have you chosen to work in this field?</strong></span></p>
<p><a href="/wp-content/uploads/2017/02/4_cr.jpg"><img class="alignright size-medium wp-image-2653" src="/wp-content/uploads/2017/02/4_cr-300x300.jpg" alt="" width="300" height="300" srcset="/wp-content/uploads/2017/02/4_cr-300x300.jpg 300w, /wp-content/uploads/2017/02/4_cr-150x150.jpg 150w, /wp-content/uploads/2017/02/4_cr-160x160.jpg 160w, /wp-content/uploads/2017/02/4_cr-320x320.jpg 320w, /wp-content/uploads/2017/02/4_cr.jpg 350w" sizes="(max-width: 300px) 100vw, 300px" /></a>Basically, there are three purposes of visualization of scientific data:</p>
<ul>
<li>Presentation (when all is known about the data),</li>
<li>Analysis (when some questions need to be answered about the data),</li>
<li>Exploration (when we have no clue about the data yet and want to find out something new).</li>
</ul>
<p>Although user interface design is not necessarily part of SciViz, but in many cases, interactivity is needed. Particularly important is that the data that one deals with here are those with a spatio-temporal nature, it&#8217;s not just &#8220;any&#8221; data, but this specific subset.</p>
<p>Actually, I would not say that I have chosen to work in SciViz. It&#8217;s more that SciViz has chosen me. For most of the time I&#8217;ve considered myself rather an astrophysicist that became &#8220;delinquent&#8221; by engaging with computers too much. The origin came from the question how a black hole actually looks like. I asked that questions to one of my professors at university and he could not answer it, so I had to find out myself. I wrote a computer program for that purpose and that got me into this field. A couple of years ago I gave a presentation to students telling this story, you can find <a href="https://www.cct.lsu.edu/~werner/4REU2010.pdf" target="_blank" rel="noopener">the presentation slides here</a>.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>Do you see significant differences between Engineering and Computer Science when trying to solve practical problems?</strong></span></p>
<p>As you mention Engineering vs. Computer Science &#8211; I often feel the difference between these two is that in Engineering you worry to get things to work &#8220;somehow&#8221;, while in Computer Science you also worry how things are getting to work and you want to find a systematic, future-safe approach. I&#8217;m myself more behind this theoretical approach to finding a powerful general solution that also but not only works for a special case, rather than just solving one particular special case. I also want to know why things work or why things cannot work, rather than finding an algorithm that solves a problem &#8220;somehow&#8221;.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>What major branches of Engineering and Computer Science are directly related to SciViz research and applications?</strong></span></p>
<p><a href="/wp-content/uploads/2017/02/Fields.jpg"><img class="alignright size-medium wp-image-2659" src="/wp-content/uploads/2017/02/Fields-300x107.jpg" alt="Fields" width="300" height="107" srcset="/wp-content/uploads/2017/02/Fields-300x107.jpg 300w, /wp-content/uploads/2017/02/Fields.jpg 700w" sizes="(max-width: 300px) 100vw, 300px" /></a>My own approach to scientific visualization is focusing on finding general methods that allow encapsulation and reuse of code and algorithms. Computer programmers are inherently lazy people; otherwise, they would not use computers. I&#8217;m no exception for that, and particularly lazy such that I want to implement an algorithm or data operation once, and not over and over again for similar data types. Consequently what is needed is one common concept that covers many cases under the same hood. I found that to be true through my background in astrophysics in General Relativity (GR); since this theory makes many otherwise implicit assumptions explicit.</p>
<p>The same is also true about Geometric Algebra, which &#8220;unfolds&#8221; otherwise collapsed mathematical entities, such as vectors and bivectors, and clearly states the properties of each object in a systematic way. So it is this unfolding and clarification of concepts via GA and GR (namely differential geometry and topology) that opens the path to a common data model that is powerful and reusable for those many cases that one encounters in scientific visualization. It is an overhead for a particular case, so many people who do their work under time-pressure or a close horizon don&#8217;t see the benefit of a more general data model, but in the longer term it is significantly less work and opens development resources towards more interesting topics rather than dealing with myriads of similar cases. Here is an article titled &#8220;<a href="https://www.computer.org/cms/Computer.org/ComputingNow/homepage/2009/1109/rW_CS_SafariFileFormatJungle.pdf" target="_blank" rel="noopener">On Safari in the File Format Jungle</a>&#8221; that elaborates on this matter.</p>
<p>Systematic scientific visualization fuses all those interesting mathematical fields of differential geometry, topology, and geometric algebra. SciViz is also on the bridge between artwork and science, so touching both aspects is what many want, but only SciViz achieves if done well. You can read more about this aspect in my article &#8220;<a href="http://www.zib.de/hege/pdf/Benger-1999-Visions-of-numerical-relativity_SC-99-53.pdf" target="_blank" rel="noopener">Visions of Numerical Relativity 1999</a>&#8220;.</p>
<p>&nbsp;</p>
<p><strong><span style="color: #000080;">What recent SciViz developments you find most important that you can tell us about?</span></strong></p>
<p>Concerning new developments &#8211; that is certainly &#8220;Big Data&#8221;, which has become a buzzword that is all around now. With more and advanced numerical and observation technology available, the trend is to no longer filter data during generation, but to just retrieve and store anything possible, leaving the crucial problem of identifying &#8211; i.e., visualizing &#8211; the important aspects of the data to the last data processing step, the visualization. This is a topic by itself of course, but just to mention that Big Data is often considered synonymous with High-Performance Computing (HPC). Actually, SciViz only covers one aspect of HPC, but indeed many methods and approaches from HPC are needed to deal with SciViz, even on single PCs and laptops. There it is of course all about parallelism, about GPU computing, about parallel I/O, and about scaling up algorithms to deal with bigger amounts of data.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>Tell us about the relations between Geometric Computing (GC) and SciViz. How does SciViz benefit from developments in GC and the other way around? </strong></span></p>
<p>Geometric Computing is a tool that is used in SciViz to solve its various detail problems. It&#8217;s frequent that in SciViz you want to achieve something and you need to search for the best GC algorithm to solve it. For the other way around, SciViz may help to develop a GC algorithm as it allows visual insight to what actually happens during the algorithm, not merely the result.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>What benefits can Geometric Algebra provide in this context for both domains? Do you find everyone agreeing with your point of view on using GA?</strong></span></p>
<p><a href="/wp-content/uploads/2017/02/isostream03.jpg"><img class="alignright size-medium wp-image-2655" src="/wp-content/uploads/2017/02/isostream03-300x236.jpg" alt="" width="300" height="236" srcset="/wp-content/uploads/2017/02/isostream03-300x236.jpg 300w, /wp-content/uploads/2017/02/isostream03-768x605.jpg 768w, /wp-content/uploads/2017/02/isostream03.jpg 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a>I always try to solve a GC problem via GA since GA is much richer in expressiveness than linear algebra and the chances that a seemingly complex algorithm can be solved by some simple but powerful elements taken out of a GA &#8220;toolbox&#8221; are high. Once you are used to thinking in terms of GA, things become easier that way, and thinking in terms of linear algebra feels like a knot in the brain. Like when talking about a &#8220;normal vector&#8221;, which is not really a vector, it&#8217;s merely identified with a vector, but what is actually a better representation is a bivector algebraically describing a plane&#8217;s direction in space.</p>
<p>This sometimes leads to passionate discussions with colleagues who still think about geometry in linear algebra and wonder how to rotate around an axis in 3D, when it&#8217;s so much easier to think about a rotation in a plane spun by two vectors. Such GA-based representation does not require any thinking, you &#8220;just do it&#8221;. But it is so hard for people to think about a bivector when talking about a plane if they are used to think about a plane&#8217;s normal vector instead, which in fact is a construct involving orthogonality and orientation, much more complex than the original object, the plane itself.</p>
<p>But then, even GA complicates matters by considering bivectors as oriented planes, but there&#8217;s not really a concept of a plane &#8220;as-is&#8221;, i.e. without orientation. That is something that can be borrowed from differential geometry as a covector, an unoriented plane, which by means of using an orientation (via the pseudoscalar) is identifiable with a bivector, then describing an oriented plane. And all those items are identified in linear vector algebra with the same object, a three-component vector.</p>
<p>Now it&#8217;s a bit of matter of taste which side is more confusing, the one identifying different geometric concepts into the same algebraic representation, or the one that unfolds a widely used geometric concept into more expressive algebraic objects. For my taste, the latter, and the more you have unfolded those geometric concepts, the better you understand which algebraic structures are required for identification &#8211; and those structures may be non-trivial in general, thus need to be considered explicitly in a general-purpose data model, even though via various optimization techniques they would vanish. This should be the last step, not the first one. &#8220;Implicit assumptions&#8221; are the death of data descriptions and file formats, there must at least be a way to identify which assumptions have been made, and they need to be part of the data description.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>What is the importance of embedding the assumptions into Big Data descriptions and file formats? How can we approach this effectively?</strong></span></p>
<p>When we classify algebraic properties of geometric concepts we obtain a &#8220;zoo&#8221; of vector types. This determines the metadata that needs to be written to a file (or other means of persistent storage such as a database) such that the data remain identifiable. Just writing floating point data is simple, but problems occur when the need arises to know what the data mean when reading them. Self-description of data is important for archival purposes and restartable algorithms, which are particularly important for long-term archiving and out-of-memory data processing. There are not many file formats that even provide the required expressivity of meta-data as required for this purpose to describe such variety of vectorial types.</p>
<p><a href="/wp-content/uploads/2017/02/TensorFibers-F5Logo.png"><img class="alignright size-full wp-image-2657" src="/wp-content/uploads/2017/02/TensorFibers-F5Logo.png" alt="TensorFibers-F5Logo" width="256" height="256" srcset="/wp-content/uploads/2017/02/TensorFibers-F5Logo.png 256w, /wp-content/uploads/2017/02/TensorFibers-F5Logo-150x150.png 150w, /wp-content/uploads/2017/02/TensorFibers-F5Logo-160x160.png 160w, /wp-content/uploads/2017/02/TensorFibers-F5Logo-320x320.png 320w" sizes="(max-width: 256px) 100vw, 256px" /></a>XML is one option, especially in the web context, <strong><a href="https://www.hdfgroup.org/" target="_blank" rel="noopener">HDF5</a></strong> is another one, designed for high-performance applications and big data. While via XML anything is in the open, in HDF5 there already is an API to describe the properties of types. In Addition, HDF5 provides functionality of type conversions, which in this context can be utilized to e.g. implicitly convert multivectors of different numerical precision or to read a partial multivector into full multivector (for instance, if data were written by an application that only knows about vectors, but later on these data are read into another application that only knows about full multivectors).</p>
<p>For a generic application, we need runtime type identification that maps a type description, may it be provided by HDF5 or another capable file format \ storage medium, into compile-time types such that the correct precompiled code for the respective vector types can be called. On the other hand, the I/O mechanisms should not need to know about the complexity of vector types, it only needs to know about arrays of floating points plus some metadata. Thus what is left is to map the compile-time type meta-information to some run-time meta-information about types. The mechanism of type traits comes into play here for writing data. For reading data, however, it is not sufficient. When a certain data type is identified in some persistent storage, the reading code has to look up some registry to find a routine that produces actual instances of data arrays of the given type (which is then known by application code only). Given such an application code produced data array, it remains sufficient for the reading code to look at its numerical values only.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>As I understand, SciViz is a core part of any practical simulator. In your opinion, what are the software engineering methods most suitable for designing and implementing scalable SciViz software components and systems? </strong></span></p>
<p><a href="/wp-content/uploads/2017/02/Streamlines_Multiblock6.jpg"><img class="alignright size-medium wp-image-2650" src="/wp-content/uploads/2017/02/Streamlines_Multiblock6-300x188.jpg" alt="Streamlines_Multiblock6" width="300" height="188" srcset="/wp-content/uploads/2017/02/Streamlines_Multiblock6-300x188.jpg 300w, /wp-content/uploads/2017/02/Streamlines_Multiblock6-768x480.jpg 768w, /wp-content/uploads/2017/02/Streamlines_Multiblock6.jpg 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a>Well, in theory, it&#8217;s a complementary part of simulation; in practice many scientists performing 3D or 4D simulations still only look at numbers or 1D plots. This is partly due to &#8220;old-style&#8221; scientists being used to 1D plots, as this was the only way of &#8220;visualization&#8221; decades ago, and color printing of images with 3D visualizations is not possible in traditional high-profile journals where they want to publish. The other problem is the inconvenience of dealing with big data and advanced visualization systems. While there are lots of fancy visualization equipment such as Caves and Walls, only very few would make use of such. The typical scientist would not make use of anything that doesn&#8217;t run on their laptops right away. Even going to another room for doing visualization on a higher-end machine is too much overhead for many &#8220;end-users&#8221; and they would not do it unless they are forced to.</p>
<p>For design and engineering of SciViz software, I&#8217;m an advocator for using a common data model. I.e., use one central data structure to route as many types of data through this one, instead of cooking many little solutions that may or may not fit together.</p>
<p>Concerning code readability, I believe code should be written in a most intuitive way; mathematical algorithms as close to the mathematical notation as possible. For example, operator overloading and C++ 14 string literals provide syntactic sugar to do so, but a naive implementation may suffer performance issues. Expression templates have demonstrated how human-readable code can be transformed into efficient code by using C++ templates. The more constraints are known about some code, the better it can be optimized, and systems such as Gaalop or GMac that rely on symbolic algebra packages may be able to optimize a certain algorithm even better than the more generic C++ compiler. It is thus desirable that a C++ library providing GA algorithm allows for application code that is not only human-readable but also readable as a domain-specific language such that it is parseable by tools beyond the C++ compiler itself.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>How can GA be useful in this software design context? Are there any difficulties associated with using GA here?</strong></span></p>
<p><a href="/wp-content/uploads/2017/02/Software-Design.jpg"><img class="alignright size-medium wp-image-2651" src="/wp-content/uploads/2017/02/Software-Design-300x105.jpg" alt="Software Design" width="300" height="105" srcset="/wp-content/uploads/2017/02/Software-Design-300x105.jpg 300w, /wp-content/uploads/2017/02/Software-Design-768x269.jpg 768w, /wp-content/uploads/2017/02/Software-Design.jpg 970w" sizes="(max-width: 300px) 100vw, 300px" /></a>GA is as helpful here in software design as it is helpful in bridging different mathematical applications, by showing a common, unifying basis. The difficulty here is similar to using a common data model: we need the most general possible way of considering GA, not merely a version of GA for one particular case, even though that one may be very broadly used.</p>
<p>For instance, this means considering GA in arbitrary coordinate systems, not merely in orthonormal coordinate systems, which is what most implementations of GA do &#8211; because mathematically, it can be done, and the problem is solved thereby. But it&#8217;s only mathematically solved, and in practice, non-orthonormal coordinate systems are more common; for instance in numerical relativity or in computational fluid dynamic simulations. GA-based implementations need to be as general as possible to cover all such applications that can use GA as an algebraic representation. At the same time, we need to keep the highly optimized reductions that are possible for special cases, and at this time some automatic code generators may come into play to allow specifying constraints and knowledge available for a particular use case (e.g. global orthonormality of coordinates) which are not available on the level of a compiler.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>How do you think designing GA-based SciViz software, like your Vish Shell, for Big Data processing can be different from small scale GC applications?</strong></span></p>
<p><a href="/wp-content/uploads/2017/02/VishConcept.jpg"><img class="alignright size-medium wp-image-2649" src="/wp-content/uploads/2017/02/VishConcept-300x279.jpg" alt="Vish Concept" width="300" height="279" srcset="/wp-content/uploads/2017/02/VishConcept-300x279.jpg 300w, /wp-content/uploads/2017/02/VishConcept.jpg 482w" sizes="(max-width: 300px) 100vw, 300px" /></a>A certain difference is that one must avoid any overhead &#8220;per vector element&#8221; and consider doing operations on &#8220;arrays of multivectors&#8221;. This comes with constraints that need to be taken into consideration. Vish stems from a background of dealing with big data from numerical relativity and bases all its data operations on the concept of fiber bundles. This means operations are done as array operations as much as possible, which are parallelizable and allow optimal data throughput, for both I/O and transferring data on the graphics card for rendering. Modern rendering is based on vertex buffers and vertex arrays, which mathematically are fiber bundles, whereas the old OpenGL 1.0 was about primitives and lists of primitives. This model did not scale to the highly parallel data processing that happens on GPUs and thus is considered deprecated now, whereas the fiber bundle data model, envisioned originally by D. Butler in 1989, shines, even though only a few people are aware that they actually do fiber bundles.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>What role does GA have in such Big-Data software design context?</strong></span></p>
<p>In this context, GA is complementary, as it basically implements fibers on the fiber bundle data model. So the basic change is to think about operations on arrays of multivectors and to extend solutions to consider array operations instead of single variables. Now that &#8220;should&#8221; be rather easy when an array of multivectors is homogenous, i.e. each array element consists of multivectors with the same zero and non-zero components. Fortunately, this will most likely be the case in practical applications, and code-generators such as GMac are able to predict which multivector components will always be zero within an algorithm &#8211; that is an essential part of applying GA algorithms for big data, both for computational speed and even more memory consumption.</p>
<p>For a single input operation, optimizing out zeroes is just some computational optimization, but the algorithm would still work without it. For big data having many inputs, keeping arrays which are all zero are performance killers and may prevent an entire application from becoming functional. So an optional optimization for small data applications becomes a mandatory component for big data applications. But things become really complex if we had to consider heterogeneous multivector arrays where the zeros would be different at each array element. This basically leaves us with two options: Carry all zeroes everywhere for the sake of parallelism, or use locally dynamic multivectors, which will be much slower but more memory-friendly. Let&#8217;s hope we don&#8217;t have many such application cases.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>Can you tell us about other interesting aspects of Vish?</strong></span></p>
<p>I would like to point out that Vish is adhering to <a href="http://vish.fiberbundle.net/download/license/" target="_blank" rel="noopener">a particular license with a non-military aspect</a>. I think it&#8217;s important for developers of technology to also think how their technology can be used. Otherwise, the Oppenheimer effect may strike them later on. Many people would object, and promote &#8220;free software&#8221; just for the sake of freedom, saying the military would not respect a software license anyway. However, my experience on that matter has been just the opposite. It is respected, and I had a couple of requests from the military that I was putting down, and it was accepted.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>You mentioned earlier that most scientists don&#8217;t like to use advanced SciViz tools often. What can we do in terms of educating and training new generations of researchers to change this? Can GA provide help in solving this problem?</strong></span></p>
<p><a href="/wp-content/uploads/2017/02/Rayleigh-Taylor_instability.jpg"><img class="alignright size-medium wp-image-2662" src="/wp-content/uploads/2017/02/Rayleigh-Taylor_instability-300x300.jpg" alt="Rayleigh-Taylor_instability" width="300" height="300" srcset="/wp-content/uploads/2017/02/Rayleigh-Taylor_instability-300x300.jpg 300w, /wp-content/uploads/2017/02/Rayleigh-Taylor_instability-150x150.jpg 150w, /wp-content/uploads/2017/02/Rayleigh-Taylor_instability-160x160.jpg 160w, /wp-content/uploads/2017/02/Rayleigh-Taylor_instability-320x320.jpg 320w, /wp-content/uploads/2017/02/Rayleigh-Taylor_instability.jpg 500w" sizes="(max-width: 300px) 100vw, 300px" /></a>This is a good and unsolved question. Actually, I don&#8217;t think much can be done to change the mind of current researchers, but new ones will embrace new technology in a natural way, similar to kids growing up with smartphones, while their grandparents still disapproving them. Parts of the process is due to the technology not just becoming functional, but also easy and available to use.</p>
<p>There is not much point of trying to &#8220;force&#8221; users into some technology, that is not really sustainable, but there are many people out there that would want to make their technology to be used and available, yet they struggle with the simple issue of obtaining funding for it, because in the scientific world, you don&#8217;t get papers and publications for making your software easier to use. It&#8217;s more the scientific publication culture, or rather, using &#8220;scientific publications&#8221; as a measure for funding agencies that inhibits making such tools easier. SciViz, in particular, has the problem that everyone wants and likes glossy images to present and sell their work, but hardly anyone wants to invest resources into it or pay for it. There are few exceptions, for instance, I heard about research centers with the policy that 10% of all project budgets must be allocated for doing visualization; this is a great model. By that model, even projects that don&#8217;t need visualization contribute to visualization research and deployment. With a proper funding model for SciViz development and supplementing, development and increased use of advanced SciViz tools will come naturally.</p>
<p>On the other hand, GA is more an educational topic, it does not really help to understand a data analysis in its entity, it could only help to understand a certain data analysis tool or method, to see what it does. But understanding the data itself is independent, and that is up to the scientist who produced the data to determine whether GA is of benefit in this step. But similar to SciViz tools, there is no point of trying to enforce or promote GA to those who don&#8217;t want it, but those who don&#8217;t know it yet should be made aware that it exists and what it is good for, and that should be done as early as possible in someone&#8217;s learning career. Of course, the problem is that it comes with a choice &#8211; it can be used or not, so to not burden people with unnecessary mental ballast, it would not be taught early on. But at least, it should be mentioned, so people inspired by it can look it up themselves.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="/index.php/2017/02/20/ga-sciviz/">Visualizing Scientific Insights</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></content:encoded>
			</item>
	</channel>
</rss>
