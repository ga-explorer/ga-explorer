<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Computing &#8211; Geometric Algebra Explorer</title>
	<atom:link href="/index.php/tag/computing/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Voyaging the Computational Universe with Geometric Algebra</description>
	<lastBuildDate>Fri, 10 Nov 2017 21:18:27 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.8.3</generator>

<image>
	<url>/wp-content/uploads/2016/12/cropped-GAExplorer-Icon-150x150.jpg</url>
	<title>Computing &#8211; Geometric Algebra Explorer</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Visualizing Scientific Insights</title>
		<link>/index.php/2017/02/20/ga-sciviz/</link>
		<comments>/index.php/2017/02/20/ga-sciviz/#respond</comments>
		<pubDate>Mon, 20 Feb 2017 20:51:31 +0000</pubDate>
		<dc:creator><![CDATA[Ahmad Eid]]></dc:creator>
				<category><![CDATA[GA Computing]]></category>
		<category><![CDATA[GA Software]]></category>
		<category><![CDATA[Interview]]></category>
		<category><![CDATA[Astrophysics]]></category>
		<category><![CDATA[Big Data]]></category>
		<category><![CDATA[Computing]]></category>
		<category><![CDATA[Fiber Bundles]]></category>
		<category><![CDATA[Geometric Algebra]]></category>
		<category><![CDATA[Geometric Computing]]></category>
		<category><![CDATA[HDF5]]></category>
		<category><![CDATA[High Performance Computing]]></category>
		<category><![CDATA[Scientific Visualization]]></category>
		<category><![CDATA[SciViz]]></category>
		<category><![CDATA[Vish]]></category>

		<guid isPermaLink="false">https://gacomputing.info/?p=2447</guid>
		<description><![CDATA[<p>The area of Scientific Visualization (SciViz) is an interdisciplinary branch of science. According to Friendly, it is "primarily concerned with the visualization of three-dimensional phenomena (architectural, meteorological, medical, biological, etc.), where the emphasis is on realistic renderings of volumes, surfaces, illumination sources, and so forth, perhaps with a dynamic (time) component". It is also considered a subset of computer graphics, a branch of computer science. The purpose of scientific visualization is to graphically illustrate scientific data to enable scientists to understand, illustrate, and glean insight from their data.<br />
In this post, I interview Dr. Werner Benger who describes his views on SciViz using Geometric Algebra and provides valuable insights about the use of SciViz in Big Data applications.</p>
<p>The post <a rel="nofollow" href="/index.php/2017/02/20/ga-sciviz/">Visualizing Scientific Insights</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></description>
				<content:encoded><![CDATA[<div class='dropshadowboxes-container ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-lifted-both dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#ffffff;    '>
                            
<div id="attachment_2646" style="width: 1034px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/02/SciViz.jpg"><img class="size-large wp-image-2646" src="/wp-content/uploads/2017/02/SciViz-1024x540.jpg" alt="SciViz" width="1024" height="540" srcset="/wp-content/uploads/2017/02/SciViz-1024x540.jpg 1024w, /wp-content/uploads/2017/02/SciViz-300x158.jpg 300w, /wp-content/uploads/2017/02/SciViz-768x405.jpg 768w, /wp-content/uploads/2017/02/SciViz.jpg 1214w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><p class="wp-caption-text">A frame from a movie illustrating flys into New Orleans LIDAR terrain over Lake Pontchartrain where the three drainage canals can be seen. This sequence was also rendered for the planetarium in Baton Rouge (<a href="http://sciviz.cct.lsu.edu/gallery/katrina/links/flyintonola_Lakeview_4K.html" target="_blank" rel="noopener">source</a>).<span style="font-size: 16px;"> </span></p></div>
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<div class="su-quote su-quote-style-default su-quote-has-cite"><div class="su-quote-inner su-clearfix">
<p>Visualize this thing that you want, see it, feel it, believe in it. Make your mental blue print, and begin to build.</p>
<span class="su-quote-cite">Robert Collier</span></div></div>
<hr />
<div class="su-quote su-quote-style-default su-quote-has-cite"><div class="su-quote-inner su-clearfix">
<p>Visualization is daydreaming with a purpose.</p>
<span class="su-quote-cite">Bo Bennett</span></div></div>
</div>

                            </div>
                        </div>
<hr />
<span class="dropcap">S</span><strong><a href="https://en.wikipedia.org/wiki/Scientific_visualization" target="_blank" rel="noopener">cientific Visualization</a> (SciViz)</strong> is a fascinating interdisciplinary branch of science. According to <a href="http://www.math.yorku.ca/SCS/Gallery/milestone/milestone.pdf" target="_blank" rel="noopener">Friendly</a>, it is &#8220;primarily concerned with the visualization of three-dimensional phenomena (architectural, meteorological, medical, biological, etc.), where the emphasis is on realistic renderings of volumes, surfaces, illumination sources, and so forth, perhaps with a dynamic (time) component&#8221;. It is also considered a subset of computer graphics, a branch of computer science. The purpose of scientific visualization is to graphically illustrate scientific data to enable scientists to understand, illustrate, and glean insight from their data.</p>
<p>In this post, I interview Dr. Werner Benger who describes his views on SciViz using Geometric Algebra and provides valuable insights about the use of SciViz in Big Data applications.</p>
<hr />
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<div class="su-note" style="border-color:#87bee5;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#96d3ff;border-color:#eaf6ff;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class='content-column three_fourth'><h3>About Dr. Werner Benger</h3>
<p><a href="https://www.cct.lsu.edu/~werner/" target="_blank" rel="noopener">Dr. Werner Benger</a> is Chief Designer, Software Architect, and Co-Founder at <a href="https://www.facebook.com/pg/AirborneHydroMapping/about/?ref=page_internal" target="_blank" rel="noopener">Airborne Hydro Mapping Software GmbH</a> (AHMS). He worked on the design and development of the Vish Visualization Shell for Scientific Visualization of Big Data. Vish is designed to be suitable for scientific big data from any kind of application domain by using a generic data model. Within the context of AHMS, it is used for topo-bathymetric datasets from LIDAR measurements.</p>
<p>Dr. Werner Benger has a scientific background in astrophysics. His main research is in the area of Generic Visualization methods based on mathematical models for multidisciplinary applications, with a special focus on astrophysics and computational fluid dynamics. The applied methods are based on Differential Geometry, Geometric Algebra, Topology, and Fiber Bundles. His current special focus is on iso topo-bathymetric data via his work in AHMS.</p></div>
<div class='content-column one_fourth last_column'><div class='dropshadowboxes-container dropshadowboxes-center ' style='width:100%;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-outside-shadow dropshadowboxes-lifted-both dropshadowboxes-effect-default' style='width:auto; border: 1px solid #dddddd; height:; background-color:#ffffff;    '>
                            
<p><a href="/wp-content/uploads/2017/02/AAEAAQAAAAAAAATTAAAAJDhiNjQ0Nzc0LTMxNzAtNDg3OC1hNTUwLWYxNGYyNmFlMzJkOQ.jpg"><img class="size-medium wp-image-2620 aligncenter" src="/wp-content/uploads/2017/02/AAEAAQAAAAAAAATTAAAAJDhiNjQ0Nzc0LTMxNzAtNDg3OC1hNTUwLWYxNGYyNmFlMzJkOQ-300x300.jpg" alt="SciViz" width="300" height="300" srcset="/wp-content/uploads/2017/02/AAEAAQAAAAAAAATTAAAAJDhiNjQ0Nzc0LTMxNzAtNDg3OC1hNTUwLWYxNGYyNmFlMzJkOQ-300x300.jpg 300w, /wp-content/uploads/2017/02/AAEAAQAAAAAAAATTAAAAJDhiNjQ0Nzc0LTMxNzAtNDg3OC1hNTUwLWYxNGYyNmFlMzJkOQ-150x150.jpg 150w, /wp-content/uploads/2017/02/AAEAAQAAAAAAAATTAAAAJDhiNjQ0Nzc0LTMxNzAtNDg3OC1hNTUwLWYxNGYyNmFlMzJkOQ-160x160.jpg 160w, /wp-content/uploads/2017/02/AAEAAQAAAAAAAATTAAAAJDhiNjQ0Nzc0LTMxNzAtNDg3OC1hNTUwLWYxNGYyNmFlMzJkOQ-320x320.jpg 320w, /wp-content/uploads/2017/02/AAEAAQAAAAAAAATTAAAAJDhiNjQ0Nzc0LTMxNzAtNDg3OC1hNTUwLWYxNGYyNmFlMzJkOQ.jpg 406w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>

                            </div>
                        </div></div><div class='clear_column'></div>
</div></div>
</div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> Tell us about your primary research interest: Scientific Visualization (SciViz). Why have you chosen to work in this field?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-outside-shadow dropshadowboxes-lifted-both dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#ffffff;    '>
                            
<p><a href="/wp-content/uploads/2017/02/4_cr.jpg"><img class="size-medium wp-image-2653 aligncenter" src="/wp-content/uploads/2017/02/4_cr-300x300.jpg" alt="" width="300" height="300" srcset="/wp-content/uploads/2017/02/4_cr-300x300.jpg 300w, /wp-content/uploads/2017/02/4_cr-150x150.jpg 150w, /wp-content/uploads/2017/02/4_cr-160x160.jpg 160w, /wp-content/uploads/2017/02/4_cr-320x320.jpg 320w, /wp-content/uploads/2017/02/4_cr.jpg 350w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>

                            </div>
                        </div>
<p>Basically, there are three purposes of visualization of scientific data:</p>
<ul>
<li>Presentation (when all is known about the data),</li>
<li>Analysis (when some questions need to be answered about the data),</li>
<li>Exploration (when we have no clue about the data yet and want to find out something new).</li>
</ul>
<p>Although user interface design is not necessarily part of SciViz, but in many cases, interactivity is needed. Particularly important is that the data that one deals with here are those with a spatio-temporal nature, it&#8217;s not just &#8220;any&#8221; data, but this specific subset.</p>
<p>Actually, I would not say that I have chosen to work in SciViz. It&#8217;s more that SciViz has chosen me. For most of the time I&#8217;ve considered myself rather an astrophysicist that became &#8220;delinquent&#8221; by engaging with computers too much. The origin came from the question how a black hole actually looks like. I asked that questions to one of my professors at university and he could not answer it, so I had to find out myself. I wrote a computer program for that purpose and that got me into this field. A couple of years ago I gave a presentation to students telling this story, you can find <a href="https://www.cct.lsu.edu/~werner/4REU2010.pdf" target="_blank" rel="noopener">the presentation slides here</a>.</p>
</div></div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> Do you see significant differences between Engineering and Computer Science when trying to solve practical problems?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<p>As you mention Engineering vs. Computer Science &#8211; I often feel the difference between these two is that in Engineering you worry to get things to work &#8220;somehow&#8221;, while in Computer Science you also worry how things are getting to work and you want to find a systematic, future-safe approach. I&#8217;m myself more behind this theoretical approach to finding a powerful general solution that also but not only works for a special case, rather than just solving one particular special case. I also want to know why things work or why things cannot work, rather than finding an algorithm that solves a problem &#8220;somehow&#8221;.</p>
</div></div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> What major branches of Engineering and Computer Science are directly related to SciViz research and applications?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-outside-shadow dropshadowboxes-lifted-both dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#ffffff;    '>
                            
<p><a href="/wp-content/uploads/2017/02/Fields.jpg"><img class="size-medium wp-image-2659 aligncenter" src="/wp-content/uploads/2017/02/Fields-300x107.jpg" alt="Fields" width="300" height="107" srcset="/wp-content/uploads/2017/02/Fields-300x107.jpg 300w, /wp-content/uploads/2017/02/Fields.jpg 700w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>

                            </div>
                        </div>
<p>My own approach to scientific visualization is focusing on finding general methods that allow encapsulation and reuse of code and algorithms. Computer programmers are inherently lazy people; otherwise, they would not use computers. I&#8217;m no exception for that, and particularly lazy such that I want to implement an algorithm or data operation once, and not over and over again for similar data types. Consequently what is needed is one common concept that covers many cases under the same hood. I found that to be true through my background in astrophysics in General Relativity (GR); since this theory makes many otherwise implicit assumptions explicit.</p>
<p>The same is also true about Geometric Algebra, which &#8220;unfolds&#8221; otherwise collapsed mathematical entities, such as vectors and bivectors, and clearly states the properties of each object in a systematic way. So it is this unfolding and clarification of concepts via GA and GR (namely differential geometry and topology) that opens the path to a common data model that is powerful and reusable for those many cases that one encounters in scientific visualization. It is an overhead for a particular case, so many people who do their work under time-pressure or a close horizon don&#8217;t see the benefit of a more general data model, but in the longer term it is significantly less work and opens development resources towards more interesting topics rather than dealing with myriads of similar cases. Here is an article titled &#8220;<a href="https://www.computer.org/cms/Computer.org/ComputingNow/homepage/2009/1109/rW_CS_SafariFileFormatJungle.pdf" target="_blank" rel="noopener">On Safari in the File Format Jungle</a>&#8221; that elaborates on this matter.</p>
<p>Systematic scientific visualization fuses all those interesting mathematical fields of differential geometry, topology, and geometric algebra. SciViz is also on the bridge between artwork and science, so touching both aspects is what many want, but only SciViz achieves if done well. You can read more about this aspect in my article &#8220;<a href="http://www.zib.de/hege/pdf/Benger-1999-Visions-of-numerical-relativity_SC-99-53.pdf" target="_blank" rel="noopener">Visions of Numerical Relativity 1999</a>&#8220;.</p>
</div></div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> What recent SciViz developments you find most important that you can tell us about?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<p>Concerning new developments &#8211; that is certainly &#8220;Big Data&#8221;, which has become a buzzword that is all around now. With more and advanced numerical and observation technology available, the trend is to no longer filter data during generation, but to just retrieve and store anything possible, leaving the crucial problem of identifying &#8211; i.e., visualizing &#8211; the important aspects of the data to the last data processing step, the visualization. This is a topic by itself of course, but just to mention that Big Data is often considered synonymous with High-Performance Computing (HPC). Actually, SciViz only covers one aspect of HPC, but indeed many methods and approaches from HPC are needed to deal with SciViz, even on single PCs and laptops. There it is of course all about parallelism, about GPU computing, about parallel I/O, and about scaling up algorithms to deal with bigger amounts of data.</p>
</div></div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> Tell us about the relations between Geometric Computing (GC) and SciViz. How does SciViz benefit from developments in GC and the other way around?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<p>Geometric Computing is a tool that is used in SciViz to solve its various detail problems. It&#8217;s frequent that in SciViz you want to achieve something and you need to search for the best GC algorithm to solve it. For the other way around, SciViz may help to develop a GC algorithm as it allows visual insight to what actually happens during the algorithm, not merely the result.</p>
</div></div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> What benefits can Geometric Algebra provide in this context for both domains? Do you find everyone agreeing with your point of view on using GA?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-outside-shadow dropshadowboxes-lifted-both dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#ffffff;    '>
                            
<p><a href="/wp-content/uploads/2017/02/isostream03.jpg"><img class="size-medium wp-image-2655 aligncenter" src="/wp-content/uploads/2017/02/isostream03-300x236.jpg" alt="" width="300" height="236" srcset="/wp-content/uploads/2017/02/isostream03-300x236.jpg 300w, /wp-content/uploads/2017/02/isostream03-768x605.jpg 768w, /wp-content/uploads/2017/02/isostream03.jpg 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>

                            </div>
                        </div>
<p>I always try to solve a GC problem via GA since GA is much richer in expressiveness than linear algebra and the chances that a seemingly complex algorithm can be solved by some simple but powerful elements taken out of a GA &#8220;toolbox&#8221; are high. Once you are used to thinking in terms of GA, things become easier that way, and thinking in terms of linear algebra feels like a knot in the brain. Like when talking about a &#8220;normal vector&#8221;, which is not really a vector, it&#8217;s merely identified with a vector, but what is actually a better representation is a bivector algebraically describing a plane&#8217;s direction in space.</p>
<p>This sometimes leads to passionate discussions with colleagues who still think about geometry in linear algebra and wonder how to rotate around an axis in 3D, when it&#8217;s so much easier to think about a rotation in a plane spun by two vectors. Such GA-based representation does not require any thinking, you &#8220;just do it&#8221;. But it is so hard for people to think about a bivector when talking about a plane if they are used to think about a plane&#8217;s normal vector instead, which in fact is a construct involving orthogonality and orientation, much more complex than the original object, the plane itself.</p>
<p>But then, even GA complicates matters by considering bivectors as oriented planes, but there&#8217;s not really a concept of a plane &#8220;as-is&#8221;, i.e. without orientation. That is something that can be borrowed from differential geometry as a covector, an unoriented plane, which by means of using an orientation (via the pseudoscalar) is identifiable with a bivector, then describing an oriented plane. And all those items are identified in linear vector algebra with the same object, a three-component vector.</p>
<p>Now it&#8217;s a bit of matter of taste which side is more confusing, the one identifying different geometric concepts into the same algebraic representation, or the one that unfolds a widely used geometric concept into more expressive algebraic objects. For my taste, the latter, and the more you have unfolded those geometric concepts, the better you understand which algebraic structures are required for identification &#8211; and those structures may be non-trivial in general, thus need to be considered explicitly in a general-purpose data model, even though via various optimization techniques they would vanish. This should be the last step, not the first one. &#8220;Implicit assumptions&#8221; are the death of data descriptions and file formats, there must at least be a way to identify which assumptions have been made, and they need to be part of the data description.</p>
</div></div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> What is the importance of embedding the assumptions into Big Data descriptions and file formats? How can we approach this effectively?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<p>When we classify algebraic properties of geometric concepts we obtain a &#8220;zoo&#8221; of vector types. This determines the metadata that needs to be written to a file (or other means of persistent storage such as a database) such that the data remain identifiable. Just writing floating point data is simple, but problems occur when the need arises to know what the data mean when reading them. Self-description of data is important for archival purposes and restartable algorithms, which are particularly important for long-term archiving and out-of-memory data processing. There are not many file formats that even provide the required expressivity of meta-data as required for this purpose to describe such variety of vectorial types.</p>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-outside-shadow dropshadowboxes-lifted-both dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#ffffff;    '>
                            
<p><a href="/wp-content/uploads/2017/02/TensorFibers-F5Logo.png"><img class="size-full wp-image-2657 aligncenter" src="/wp-content/uploads/2017/02/TensorFibers-F5Logo.png" alt="TensorFibers-F5Logo" width="256" height="256" srcset="/wp-content/uploads/2017/02/TensorFibers-F5Logo.png 256w, /wp-content/uploads/2017/02/TensorFibers-F5Logo-150x150.png 150w, /wp-content/uploads/2017/02/TensorFibers-F5Logo-160x160.png 160w, /wp-content/uploads/2017/02/TensorFibers-F5Logo-320x320.png 320w" sizes="(max-width: 256px) 100vw, 256px" /></a></p>

                            </div>
                        </div>
<p>XML is one option, especially in the web context, <strong><a href="https://www.hdfgroup.org/" target="_blank" rel="noopener">HDF5</a></strong> is another one, designed for high-performance applications and big data. While via XML anything is in the open, in HDF5 there already is an API to describe the properties of types. In Addition, HDF5 provides functionality of type conversions, which in this context can be utilized to e.g. implicitly convert multivectors of different numerical precision or to read a partial multivector into full multivector (for instance, if data were written by an application that only knows about vectors, but later on these data are read into another application that only knows about full multivectors).</p>
<p>For a generic application, we need runtime type identification that maps a type description, may it be provided by HDF5 or another capable file format \ storage medium, into compile-time types such that the correct precompiled code for the respective vector types can be called. On the other hand, the I/O mechanisms should not need to know about the complexity of vector types, it only needs to know about arrays of floating points plus some metadata. Thus what is left is to map the compile-time type meta-information to some run-time meta-information about types. The mechanism of type traits comes into play here for writing data. For reading data, however, it is not sufficient. When a certain data type is identified in some persistent storage, the reading code has to look up some registry to find a routine that produces actual instances of data arrays of the given type (which is then known by application code only). Given such an application code produced data array, it remains sufficient for the reading code to look at its numerical values only.</p>
</div></div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> As I understand, SciViz is a core part of any practical simulator. In your opinion, what are the software engineering methods most suitable for designing and implementing scalable SciViz software components and systems?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-outside-shadow dropshadowboxes-lifted-both dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#ffffff;    '>
                            
<p><a href="/wp-content/uploads/2017/02/Streamlines_Multiblock6.jpg"><img class="size-medium wp-image-2650 aligncenter" src="/wp-content/uploads/2017/02/Streamlines_Multiblock6-300x188.jpg" alt="Streamlines_Multiblock6" width="300" height="188" srcset="/wp-content/uploads/2017/02/Streamlines_Multiblock6-300x188.jpg 300w, /wp-content/uploads/2017/02/Streamlines_Multiblock6-768x480.jpg 768w, /wp-content/uploads/2017/02/Streamlines_Multiblock6.jpg 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>

                            </div>
                        </div>
<p>Well, in theory, it&#8217;s a complementary part of simulation; in practice many scientists performing 3D or 4D simulations still only look at numbers or 1D plots. This is partly due to &#8220;old-style&#8221; scientists being used to 1D plots, as this was the only way of &#8220;visualization&#8221; decades ago, and color printing of images with 3D visualizations is not possible in traditional high-profile journals where they want to publish. The other problem is the inconvenience of dealing with big data and advanced visualization systems. While there are lots of fancy visualization equipment such as Caves and Walls, only very few would make use of such. The typical scientist would not make use of anything that doesn&#8217;t run on their laptops right away. Even going to another room for doing visualization on a higher-end machine is too much overhead for many &#8220;end-users&#8221; and they would not do it unless they are forced to.</p>
<p>For design and engineering of SciViz software, I&#8217;m an advocator for using a common data model. I.e., use one central data structure to route as many types of data through this one, instead of cooking many little solutions that may or may not fit together.</p>
<p>Concerning code readability, I believe code should be written in a most intuitive way; mathematical algorithms as close to the mathematical notation as possible. For example, operator overloading and C++ 14 string literals provide syntactic sugar to do so, but a naive implementation may suffer performance issues. Expression templates have demonstrated how human-readable code can be transformed into efficient code by using C++ templates. The more constraints are known about some code, the better it can be optimized, and systems such as Gaalop or GMac that rely on symbolic algebra packages may be able to optimize a certain algorithm even better than the more generic C++ compiler. It is thus desirable that a C++ library providing GA algorithm allows for application code that is not only human-readable but also readable as a domain-specific language such that it is parseable by tools beyond the C++ compiler itself.</p>
</div></div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> How can GA be useful in this software design context? Are there any difficulties associated with using GA here?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-outside-shadow dropshadowboxes-lifted-both dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#ffffff;    '>
                            
<p><a href="/wp-content/uploads/2017/02/Software-Design.jpg"><img class="size-medium wp-image-2651 aligncenter" src="/wp-content/uploads/2017/02/Software-Design-300x105.jpg" alt="Software Design" width="300" height="105" srcset="/wp-content/uploads/2017/02/Software-Design-300x105.jpg 300w, /wp-content/uploads/2017/02/Software-Design-768x269.jpg 768w, /wp-content/uploads/2017/02/Software-Design.jpg 970w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>

                            </div>
                        </div>
<p>GA is as helpful here in software design as it is helpful in bridging different mathematical applications, by showing a common, unifying basis. The difficulty here is similar to using a common data model: we need the most general possible way of considering GA, not merely a version of GA for one particular case, even though that one may be very broadly used.</p>
<p>For instance, this means considering GA in arbitrary coordinate systems, not merely in orthonormal coordinate systems, which is what most implementations of GA do &#8211; because mathematically, it can be done, and the problem is solved thereby. But it&#8217;s only mathematically solved, and in practice, non-orthonormal coordinate systems are more common; for instance in numerical relativity or in computational fluid dynamic simulations. GA-based implementations need to be as general as possible to cover all such applications that can use GA as an algebraic representation. At the same time, we need to keep the highly optimized reductions that are possible for special cases, and at this time some automatic code generators may come into play to allow specifying constraints and knowledge available for a particular use case (e.g. global orthonormality of coordinates) which are not available on the level of a compiler.</p>
</div></div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> How do you think designing GA-based SciViz software, like your Vish Shell, for Big Data processing can be different from small-scale GC applications?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-outside-shadow dropshadowboxes-lifted-both dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#ffffff;    '>
                            
<p><a href="/wp-content/uploads/2017/02/VishConcept.jpg"><img class="size-medium wp-image-2649 aligncenter" src="/wp-content/uploads/2017/02/VishConcept-300x279.jpg" alt="Vish Concept" width="300" height="279" srcset="/wp-content/uploads/2017/02/VishConcept-300x279.jpg 300w, /wp-content/uploads/2017/02/VishConcept.jpg 482w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>

                            </div>
                        </div>
<p>A certain difference is that one must avoid any overhead &#8220;per vector element&#8221; and consider doing operations on &#8220;arrays of multivectors&#8221;. This comes with constraints that need to be taken into consideration. Vish stems from a background of dealing with big data from numerical relativity and bases all its data operations on the concept of fiber bundles. This means operations are done as array operations as much as possible, which are parallelizable and allow optimal data throughput, for both I/O and transferring data on the graphics card for rendering. Modern rendering is based on vertex buffers and vertex arrays, which mathematically are fiber bundles, whereas the old OpenGL 1.0 was about primitives and lists of primitives. This model did not scale to the highly parallel data processing that happens on GPUs and thus is considered deprecated now, whereas the fiber bundle data model, envisioned originally by D. Butler in 1989, shines, even though only a few people are aware that they actually do fiber bundles.</p>
</div></div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> What role does GA have in such Big-Data software design context?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<p>In this context, GA is complementary, as it basically implements fibers on the fiber bundle data model. So the basic change is to think about operations on arrays of multivectors and to extend solutions to consider array operations instead of single variables. Now that &#8220;should&#8221; be rather easy when an array of multivectors is homogenous, i.e. each array element consists of multivectors with the same zero and non-zero components. Fortunately, this will most likely be the case in practical applications, and code-generators such as GMac are able to predict which multivector components will always be zero within an algorithm &#8211; that is an essential part of applying GA algorithms for big data, both for computational speed and even more memory consumption.</p>
<p>For a single input operation, optimizing out zeroes is just some computational optimization, but the algorithm would still work without it. For big data having many inputs, keeping arrays which are all zero are performance killers and may prevent an entire application from becoming functional. So an optional optimization for small data applications becomes a mandatory component for big data applications. But things become really complex if we had to consider heterogeneous multivector arrays where the zeros would be different at each array element. This basically leaves us with two options: Carry all zeroes everywhere for the sake of parallelism, or use locally dynamic multivectors, which will be much slower but more memory-friendly. Let&#8217;s hope we don&#8217;t have many such application cases.</p>
</div></div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> Can you tell us about other interesting aspects of Vish?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<p>I would like to point out that Vish is adhering to <a href="http://vish.fiberbundle.net/download/license/" target="_blank" rel="noopener">a particular license with a non-military aspect</a>. I think it&#8217;s important for developers of technology to also think how their technology can be used. Otherwise, the Oppenheimer effect may strike them later on. Many people would object, and promote &#8220;free software&#8221; just for the sake of freedom, saying the military would not respect a software license anyway. However, my experience on that matter has been just the opposite. It is respected, and I had a couple of requests from the military that I was putting down, and it was accepted.</p>
</div></div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> You mentioned earlier that most scientists don't like to use advanced SciViz tools often. What can we do in terms of educating and training new generations of researchers to change this? Can GA provide help in solving this problem?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-outside-shadow dropshadowboxes-lifted-both dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#ffffff;    '>
                            
<p><a href="/wp-content/uploads/2017/02/Rayleigh-Taylor_instability.jpg"><img class="size-medium wp-image-2662 aligncenter" src="/wp-content/uploads/2017/02/Rayleigh-Taylor_instability-300x300.jpg" alt="Rayleigh-Taylor_instability" width="300" height="300" srcset="/wp-content/uploads/2017/02/Rayleigh-Taylor_instability-300x300.jpg 300w, /wp-content/uploads/2017/02/Rayleigh-Taylor_instability-150x150.jpg 150w, /wp-content/uploads/2017/02/Rayleigh-Taylor_instability-160x160.jpg 160w, /wp-content/uploads/2017/02/Rayleigh-Taylor_instability-320x320.jpg 320w, /wp-content/uploads/2017/02/Rayleigh-Taylor_instability.jpg 500w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>

                            </div>
                        </div>
<p>This is a good and unsolved question. Actually, I don&#8217;t think much can be done to change the mind of current researchers, but new ones will embrace new technology in a natural way, similar to kids growing up with smartphones, while their grandparents still disapproving them. Parts of the process is due to the technology not just becoming functional, but also easy and available to use.</p>
<p>There is not much point of trying to &#8220;force&#8221; users into some technology, that is not really sustainable, but there are many people out there that would want to make their technology to be used and available, yet they struggle with the simple issue of obtaining funding for it, because in the scientific world, you don&#8217;t get papers and publications for making your software easier to use. It&#8217;s more the scientific publication culture, or rather, using &#8220;scientific publications&#8221; as a measure for funding agencies that inhibits making such tools easier. SciViz, in particular, has the problem that everyone wants and likes glossy images to present and sell their work, but hardly anyone wants to invest resources into it or pay for it. There are few exceptions, for instance, I heard about research centers with the policy that 10% of all project budgets must be allocated for doing visualization; this is a great model. By that model, even projects that don&#8217;t need visualization contribute to visualization research and deployment. With a proper funding model for SciViz development and supplementing, development and increased use of advanced SciViz tools will come naturally.</p>
<p>On the other hand, GA is more an educational topic, it does not really help to understand a data analysis in its entity, it could only help to understand a certain data analysis tool or method, to see what it does. But understanding the data itself is independent, and that is up to the scientist who produced the data to determine whether GA is of benefit in this step. But similar to SciViz tools, there is no point of trying to enforce or promote GA to those who don&#8217;t want it, but those who don&#8217;t know it yet should be made aware that it exists and what it is good for, and that should be done as early as possible in someone&#8217;s learning career. Of course, the problem is that it comes with a choice &#8211; it can be used or not, so to not burden people with unnecessary mental ballast, it would not be taught early on. But at least, it should be mentioned, so people inspired by it can look it up themselves.</p>
</div></div>
<p>The post <a rel="nofollow" href="/index.php/2017/02/20/ga-sciviz/">Visualizing Scientific Insights</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/2017/02/20/ga-sciviz/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Geometric Algebra in Computer Science</title>
		<link>/index.php/2017/01/17/ga-computer-science/</link>
		<comments>/index.php/2017/01/17/ga-computer-science/#respond</comments>
		<pubDate>Tue, 17 Jan 2017 20:15:10 +0000</pubDate>
		<dc:creator><![CDATA[Ahmad Eid]]></dc:creator>
				<category><![CDATA[GA Applications]]></category>
		<category><![CDATA[GA Computing]]></category>
		<category><![CDATA[GA Software]]></category>
		<category><![CDATA[Interview]]></category>
		<category><![CDATA[Computer Graphics]]></category>
		<category><![CDATA[Computer Science]]></category>
		<category><![CDATA[Computer Vision]]></category>
		<category><![CDATA[Computing]]></category>
		<category><![CDATA[Geometric Algebra]]></category>
		<category><![CDATA[Neural Computing]]></category>
		<category><![CDATA[Robotics]]></category>
		<category><![CDATA[School]]></category>
		<category><![CDATA[Teaching]]></category>

		<guid isPermaLink="false">http://gacomputing.info/?p=2137</guid>
		<description><![CDATA[<p>One of the most important fields of application for Geometric algebra can be found in Computer Science. In this post, I interview 3 key researchers who apply Geometric Algebra in their work to share their valuable experience and insights. Their applied research spans many applications in computer science including Computer Graphics, Robotics, Computer Vision, Image Processing, Neural Computing, and more.</p>
<p>The post <a rel="nofollow" href="/index.php/2017/01/17/ga-computer-science/">Geometric Algebra in Computer Science</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></description>
				<content:encoded><![CDATA[<div class='dropshadowboxes-container ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curved dropshadowboxes-curved dropshadowboxes-curved-horizontal-2 dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#ffffff;    '>
                            
<p><a href="/wp-content/uploads/2017/01/Computer-Science.jpg"><img class="aligncenter size-large wp-image-2354" src="/wp-content/uploads/2017/01/Computer-Science-1024x724.jpg" alt="Computer Science" width="1024" height="724" srcset="/wp-content/uploads/2017/01/Computer-Science-1024x724.jpg 1024w, /wp-content/uploads/2017/01/Computer-Science-300x212.jpg 300w, /wp-content/uploads/2017/01/Computer-Science-768x543.jpg 768w, /wp-content/uploads/2017/01/Computer-Science.jpg 1280w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p>
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<div class="su-quote su-quote-style-default su-quote-has-cite"><div class="su-quote-inner su-clearfix">
[Computer science] is not really about computers and it&#8217;s not about computers in the same sense that physics is not really about particle accelerators, and biology is not about microscopes and Petri dishes&#8230; and geometry isn&#8217;t really about using surveying instruments.</p>
<span class="su-quote-cite">Hal Abelson</span></div></div>
</div>

                            </div>
                        </div>
<hr />
<span class="dropcap">O</span>ne of the most important fields of application for Geometric algebra can be found in Computer Science. In this post, I interview 3 leading researchers who apply Geometric Algebra in their work to share their valuable experience and insights. Their applied research spans many applications in computer science including Computer Graphics, Robotics, Computer Vision, Image Processing, Neural Computing, and more.</p>
<hr />
<div class="su-note" style="border-color:#a9c0e3;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#BCD5FC;border-color:#f2f7fe;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<h3><strong>Dr. Leo Dorst</strong></h3>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-outside-shadow dropshadowboxes-curved dropshadowboxes-curved dropshadowboxes-curved-horizontal-2 dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#ffffff;    '>
                            
<p><span style="color: #003366;"><strong><a href="/wp-content/uploads/2017/01/Dr.-Leo-Dorst.jpg"><img class="size-full wp-image-2355 aligncenter" src="/wp-content/uploads/2017/01/Dr.-Leo-Dorst.jpg" alt="Dr. Leo Dorst" width="200" height="200" srcset="/wp-content/uploads/2017/01/Dr.-Leo-Dorst.jpg 200w, /wp-content/uploads/2017/01/Dr.-Leo-Dorst-150x150.jpg 150w, /wp-content/uploads/2017/01/Dr.-Leo-Dorst-160x160.jpg 160w, /wp-content/uploads/2017/01/Dr.-Leo-Dorst-320x320.jpg 320w" sizes="(max-width: 200px) 100vw, 200px" /></a></strong></span></p>

                            </div>
                        </div>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> Tell us about your primary research and teaching interests. What sort of satisfaction do you get when working on your primary interests?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<p>My primary interest is the interplay between geometry and its algebraic representation. It is great fun to derive some equation solving a problem, and then hearing it begin to talk to you about aspects you had never considered in the original formulation. This works most strongly in GA, which is why I love that framework. However, it is hard to find funding for this in abstracto. I am currently tying it into a project on restoring broken archaeological artifacts based on 3D scans (project-gravitate.eu); in a theoretical work package, this pulls in my earlier work on geometric path planning and mathematical morphology and offers an opportunity to study finite elements methods from a GA point of view.</p>
</div></div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> What do you think are the main characteristics of GA as a mathematical modeling language?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<p>GA clears your mind and your software, even when you decide to stick to LA in practice (at least, in the beginning). The disgusting number of different terms and techniques in LA which are all, in hindsight, ways to avoid using the outer product are a good example. Once you realize that outer product exists, much of the operations described in natural language (like &#8216;span&#8217;) coherently collapse to elementary and compact algebraic operations under your own control. Certainly, in computer science where 3D is just not enough (the spaces involved in machine learning are very high-dimensional), the outer product MUST be taught. And once you have the outer product, you might as well absorb the geometric product for generalized projections and rejections. As for operators, use rotors instead of quaternions, so you have something that is real and that generalizes to n-D.</p>
</div></div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> Tell us about your important book, coauthored with S. Mann and D. Fontijne, 'Geometric Algebra for Computer Science' (GA4CS). How can the GA community make more books like it to help attract more people to learn and apply GA in their research and teaching?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<p>After I just learned GA, I was amazed by the clarity it provides at the computational basis for geometry, and its new elements and operators at an intermediate level of abstraction: it is great to have the very interesting new primitives, especially in CGA (conformal geometric algebra). What can we do more or better once we learn to think in terms of those primitives? I knew I could not develop the consequences for intermediate and high-level algorithms myself &#8212; there is just too much reform to do, in too many fields. So we wrote a book to convey the basic tools and the algebraically supported intuition of their interplay, for others to do that work, each in their own subfield. It has not quite taken off yet in the way I hoped, though there are some examples (such as work by Ishida at Honda on genetic algorithms for road-following using GA primitives and their interactions as the chromosomes and cross-over operations). We need more work at that intermediate level, showing how or when the possibility not to go down to the vector level pays off.</p>
</div></div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> If you were to write a second book on GA mathematics and applications after 10 years of GA4CS, what new GA topics would you include? What new applications?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<p>At some point it would be good to collate some convincing applications of the new thinking, directly employing the intermediate primitives (like the Honda example above, or the application to GIS). Our 2011 &#8216;Guide to GA in Practice&#8217; contains some good chapters in those directions, but a proper book would need more tight editorial coherence. I would like to see parts on projective geometric algebra since that is so important to graphics (I believe R(3,3) is the right model, but we still need to learn to encode the world in its primitives, the line complexes), and on finite element methods done in GA (with special emphasis on 3D meshes).</p>
</div></div>
</div></div>
<p>&nbsp;</p>
<div class="su-note" style="border-color:#a9c0e3;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#BCD5FC;border-color:#f2f7fe;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<h3>Dr. Dietmar Hildenbrand</h3>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-outside-shadow dropshadowboxes-curved dropshadowboxes-curved dropshadowboxes-curved-horizontal-2 dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#ffffff;    '>
                            
<p><span style="color: #003366;"><strong><a href="/wp-content/uploads/2017/01/Dr.-Dietmar-Hildenbrand.jpg"><img class="size-medium wp-image-2356 aligncenter" src="/wp-content/uploads/2017/01/Dr.-Dietmar-Hildenbrand-297x300.jpg" alt="Dr. Dietmar Hildenbrand" width="297" height="300" srcset="/wp-content/uploads/2017/01/Dr.-Dietmar-Hildenbrand-297x300.jpg 297w, /wp-content/uploads/2017/01/Dr.-Dietmar-Hildenbrand.jpg 564w" sizes="(max-width: 297px) 100vw, 297px" /></a></strong></span></p>

                            </div>
                        </div>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> What reasons made you want to do research related to Geometric Algebra? Tell us about the difficulties you faced and the satisfaction you felt during your journey with GA until now.</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<p>When I started to work with GA in 2003, I was immediately very impressed how easy it is to develop 3D algorithms dealing with geometric objects and operations based on GA. I was very happy to use a tool providing me an immediate visual result for mathematical expressions: CLUCalc from Christian Perwass. I am still developing most of my GA algorithms with CLUCalc and, in my opinion, CLUCalc is still today the best tool in order to learn how to use Geometric Algebra for 3D applications.</p>
<p>In 2004, when I organized and presented a GA tutorial at the Eurographics conference in Grenoble together with Christian Perwass, Daniel Fontijne, and Leo Dorst, the feedback was positive and negative at the same time.<br />
On one hand, many people were happy about the expressiveness of GA, but on the other hand, it was clear for everybody that implementations of computer graphics applications were not competitive in terms of runtime performance.</p>
<p>I realized that improving the runtime performance of GA will be the key to convincing engineers to use GA in their applications. At that time, nobody really expected that it could be possible for implementations of GA algorithms to be faster than the conventional implementation. But, in 2006, we were happy to present even two different implementations proving exactly that for a computer animation application (the movement of the arm of a virtual character).</p>
</div></div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> Tell us about Geometric Algebra Computing (GAC). What were your initial expectations when you started working on that topic? What is its current state? How do you see the future of GAC and its applications in computer science and engineering?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<p>Our approach for the just mentioned proof-of-concept application was very specific. This is why our next goal was a general system making it possible for almost every engineer to include GA in his/her application. And, the description of GA algorithms should be as much as possible similar to how CLUCalc ist doing that.</p>
<p>Now, we are happy to provide the Gaalop (Geometric Algebra Algorithms Optimizer) precompiler for the integration of GA into standard programming languages such as C++, OpenCL, CUDA and C++ AMP.</p>
<p>The integration is done based on GaalopScript, which is very much inspired by the CLUCalc scripting language. This technology is described in my book &#8220;Foundations of Geometric Algebra Computing&#8221; from 2013. Since 2015 this technology is part of the ecosystem of the HSA Foundation of more than 40 companies dealing with new heterogeneous computing architectures. Now, we have this technology available, as well as some other GA tools such as GMac, Gaigen, Gaalet and Versor, but the community working with it is still very small. The future of GAC and its applications in computer science and engineering relies heavily on whether we will succeed in closing this gap.</p>
</div></div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> What steps do you think should the GA community take to gain wider spread of GA among the larger community of engineers and computer scientists?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<p>Today, we indeed have this GAC technology available for easy to develop, geometrically intuitive, robust and fast engineering applications, but there is still only a small number of people knowing it. Exactly at this point, the book &#8220;Introduction to Geometric Algebra Computing&#8221;, that I am just writing, comes into place. The main goal of this book is to close the gap with an introduction of GA from an engineering/computing perspective. The intended audiences are students, engineers, and researchers interested in learning GAC. This book is intended to give a rapid introduction to the computing with Geometric Algebra and its power for geometric modeling. From the geometric objects point of view, it focuses on the most basic ones, namely points, lines, and circles. We call this algebra Compass Ruler Algebra since you are able to handle it comparable to working with compass and ruler. It offers the possibility to compute with these geometric objects and their geometric operations and transformations in a very intuitive way. While focusing on 2D it is easily expandable to 3D computations as used in many books dealing with the very popular Conformal Geometric Algebra in engineering applications such as computer graphics, computer vision, and robotics. This book follows a top-down approach. Focusing first on how to use GA, it is up to the reader how much he/she would like to go into the details.</p>
<p>Another attempt to gain wider spread is the ENGAGE (Empowering Novel Geometric Algebra for Graphics &amp; Engineering) workshop as part of the CGI (Computer Graphics International) conference. This year, this will be in Japan (<a href="http://fj.ics.keio.ac.jp/cgi17/" target="_blank" rel="noopener">http://fj.ics.keio.ac.jp/cgi17/</a>). But, sure, there is still the need of many good ideas in order to attract more and more engineers.</p>
</div></div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> I know you are interested in teaching GA in schools. From your point of view, what steps are required in the near future to reach a wide acceptance of this idea? What are the difficulties you see facing its achievement?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<p>Yes, you are right, I already have some experience with GA at schools. Because of its geometric intuitiveness, it is very easy for children to develop algorithms in GA. In some workshops, I could see that children are happy to solve simple robotics problems which they normally are not able to before university. A colleague of mine already taught special relativity based on GA at school. But the main problem is to make GA really part of the curriculum. Maybe some teachers/responsibles for curricula will use my above mentioned new book for teaching themselves and for introducing it already in school.</p>
</div></div>
</div></div>
<p>&nbsp;</p>
<div class="su-note" style="border-color:#a9c0e3;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#BCD5FC;border-color:#f2f7fe;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<h3><strong>Dr. Eckhard Hitzer</strong></h3>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-outside-shadow dropshadowboxes-curved dropshadowboxes-curved dropshadowboxes-curved-horizontal-2 dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#ffffff;    '>
                            
<p><span style="color: #003366;"><strong><a href="/wp-content/uploads/2017/01/Dr.-Eckhard-Hitzer.jpg"><img class="size-full wp-image-2357 aligncenter" src="/wp-content/uploads/2017/01/Dr.-Eckhard-Hitzer.jpg" alt="Dr. Eckhard Hitzer" width="200" height="160" /></a></strong></span></p>

                            </div>
                        </div>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> During the previous years, you've been following the developments in applied GA through your GA Updates blog. How do you see the current state of GA research? In what application areas do you expect the next developments will probably be?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<p>Geometric Algebra research is not only revolutionizing algorithm development in many fields (robotics, visualization, mapping, virtual reality, GIS, molecular dynamics, telecommunication, offshore mechatronics, 3D cadastres, navigation, &#8230;), it also begins to exhibit superior accuracy, stability, and speed, and is increasingly introduced in mainstream computing ecosystems.</p>
</div></div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> What types of problems, from your experience, can be handled with GA more effectively relative to classical techniques in neural computing and signal processing? What kinds of ideas can be investigated in these two areas using GA's powerful mathematics?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<p>In neural computing and signal processing, Geometric Algebra allows to generalize 1D and 2D algorithms seamlessly to higher dimensions with great advantages for electromagnetic signals, including light and color, and it fully captures, analyzes and reproduces complex high dimensional geometric relationships and topology. It begins to be used for technologies needed for autonomous driving, color face recognition, landmine detection, speech recognition, new forms of tomography, &#8230;</p>
</div></div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> If you are talking to a new post-graduate student and trying to explain the benefits of using GA in his future research activities, what would you tell him about GA? What pitfalls would you warn him not to get into? What expectations should he have related to the future of GA research?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<p>Be ready to unlearn often inefficient, inaccurate, unintuitive matrix methods and systems of linear equations. Instead learn to think and work directly in terms of geometric entities, their relations, transformations, and interactions, all efficiently and invariantly expressed directly by geometric algebra entities and their products. Resist the initial temptation to fall back into coordinate system component techniques, which hide geometric realities behind veils of stupendous numerical arrays. Expect to liberate your geometric intuition, and be able to work with an advanced single universal integrative mathematical system for whatever problem or task you may face in the future.</p>
</div></div>
<p>&nbsp;</p>
<div class="su-service"><div class="su-service-title" style="padding-left:46px;min-height:32px;line-height:32px"><i class="fa fa-comments-o" style="font-size:32px;color:#333"></i> How can the GA community gain more supporters and members in the near future? What kinds of events, funding proposals, online activities, etc. should the GA community focus on to attain this goal?</div><div class="su-service-content su-clearfix" style="padding-left:46px">
<p>Organizing sessions and workshops at major science and engineering conferences is a good way. International collaborative projects might be another. Submitting research papers to all types of science and engineering journals, when the applications topic permits that, rather than highly specialized journals. Preprints published ASAP on servers like vixra.org, preprint.org, etc. and open access, will also help. In addition, sharing lectures and software demos on YouTube will help interested students, professionals, and engineers to know about geometric algebra even outside formal educational and academic workshop settings.</p>
</div></div>
</div></div>
<p>The post <a rel="nofollow" href="/index.php/2017/01/17/ga-computer-science/">Geometric Algebra in Computer Science</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/2017/01/17/ga-computer-science/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Computing: Please, Mind Your Language!</title>
		<link>/index.php/2015/09/11/ga-computing1/</link>
		<comments>/index.php/2015/09/11/ga-computing1/#respond</comments>
		<pubDate>Fri, 11 Sep 2015 14:00:59 +0000</pubDate>
		<dc:creator><![CDATA[Ahmad Eid]]></dc:creator>
				<category><![CDATA[DSL]]></category>
		<category><![CDATA[Computing]]></category>

		<guid isPermaLink="false">http://gacomputing.info/?p=275</guid>
		<description><![CDATA[<p>Computing is done by programming computers, programming requires programming languages, and programming languages come in many forms and flavors. The creative process of software development, in general, is certainly related to language, thought, and imagination. For geometric modeling and geometric processing applications, the correct selection of a programming language is absolutely fundamental.</p>
<p>The post <a rel="nofollow" href="/index.php/2015/09/11/ga-computing1/">Computing: Please, Mind Your Language!</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></description>
				<content:encoded><![CDATA[<div class='dropshadowboxes-container ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-note" style="border-color:#e5e5e5;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#ffffff;border-color:#ffffff;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div id="attachment_643" style="width: 730px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/09/turing_23-big.jpg"><img class="size-large wp-image-643" src="/wp-content/uploads/2015/09/turing_23-big-772x1024.jpg" alt="turing_23-big" width="720" height="955" srcset="/wp-content/uploads/2015/09/turing_23-big-772x1024.jpg 772w, /wp-content/uploads/2015/09/turing_23-big-226x300.jpg 226w, /wp-content/uploads/2015/09/turing_23-big-768x1019.jpg 768w, /wp-content/uploads/2015/09/turing_23-big.jpg 795w" sizes="(max-width: 720px) 100vw, 720px" /></a><p class="wp-caption-text">A family of algorithmic pen plotted drawings, each presented with the binary text for a Universal Turing Machine (UTM), were created for an exhibition in Manchester on the occasion of the Ninth International Symposium on Electronic Art (1998). (<a href="http://digitalartmuseum.org/verostko/turing_23l.html">Source</a>)</p></div>
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>Language is a process of free creation; its laws and principles are fixed, but the manner in which the principles of generation are used is free and infinitely varied. Even the interpretation and use of words involves a process of free creation.</p>
<p style="text-align: right;"><em><strong>&#8212; Noam Chomsky</strong></em></p>
</blockquote>
</div>
</div></div>

                            </div>
                        </div>
<hr />
<h3>A Computational Universe</h3>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>I would suggest, merely as a metaphor here, but also as the basis for a scientific program to investigate the computational capacity of the universe, that this is also a reasonable explanation for why the universe is complex.</p>
<p style="text-align: right;"><em><strong>&#8212; Seth Lloyd</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<div id="attachment_672" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/09/neuron-galaxy_comparison_231214.jpg"><img class="size-medium wp-image-672" src="/wp-content/uploads/2015/09/neuron-galaxy_comparison_231214-300x206.jpg" alt="neuron-galaxy_comparison_231214" width="300" height="206" srcset="/wp-content/uploads/2015/09/neuron-galaxy_comparison_231214-300x206.jpg 300w, /wp-content/uploads/2015/09/neuron-galaxy_comparison_231214-768x527.jpg 768w, /wp-content/uploads/2015/09/neuron-galaxy_comparison_231214-1024x703.jpg 1024w, /wp-content/uploads/2015/09/neuron-galaxy_comparison_231214.jpg 1068w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">One way to understand our computational Universe. Both the brain and the Universe are huge networks that can process information</p></div>
</div>

                            </div>
                        </div>
<p>The brilliant German civil engineer <a href="https://en.wikipedia.org/wiki/Konrad_Zuse">Konrad Zuse</a> made a great practical achievement; his functional program-controlled Turing-complete Z3 became operational in May 1941. But his most brilliant conceptual achievement was in 1967 when Zuse suggested that the universe itself is running on a cellular automaton or similar computational structure; what we know now as <a href="https://en.wikipedia.org/wiki/Digital_physics">digital physics</a>. In 1969, he published the book &#8220;Calculating Space&#8221; challenging the long-held view that some physical laws are continuous by nature<sup class='endnote'><a href='#en-275-1' id='enref-275-1' onclick='return hhEndnotes_show(275)'>1</a></sup>. This idea has attracted a lot of attention, since there is no physical evidence against Zuse&#8217;s thesis, but practically isolated Zuse from the scientific community for a very long time. Later on, in their attempt to unify relativity with quantum mechanics, many physicists are realizing that information is more fundamental than space and time; that space-time might be emergent from information exchange and processing in our discrete computational universe.</p>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<div id="attachment_693" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/09/maxresdefault.jpg"><img class="size-medium wp-image-693" src="/wp-content/uploads/2015/09/maxresdefault-300x169.jpg" alt="maxresdefault" width="300" height="169" srcset="/wp-content/uploads/2015/09/maxresdefault-300x169.jpg 300w, /wp-content/uploads/2015/09/maxresdefault-768x432.jpg 768w, /wp-content/uploads/2015/09/maxresdefault-1024x576.jpg 1024w, /wp-content/uploads/2015/09/maxresdefault.jpg 1280w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Cellular and DNA biochemical reactions are computational in nature. See <a href="https://www.dnalc.org/resources/3d/">here</a> and <a href="https://www.youtube.com/watch?v=2KoLnIwoZKU&amp;list=PLD0D5F297744AD515">here</a> for more details</p></div>
</div>

                            </div>
                        </div>
<p>Information processing and computations are found everywhere in the natural world; inspiring us with many new computational paradigms every day. Information processing is found on the level of <a href="https://en.wikipedia.org/wiki/Quantum_information_science">quantum mechanics</a> and how elementary particles behave, in the miraculous way of <a href="https://en.wikipedia.org/wiki/DNA_computing">manufacturing protein from DNA</a>, in the way <a href="https://en.wikipedia.org/wiki/Swarm_intelligence">swarms of insects optimize</a> their search for food, and much more.</p>
<p>Information means distinctions between things. When we create abstractions we choose to ignore information about many distinct concrete objects in order to conceptually unify them into one abstraction. The level of abstraction depends on what information we decide to ignore and what we decide to keep. In physics, we need to investigate constraints and initial conditions, in the form of measurements, on the studied physical system by performing experiments as part of the information framework we deal with to arrive at accurate models. In computer science, we do not require any specific constraints or initial conditions in general; unless we are creating accurate physical simulations. We are much more free to investigate any computational universe we can imagine possible, as long as it can be computed in reasonable time-space constraints. The key concepts here are computational ideas and programming languages.</p>
<p>&nbsp;</p>
<h3>Language, Thought, and Imagination</h3>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>The moment of inspiration can come from memory, or language, or the imagination, or experience &#8211; anything that makes an impression forcibly enough for language to form.</p>
<p style="text-align: right;"><em><strong>&#8212; Carol Ann Duffy</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<div id="attachment_662" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/09/baby.computer.confused.site_.sized_.png"><img class="size-medium wp-image-662" src="/wp-content/uploads/2015/09/baby.computer.confused.site_.sized_-300x195.png" alt="baby.computer.confused.site_.sized_" width="300" height="195" srcset="/wp-content/uploads/2015/09/baby.computer.confused.site_.sized_-300x195.png 300w, /wp-content/uploads/2015/09/baby.computer.confused.site_.sized_-768x500.png 768w, /wp-content/uploads/2015/09/baby.computer.confused.site_.sized_.png 859w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">There are deep mutual influences between language and ideas (<a href="https://curatti.com/9-things-data-big-small/">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>Computing is done by programming computers, programming requires programming languages, and programming languages come in many forms and flavors. The creative process of software development, in general, is certainly related to language, thought, and imagination. For geometric modeling and geometric processing applications, the correct selection of a programming language is absolutely fundamental.</p>
<p>In the realm of philosophy of language, the &#8220;<a href="https://thephilosophyforum.com/discussion/90/ideational-theories-of-meaning/p1">ideational theory of meaning</a>&#8220;, originally developed by <a href="https://en.wikipedia.org/wiki/John_Locke">John Locke</a> in the 17th century, has 3 fundamental theses:</p>
<ol>
<li>That the primary end of language is the communication of thought.</li>
<li>That thinking at its most basic consists in &#8216;having ideas&#8217;; that is, thinking is fundamentally imaginative in nature.</li>
<li>That words acquire their power to express thoughts by being made, through custom and convention, to represent or signify &#8220;ideas&#8221; in the minds of those who use them.</li>
</ol>
<p>On some or many occasions we may &#8220;think in words&#8221;, but there is a fundamental level of thought at which it is not linguistic but imaginative in nature: a level at which we &#8220;think in ideas&#8221;. Speaking loosely, it might almost be said that imagination is a kind of surrogate perception; that to exercise one&#8217;s imagination is to rehearse or anticipate actually or possible episodes of perceptual experience, though with a degree of voluntary control that is characteristically absent from perception itself; in perception one can direct one&#8217;s attention at will, but has very little voluntary control over what is perceived once one&#8217;s attention has been fixed. Imagination, like perception, may be classified by reference to its sensory modes and thus we have visual, auditory and tactile imagination, just as we have these forms of perception. Unsurprisingly, there is neuropsychological and neurophysiological evidence that many of the same areas of the cortex are typically engaged in imagination as in perception. These observations may suffice to highlight the intimacy of the relation between the two<sup class='endnote'><a href='#en-275-2' id='enref-275-2' onclick='return hhEndnotes_show(275)'>2</a></sup>.</p>
<p>The way language can affect our thought process is not simple; there is always a two-way mutual influence between language and idea. <a href="https://www.linguisticsociety.org/content/does-language-i-speak-influence-way-i-think">Some say</a> that our language doesn&#8217;t force us to see only what it gives us words for, but it can affect how we put things into groups<sup class='endnote'><a href='#en-275-3' id='enref-275-3' onclick='return hhEndnotes_show(275)'>3</a></sup>. We learn to group things that are similar and give them the same label, but what counts as being similar enough to fall under a single label may vary from language to language. In other words, the influence of language isn&#8217;t so much on what we can think about, or even what we do think about, but rather on how we break up reality into categories and label them. And in this, our language and our thoughts are probably both greatly influenced by our culture. <a href="https://www.philosophytalk.org/blog/does-language-affect-thought">Others say</a> the language we speak broadly affects or even determines the way we experience the world, from the way we perceive it, to the way to categorize it, to the way we cognize it. There are definite differences in perception between people speaking different languages. Studies have shown that changing how people talk changes how they think. Research has been uncovering how language shapes even the most fundamental dimensions of human experience: space, time, causality and relationships to others<sup class='endnote'><a href='#en-275-4' id='enref-275-4' onclick='return hhEndnotes_show(275)'>4</a></sup>.</p>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<p><a href="/wp-content/uploads/2015/09/codeeval2014.png"><img class="size-medium wp-image-692 aligncenter" src="/wp-content/uploads/2015/09/codeeval2014-300x225.png" alt="codeeval2014" width="300" height="225" srcset="/wp-content/uploads/2015/09/codeeval2014-300x225.png 300w, /wp-content/uploads/2015/09/codeeval2014-768x576.png 768w, /wp-content/uploads/2015/09/codeeval2014.png 1000w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
</div>

                            </div>
                        </div>
<p>Computer languages are human in their expressive nature but computational in their intended function. This dual aspect of programming languages is, in my opinion, the main reason behind the rise and fall of many programming languages and code-development paradigms. No one today uses Assembly for developing complex software systems; while having a huge (theoretical) computational power, the &#8220;human side&#8221; of Assembly (readability, writability, maintainability, testability, etc.) is almost non-existent. Applying the ideational theory of meaning to computing, our ultimate goal is to create a computer that can directly understand our internal thoughts and ideas about what we need to compute; which is currently just a great plot for a science fiction story and no more. The next best thing is to create computational languages that we can express our ideas in the least effort and largest correspondence possible. Our general purpose programming languages, especially the object-oriented ones, go a long way to that goal, but we certainly can, and need, to do much more to get closer to &#8220;computing with ideas&#8221; rather than turning ourselves into imagination-free bio-computers.</p>
<p>&nbsp;</p>
<h3>Our Many Tongues</h3>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>I find languages that support just one programming paradigm constraining.</p>
<p style="text-align: right;"><em><strong>&#8212; Bjarne Stroustrup</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<div id="attachment_685" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/09/paradigmsDIAGRAMeng108_02.png"><img class="size-medium wp-image-685" src="/wp-content/uploads/2015/09/paradigmsDIAGRAMeng108_02-300x159.png" alt="paradigmsDIAGRAMeng108_02" width="300" height="159" srcset="/wp-content/uploads/2015/09/paradigmsDIAGRAMeng108_02-300x159.png 300w, /wp-content/uploads/2015/09/paradigmsDIAGRAMeng108_02-768x408.png 768w, /wp-content/uploads/2015/09/paradigmsDIAGRAMeng108_02-1024x544.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">A classification of the principal programming paradigms (<a href="https://www.info.ucl.ac.be/~pvr/paradigms.html">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>As a software developer, I realized early in my programming life that not all languages are created equal. It&#8217;s not just that different languages have different features, but the existence of profoundly distinct ways of thinking; we call them <a href="https://en.wikipedia.org/wiki/Comparison_of_multi-paradigm_programming_languages">Programming Paradigms</a>. Often to create a complex software system we need to use more than one paradigm for different parts of the system. As stated in an IEEE Software issue on multiparadigm programming<sup class='endnote'><a href='#en-275-5' id='enref-275-5' onclick='return hhEndnotes_show(275)'>5</a></sup>:</p>
<blockquote><p>But today’s applications are seldom homogeneous. They are frequently complex systems, made up of many subcomponents that require a mixture of technologies. Thus, using just one language technology and paradigm is becoming much less common, replaced by multiparadigm programming in which the heterogeneous application consists of several subcomponents, each implemented with an appropriate paradigm and able to communicate with other subcomponents implemented with a different paradigm. When more than one language is used, we call this polyglot (“many tongues”) programming.</p>
<p>Internet and intranet applications are inherently heterogeneous, often combining languages like JavaScript, Flash, and HTML in the user interface (UI), Java, C#, and Ruby in the middle tier, and SQL in the database. Not only are many languages involved, but there are also many paradigms, with SQL implementing the relational model, and object-oriented programming (OOP) dominating the middle and UI tiers. Even some “single-tier” desktop and server applications mix implementation languages, such as a fast, compiled “kernel” language for performance-sensitive components and a scripting language for integrating those components to create features, make extensibility easier, and so on.</p></blockquote>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<div id="attachment_702" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/09/expressiveness_by_iqr_weighted2.png"><img class="wp-image-702" src="/wp-content/uploads/2015/09/expressiveness_by_iqr_weighted2.png" alt="expressiveness_by_iqr_weighted2" width="300" height="104" srcset="/wp-content/uploads/2015/09/expressiveness_by_iqr_weighted2.png 1366w, /wp-content/uploads/2015/09/expressiveness_by_iqr_weighted2-300x104.png 300w, /wp-content/uploads/2015/09/expressiveness_by_iqr_weighted2-768x266.png 768w, /wp-content/uploads/2015/09/expressiveness_by_iqr_weighted2-1024x355.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Programming languages ranked by expressiveness (<a href="http://redmonk.com/dberkholz/2013/03/25/programming-languages-ranked-by-expressiveness/">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>Personally, I&#8217;ve been using several paradigms in my software. I started out using procedural (imperative) programming with VB and C, then I discovered object-oriented programming with C++, VB.NET, and C#, followed by relational SQL programming, some logic programming with Prolog in the AI course I teach, and finally some functional programming in F#. Each paradigm required a basically different way of thinking and expressing (coding). The controversy between language philosophers about how language affects ideas is settled for me; with each programming paradigm, my way of thinking about computation is indeed changed considerably. Apart from the technical advantage of integrating several paradigms, for a software engineer, it&#8217;s necessary to think and code in several paradigms to reach a good understanding of the concept computation in general. You may have a preferred paradigm in which you can think clearly and fluently, but only by learning other programming paradigms you would appreciate the universal generality and relevance of information and computing to our life in every aspect. This multi-paradigm insight also inspires very good ideas about explorations to the Computational Universe, the physical and the non-physical. The presence of so much programming paradigms strongly indicates the many dimensions of computing. Each computational field in physics, biology, engineering, and science will have its own method of thinking and &#8220;space of computational imagination&#8221;; rightfully requiring its own domain-specific language for expressing such ideas. Now the ability to compute is not just for computer scientists and software engineers, it should be a right for every researcher\practitioner in all fields of science; this is not the current state of matters as one might think.</p>
<p>&nbsp;</p>
<h3>Getting Lost in a Public Library</h3>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>Before software can be reusable it first has to be usable.</p>
<p style="text-align: right;"><em><strong>&#8212; Ralph Johnson</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<div id="attachment_708" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/09/OGLCS.jpg"><img class="size-medium wp-image-708" src="/wp-content/uploads/2015/09/OGLCS-300x169.jpg" alt="OGLCS" width="300" height="169" srcset="/wp-content/uploads/2015/09/OGLCS-300x169.jpg 300w, /wp-content/uploads/2015/09/OGLCS-768x432.jpg 768w, /wp-content/uploads/2015/09/OGLCS-1024x576.jpg 1024w, /wp-content/uploads/2015/09/OGLCS.jpg 1500w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Software libraries tend to grow complex rapidly; reducing the ability of non software-specialists to learn and use them efficiently in reasonable time. (<a href="https://www.anandtech.com/show/6134/khronos-announces-opengl-es-30-opengl-43-astc-texture-compression-clu/3">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>General purpose programming languages (GPLs) are great tools, we think they can be used to create any possible computation; but can they really be so? Assembly can also be used for general purpose programming, but very few use it nowadays. GPLs provide general computational abstractions easing the creation of software; abstractions like subroutines, classes, objects, numerical variables, iteration, and conditional branching. These are similar to well organized &#8220;building standards&#8221; for adding water pipes and electrical wiring inside buildings. These abstractions are not intended, or even well understood for that matter, for end users; they are made by software people to be used by software people. The problem a scientist faces in order to exercise his &#8220;right to compute&#8221; is that he has to spend a considerable time learning a complex low-level language like C++ to guarantee the efficiency of his computations and integration with other &#8220;reusable&#8221; software libraries. Now practitioners and researchers that are not software engineers have a limited set of options to practice their right for digital computation<sup class='endnote'><a href='#en-275-6' id='enref-275-6' onclick='return hhEndnotes_show(275)'>6</a></sup>:</p>
<ol>
<li>Take the difficult road to learning a GPL, while studying their original fields, and create private libraries for their domain based on their own methods of thinking; facing software horrors like memory management, numerical error control, and bug tracking on their own.</li>
<li>Come together and create super large libraries, with thousands or millions of lines of code, for their collective domain specific ideas. Then any newcomer to their field will have to learn not only the abstract concepts and practical techniques of their domain of knowledge but also the intricate behavior of the library in addition to the hosting GPL; things like general library and specific algorithm initialization, external I\O data types for data exchange, error reporting behavior, data reporting methods, and many more.</li>
<li>Use the programming skills of software engineers, that are not aware of their specific abstractions and domain of knowledge, to develop software systems usable through graphical user interfaces that may never cover all aspects of the computational tasks at hand, also requiring considerable learning efforts, and perhaps provide some API for integration with other libraries.</li>
</ol>
<p>Software libraries created with GPLs are inevitable, but their direct use by non-software specialists is not. Others have written excellent fast libraries that perform complex computational tasks for us. Like one interacts with the water pipes and electrical wiring at home through elegant simple to use interfaces, we must hide our libraries behind the simple to use interfaces; with abstractions relevant to our domains of abstractions not to general computing abstractions. Two approaches are used for such simpler programmable interfaces. The first is an architecture referred to as &#8220;components + scripts = applications&#8221;. It’s a &#8220;best of both worlds&#8221; solution, flexible and extensible, yet still providing high performance where necessary. The second is by using Domain Specific Languages (DSLs) that enable end-user programming in the most relevant and expressive way to his domain of ideas.</p>
<p>&nbsp;</p>
<h3>Joys of The Pythonistas</h3>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>Abstraction is one of those notions that Python tosses out the window, yet expresses very well.</p>
<p style="text-align: right;"><em><strong>&#8212; Gordon McMillan</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<div id="attachment_712" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/09/5-Best-Python-Libraries-For-Data-Science.png"><img class="size-medium wp-image-712" src="/wp-content/uploads/2015/09/5-Best-Python-Libraries-For-Data-Science-300x155.png" alt="5-Best-Python-Libraries-For-Data-Science" width="300" height="155" srcset="/wp-content/uploads/2015/09/5-Best-Python-Libraries-For-Data-Science-300x155.png 300w, /wp-content/uploads/2015/09/5-Best-Python-Libraries-For-Data-Science-768x398.png 768w, /wp-content/uploads/2015/09/5-Best-Python-Libraries-For-Data-Science.png 1000w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Python is the most successful programming language for dealing with the libraries problem (<a href="https://datafloq.com/read/5-best-python-libraries-for-data-science/994">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>Compared to computer scientists and software engineers, many scientists and engineers practice programming for half or more of their work time, they are usually self-taught programmers with not enough background or training in computer science. They tend to use inefficient programming practices, and often select the wrong programming languages for the task at hand. They usually try doing everything using a single GPL (C++, Fortran, C#, Java, &#8230;) that they invest large amounts of time trying to study. Scientific programming needs rapid prototyping (to explore the largest number of ideas in the smallest time possible), efficiency for computational kernels, the use of pre-written libraries and packages (for vectors, matrices, modeling, simulation, visualization, etc.), and extensibility through, for example, web front-ends and database back-ends. One solution that found great acceptance among these hard working knowledge seekers is called <a href="https://en.wikipedia.org/wiki/Python_(programming_language)">Python</a>. Python is <a href="https://www.python.org/about/success/">very successful</a> among scientists and engineers, among other disciplines. It&#8217;s a strongly but dynamically typed scripting GPL with strong object-oriented features. Python&#8217;s main strengths are being intuitive, readable, open source, free, with a large well supported, well documented scientific library. Its design is that of a small core language with a large standard library and an easily extensible interpreter.</p>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<div id="attachment_725" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/09/ndepend-optimization-graph.png"><img class="size-medium wp-image-725" src="/wp-content/uploads/2015/09/ndepend-optimization-graph-300x120.png" alt="ndepend-optimization-graph" width="300" height="120" srcset="/wp-content/uploads/2015/09/ndepend-optimization-graph-300x120.png 300w, /wp-content/uploads/2015/09/ndepend-optimization-graph.png 600w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Many code slow-downs are due to bad design, rather than specific language use. (<a href="http://codebetter.com/patricksmacchia/2008/12/01/lessons-learned-from-a-real-world-focus-on-performance/">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>Many computer folks would say Python is too slow compared to Fortran or C++; generally speaking, they are right. Native Python code may execute 10 times slower than C++ or Fortran. But at the same time, Python code is 10 times faster to write than C++ and Fortran; its compactness may give additional time savings during bug tracking and maintenance. For the world of scientific computation, many slow-downs are due to algorithmic complexity; a researcher friend once told me he made a modification to an algorithm that made it&#8217;s Matlab implementation several times faster than its C++ implementation. The remaining performance-critical code can always be factored out into fast libraries in Fortran or C++ and called directly from the main clear and easy to maintain &#8220;gluing code&#8221; created with Python. The overall economic saving is not a trivial thing; when Fortran was invented computer time was much more expensive than programmer time, in the 1990&#8217;s <a href="https://blog.codinghorror.com/hardware-is-cheap-programmers-are-expensive/">that situation reversed</a> and now many consider ease of programming much important than the cost of hardware for many applications. Not realizing these facts is a serious problem with many computational systems. As <a href="https://en.wikipedia.org/wiki/William_Wulf">William Allan Wulf</a> said:</p>
<blockquote><p>More computing sins are committed in the name of efficiency (without necessarily achieving it) than for any other single reason &#8211; including blind stupidity.</p></blockquote>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<div id="attachment_715" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/09/numpy.png"><img class="wp-image-715" src="/wp-content/uploads/2015/09/numpy.png" alt="numpy" width="300" height="206" srcset="/wp-content/uploads/2015/09/numpy.png 774w, /wp-content/uploads/2015/09/numpy-300x206.png 300w, /wp-content/uploads/2015/09/numpy-768x528.png 768w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Python&#8217;s most important library is NumPy, many other libraries are based on it. (<a href="https://www.slideshare.net/pythoncharmers/python-for-science-and-engineering-a-presentation-to-astar-and-the-singapore-computational-sciences-club-edward-schofield-june-2011">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>Python is good for rapid prototyping, plotting and visualization, numerical computing, web and database programming, and the creation of all-purpose glue code; it&#8217;s ideal for scientific computing investigations. Like Matlab, Python is interpreted with powerful I/O and plotting capabilities; Python is better as a more powerful GPL while being free, open source software, Matlab certainly costs much. Compared to C++, python has a superior scientific oriented standard library while being much easier to learn, write, and maintain; it can still inter-operate with existing C and C++ libraries easily. Like C# and Java, Python is a well-designed language while being much simpler to use. But the static typing capabilities of Java and C# make Python less attractive for many software developers; static typing catches many logical errors at design time. Some of the widely used libraries for Python include <a href="http://www.numpy.org/">NumPy</a>, <a href="https://www.scipy.org/">SciPy</a>, <a href="http://matplotlib.org/">Matplotlib</a>, <a href="http://mayavi.sourceforge.net/">Mayavi</a>, <a href="http://www.sympy.org/en/index.html">SymPy</a> (that includes <a href="http://docs.sympy.org/0.7.3/modules/galgebra/GA.html">a module</a> for symbolic Geometric Algebra),  <a href="http://vpython.org/">VPython</a>, and <a href="http://ipython.org/">IPython</a>. Python has been awarded a TIOBE Programming Language of the Year award twice (in 2007 and 2010), which is given to the language with the greatest growth in popularity over the course of a year, as measured by the <a href="https://www.tiobe.com/tiobe-index//">TIOBE index</a>. The design of Python has <a href="https://en.wikipedia.org/wiki/Python_(programming_language)#Languages_influenced_by_Python">influenced</a> many following programming languages.</p>
<p>&nbsp;</p>
<h3>Changing Computational Orientations</h3>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>I would guess that the decision to create a small special purpose language or use an existing general purpose language is one of the toughest decisions that anyone facing the need for a new language must make.</p>
<p style="text-align: right;"><em><strong>&#8212; Guido van Rossum</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<div id="attachment_628" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/lop.png"><img class="size-medium wp-image-628" src="/wp-content/uploads/2015/08/lop-300x218.png" alt="lop" width="300" height="218" srcset="/wp-content/uploads/2015/08/lop-300x218.png 300w, /wp-content/uploads/2015/08/lop.png 696w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">General Purpose vs Domain-Specific Program Development (<a href="http://www.onboard.jetbrains.com/is1/articles/04/10/lop/mps.pdf">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>The scripting architecture of Python is great, but it suffers from the same basic abstraction problem as GPLs do. Each scientific and engineering field has its own set of common abstractions. For example, the same linear mathematical models can be used for many systems in electrical, mechanical, fluid, and construction engineering but each field defines its own language, including what ideas to group together and what ideas to ignore, for information exchange and computation. The computational base may be generally the same but the abstraction interface is quite distinct between those fields; this is where Domain Specific Languages shine. DSLs can be used to solve the computational form of the famous &#8220;last mile&#8221; problem in <a href="https://en.wikipedia.org/wiki/Last_mile">communications</a> and <a href="https://en.wikipedia.org/wiki/Last_mile_(transportation)">transportation</a>; where the things to be communicated or transported are computational ideas between domain-compatible recipients.</p>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<div id="attachment_742" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/09/gpl-vs-dsl.png"><img class="size-medium wp-image-742" src="/wp-content/uploads/2015/09/gpl-vs-dsl-300x226.png" alt="gpl-vs-dsl" width="300" height="226" srcset="/wp-content/uploads/2015/09/gpl-vs-dsl-300x226.png 300w, /wp-content/uploads/2015/09/gpl-vs-dsl.png 730w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Features of GPLs and DSLs (<a href="http://www.voelter.de/dslbook/markusvoelter-dslengineering-design-slides-1.0.pdf">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>When trying to find discriminating definitions for GPLs and DSLs you may get surprised to find more &#8220;statements of impression&#8221; than solid consistent definitions. The distinction between DSLs and GPLs is not sharp but rather gradual<sup class='endnote'><a href='#en-275-7' id='enref-275-7' onclick='return hhEndnotes_show(275)'>7</a></sup>. Many GPLs started out as DSLs and then gained enough popularity to be called general purpose. When searching for features that make a language labeled domain specific, you find the general idea going around DSLs being ad hoc, custom made, non-general, having limited expressiveness, often leading to <a href="https://en.wikipedia.org/wiki/Domain-specific_multimodeling#Coordination_problem">language cacophony</a>, requiring much training, less technically supported, and having a small user base. The reason behind such impressions is the absence of the following points from the minds of many:</p>
<ul>
<li>All computer languages are initially ad hoc. No single language, GPL or DSL, can serve as a general solution for expressing all computational ideas. This fact is manifested in the <a href="https://en.wikipedia.org/wiki/List_of_programming_languages_by_type">many languages</a> out there each having strengths and weaknesses depending on the way of intended use.</li>
<li>Generality is a blurry feature of many computer languages. Any <a href="https://en.wikipedia.org/wiki/Turing_completeness">Turing-complete</a> language can be, theoretically, used as a general-purpose programming language. The main reason that GPLs are called general is that many people from many diverse domains use them. The fact is that GPLs are actually based on computer science types of abstractions; they are domain specific where the domain is computer science or one of its sub-domains (a.k.a. programming paradigms). Computer science is, in effect, forcing its abstractions and languages on all other fields for historical reasons.</li>
<li>As Martin Fowler <a href="https://martinfowler.com/bliki/DslQandA.html">states clearly</a>, we already have a cacophony of frameworks that programmers have to learn. That&#8217;s the inevitable consequence of reusable software, which is the only way we can get a handle on all the things software has to do these days. In essence, a DSL is nothing more than a fancy facade over a framework. As a result, they contribute little complexity over what is already there. Indeed a good DSL should make things better by making these frameworks easier to use. The same logic applies to training where training on a DSL is much easier than training on its base library or framework.</li>
<li>Many DSLs are generally much simpler than GPLs specifically because they serve a smaller number of very specialized people. A good architecture should be a well-supported library or framework with a large user base on which we develop several simple DSLs for several domains. The complexity should be mostly in the library while the interface should remain simple; just like the interfaces we use at home for devices and water supplies.</li>
</ul>
<p>The actual difficulty facing DSLs is their design and implementation process; the term <a href="http://www.onboard.jetbrains.com/articles/04/10/lop/">Language Oriented Programming</a> was created for this purpose. Designing a good usable DSL is relatively complex, it&#8217;s not for the average programmer; it requires good experience not just with the domain of the DSL but in computer language design in general. A good DSL designer will conform to some set of general <a href="https://arxiv.org/abs/1409.2378">guidelines</a> that are useful for such task. For a software engineer like me, I found great joys and gained valuable experience, similar to what Walter Bright&#8217;s expressed in <a href="http://www.drdobbs.com/architecture-and-design/so-you-want-to-write-your-own-language/240165488">his article here</a> when designing my first DSL for geometric algebra modeling: GMacDSL. I was originally &#8220;object-oriented&#8221; but now I&#8217;m &#8220;language oriented&#8221;. Instead of thinking about complex problems as a set of interacting objects of some classes, I can now imagine the problem as a set of domain entities or components that can be organized using a language for performing the desired computation. Changing one&#8217;s &#8220;computational orientation&#8221; is not an easy process but it is definitely rewarding; instead of thinking in objects or procedures like a computer does, I now think in the language of geometric modeling computations like normal humans often do. As Sergey Demitriev says in <a href="http://www.onboard.jetbrains.com/is1/articles/04/10/lop/mps.pdf">his article</a> &#8220;Language Oriented Programming: The Next Programming Paradigm&#8221;:</p>
<blockquote><p>Today&#8217;s mainstream approach to programming has some crucial built-in assumptions which hold us back like chains around our necks, though most programmers don&#8217;t realize this. With all the progress made so far in programming, we are still in the Stone Age. We&#8217;ve got our trusty stone axe (object-oriented programming), which serves us well, but tends to chip and crack when used against the hardest problems. To advance beyond stone, we must tame fire. Only then can we forge new tools and spark a new age of invention and an explosion of new technologies. I&#8217;m talking about limitations of programming which force the programmer to think like the computer rather than having the computer think more like the programmer.</p></blockquote>
<hr />
<p>&nbsp;</p>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<p style="text-align: center;"><span style="font-size: 28px; font-family: 'Traditional Arabic';"><strong>تم بحمد الله الجمعة 27 ذو القعدة 1436هـ</strong></span></p>
</div>
</div></div>
<hr />
<p>&nbsp;</p>
<div class='endnotes' id='hhendnotes-275'>
<ol>
<li id='en-275-1'>In the book &#8220;Science and Ultimate Reality&#8221; about <a href="https://en.wikipedia.org/wiki/John_Archibald_Wheeler">John Archibald Wheeler</a>, it&#8217;s stated that:<br />
<blockquote><p>Some even go so far as to claim that the universe is a gigantic computer. The sociology underlying this line of thinking is interesting. There is a popular conception that science drives technology rather than the other way about, but a study of history suggests a more subtle interplay. There has always been a temptation to use the pinnacle of contemporary technology as a metaphor for nature. In ancient Greece, the ruler and compass, and musical instruments, were the latest technological marvels. The Greeks built an entire world view based on geometry and harmony, from the music of the spheres to the mystical properties associated with certain geometrical shapes. Centuries later, in Renaissance Europe, the clock represented the finest in craftsmanship, and Newton constructed his theory of the clockwork universe by analogy. Then in the nineteenth century the steam engine impressed everybody, and lo and behold, physicists began talking about the universe as a thermodynamic system sliding toward a final heat death. In recent times the digital computer has served as a seductive metaphor for nature. Rather than thinking of the universe as matter in motion, one could regard it as information being processed.</p></blockquote>
<p>Physicists even computed how much information is possible to exist in any volume of space in the universe. See these two lectures for more details: &#8220;<a href="https://www.youtube.com/watch?v=PKkiy24LqBQ">Rebooting The Cosmos: Is the Universe The Ultimate Computer?</a>&#8221; and &#8220;<a href="https://www.youtube.com/watch?v=NsbZT9bJ1s4&amp;feature=iv&amp;src_vid=PKkiy24LqBQ&amp;annotation_id=annotation_3629920323">A Thin Sheet of Reality: The Universe as a Hologram</a>&#8220;. <span class='endnotereverse'><a href='#enref-275-1'>&#8617;</a></span></li>
<li id='en-275-2'>E.J.Lowe, &#8220;Subjects of Experience&#8221;. Cambridge University Press 2006 <span class='endnotereverse'><a href='#enref-275-2'>&#8617;</a></span></li>
<li id='en-275-3'>One of the jobs of a child learning language is to figure out which things are called by the same word. After learning that the family&#8217;s St. Bernard is a dog, the child may see a cow and say dog, thinking that the two things count as the same. Or the child may not realize that the neighbor&#8217;s chihuahua also counts as a dog. The child has to learn what range of objects is covered by the word &#8220;dog&#8221;. <span class='endnotereverse'><a href='#enref-275-3'>&#8617;</a></span></li>
<li id='en-275-4'>Lera Boroditsky, &#8220;<a href="http://www.gwashingtonhs.org/ourpages/auto/2013/10/23/68598699/sci-am-2011.pdf">How Language Shapes Thought</a>&#8220;. Scientific American, February 2011 <span class='endnotereverse'><a href='#enref-275-4'>&#8617;</a></span></li>
<li id='en-275-5'>D. Wampler, T. Clark, &#8220;Guest Editors&#8217; Introduction: Multiparadigm Programming&#8221;. IEEE Software, Issue 5 September/October 2010 <span class='endnotereverse'><a href='#enref-275-5'>&#8617;</a></span></li>
<li id='en-275-6'>Here is one typical example in <a href="https://www.python.org/about/success/astra/">computational chemistry</a> <span class='endnotereverse'><a href='#enref-275-6'>&#8617;</a></span></li>
<li id='en-275-7'>Markus Voelter, &#8220;DSL Engineering: Designing, Implementing and Using Domain-Specific Languages&#8221;. CreateSpace Independent Publishing Platform 2013, <a href="http://dslbook.org/">available online</a> <span class='endnotereverse'><a href='#enref-275-7'>&#8617;</a></span></li>
</ol>
</div>
<p>The post <a rel="nofollow" href="/index.php/2015/09/11/ga-computing1/">Computing: Please, Mind Your Language!</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/2015/09/11/ga-computing1/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>A Functional History of Numbers (3 of 3)</title>
		<link>/index.php/2015/08/14/history-of-numbers3/</link>
		<comments>/index.php/2015/08/14/history-of-numbers3/#respond</comments>
		<pubDate>Fri, 14 Aug 2015 14:00:55 +0000</pubDate>
		<dc:creator><![CDATA[Ahmad Eid]]></dc:creator>
				<category><![CDATA[GA History]]></category>
		<category><![CDATA[Algebra]]></category>
		<category><![CDATA[Computing]]></category>
		<category><![CDATA[History]]></category>
		<category><![CDATA[Numbers]]></category>

		<guid isPermaLink="false">http://gacomputing.info/?p=395</guid>
		<description><![CDATA[<p>There are 3 kinds of science: the experimental, the theoretical, and the simulated. The third kind of scientific activity only appeared recently, about 75 years ago, when the first electronic computers were made; effectively creating the "human computational universe" and upgrading our scientific methods to a whole new level. The idea of this third kind of science is to computationally and visually investigate our theoretical mathematical models encoded as computer programs executed on various sets of inputs to get new patterns, ideas, and "virtual" discoveries that can be verified experimentally later or at least may provide grounds for new abstractions, theories, and practical applications. This third kind of science, the science and art of computer simulations, is now unavoidable in all scientific research and education activities. All this is made possible by using only the two numbers 1 and 0; a.k.a True and False.<br />
After our journey with classic numbers in part one and geometric numbers in part two, in this final part of our functional history of numbers, we will take a look at a third kind of numbers: the computational numbers.</p>
<p>The post <a rel="nofollow" href="/index.php/2015/08/14/history-of-numbers3/">A Functional History of Numbers (3 of 3)</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></description>
				<content:encoded><![CDATA[<div class='dropshadowboxes-container ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-note" style="border-color:#e5e5e5;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#ffffff;border-color:#ffffff;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_396" style="width: 730px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/Solenoid-large.jpg"><img class="wp-image-396 size-large" src="/wp-content/uploads/2015/08/Solenoid-large-1024x768.jpg" alt="Solenoid-large" width="720" height="540" srcset="/wp-content/uploads/2015/08/Solenoid-large.jpg 1024w, /wp-content/uploads/2015/08/Solenoid-large-300x225.jpg 300w, /wp-content/uploads/2015/08/Solenoid-large-768x576.jpg 768w" sizes="(max-width: 720px) 100vw, 720px" /></a><p class="wp-caption-text">Magnetic Field Simulation. (<a href="https://nylander.wordpress.com/2006/05/17/magnetic-field-of-a-solenoid/">Source</a>)</p></div>
</div>
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>Science is what we understand well enough to explain to a computer. Art is everything else we do.</p>
<p style="text-align: right;"><em><strong>&#8212; Donald Knuth</strong></em></p>
</blockquote>
</div>
</div></div>

                            </div>
                        </div>
<hr />
<span class="dropcap">T</span>here are 3 kinds of science: the experimental, the theoretical, and the simulated<sup class='endnote'><a href='#en-395-1' id='enref-395-1' onclick='return hhEndnotes_show(395)'>1</a></sup>. Over the whole history of human discovery experimental scientific activities guided, and in many times surprised, the human imagination&#8217;s search to understand and control the observable universe. After sometime human knowledge seekers used the language of mathematics to create simplified, consistent theoretical models for the complex data and patterns they experimentally observe; abstractions were now put on paper. The third kind of scientific activity only appeared recently, about 75 years ago, when the first electronic computers were made; effectively creating the &#8220;human computational universe&#8221; and upgrading our scientific methods to a whole new level. The idea of this third kind of science is to computationally and visually investigate our theoretical mathematical models encoded as computer programs executed on various sets of inputs to get new patterns, ideas, and &#8220;virtual&#8221; discoveries that can be verified experimentally later or at least may provide grounds for new abstractions, theories, and practical applications. This third kind of science, the science and art of computer simulations, is now unavoidable in all scientific research and education activities. All this is made possible by using only the two numbers <strong>1</strong> and <strong>0;</strong> a.k.a <strong>True</strong> and <strong>False</strong>.</p>
<p>After our journey with classic numbers in <a href="/index.php/2015/07/24/history-of-numbers1/">part one</a> and geometric numbers in <a href="/index.php/2015/08/07/history-of-numbers2/">part two</a>, in this final part of our functional history of numbers, we will take a look at a third kind of numbers: the computational numbers.</p>
<hr />
<h3>True or False: From Laws of Thought to Switching Algebra</h3>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>It appeared to me that, although Logic might be viewed with reference to the idea of quantity, it had also another and a deeper system of relations. If it was lawful to regard it from without, as connecting itself through the medium of Number with the intuitions of Space and Time, it was lawful also to regard it from within, as based upon facts of another order which have their abode in the constitution of the Mind.</p>
<p style="text-align: right;"><em><strong>&#8212; George Boole, The Mathematical Analysis of Logic</strong></em></p>
</blockquote>
</div>
</div></div>
<p><a href="https://plato.stanford.edu/entries/boole/">George Boole</a>, famous for his knowledge, kindness, and total lack of egoism was an English mathematician who died from bad cold, at the age of 49, resulting from walking from his house to his College under heavy rain and lecturing in wet clothes. Boole&#8217;s greatest achievement was to create an algebra of logic: <a href="https://en.wikipedia.org/wiki/Boolean_algebra_(structure)">Boolean algebra</a>. Boole had minimal formal education due to the poverty of his family. His fellow students considered him to be something of a genius. His early training in languages<sup class='endnote'><a href='#en-395-2' id='enref-395-2' onclick='return hhEndnotes_show(395)'>2</a></sup> had its share among the inﬂuences which led to the construction of Boole’s logic: he built his logic in the same way he felt languages were built<sup class='endnote'><a href='#en-395-3' id='enref-395-3' onclick='return hhEndnotes_show(395)'>3</a></sup>. Boole’s thinking may have been spurred on by a heated controversy raging at the time between two formidable academics working in this area<sup class='endnote'><a href='#en-395-4' id='enref-395-4' onclick='return hhEndnotes_show(395)'>4</a></sup>. They were the British mathematician and logician Augustus De Morgan and the Scottish philosopher and metaphysician Sir William Hamilton; the creator of quaternions. Boole came up with an ingenious formulation that synthesized the approaches of both De Morgan and Hamilton. Indeed De Morgan praised Boole’s work on logic saying:</p>
<blockquote><p>Boole&#8217;s system of logic is but one of many proofs of genius and patience combined &#8230; That the symbolic processes of algebra, invented as tools of numerical calculation, should be competent to express every act of thought, and to furnish the grammar and dictionary of an all-containing system of logic, would not have been believed until it was proved<sup class='endnote'><a href='#en-395-5' id='enref-395-5' onclick='return hhEndnotes_show(395)'>5</a></sup>.</p></blockquote>
<p>Boole discussed, in the Introduction to his book &#8220;The Mathematical Analysis of Logic&#8221;, the issue of the relevance of symbols in scientiﬁc expositions. His aim was probably to correct Hamilton’s opinion that the symbolization of mathematics could lead to the destruction of the reﬂective powers of students of that discipline. He contended that if symbols are used with full understanding of the laws which render them useful, “an intellectual discipline of high order is provided”. In 1854 Boole published his book &#8220;<a href="https://en.wikipedia.org/wiki/The_Laws_of_Thought">The Laws of Thought</a>&#8220;. Boole’s goals were “to go under, over, and beyond” Aristotle’s logic by providing it with mathematical foundations involving equations; extending the class of problems it could treat from assessing validity to solving equations, and expanding the range of applications it could handle (e.g. from propositions having only two terms to those having arbitrarily many).</p>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_496" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/Baops.png"><img class="wp-image-496" src="/wp-content/uploads/2015/08/Baops.png" alt="Baops" width="300" height="226" srcset="/wp-content/uploads/2015/08/Baops.png 787w, /wp-content/uploads/2015/08/Baops-300x226.png 300w, /wp-content/uploads/2015/08/Baops-768x579.png 768w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Switching Algebra by Shannon is based on Boolean Algebra (<a href="https://en.wikibooks.org/wiki/Digital_Circuits/Logic_Operations">Source</a>)</p></div>
<p>&nbsp;</p>
</div>

                            </div>
                        </div>
<p><a href="https://en.wikipedia.org/wiki/George_Boole#20th-century_development">Boole&#8217;s work</a> and that of later logicians initially appeared to have no engineering uses. <a href="https://en.wikipedia.org/wiki/Claude_Shannon">Claude Shannon</a> attended a philosophy class at the University of Michigan which introduced him to Boole&#8217;s studies. Shannon recognized that Boole&#8217;s work could form the basis of mechanisms and processes in the real world and that it was therefore highly relevant. In 1937 Shannon went on to write his <a href="http://dspace.mit.edu/handle/1721.1/11173">master&#8217;s thesis</a>:&#8221;A symbolic analysis of relay and switching circuits&#8221;, at the Massachusetts Institute of Technology, in which he showed how Boolean algebra could optimize the design of systems of electromechanical relays then used in telephone routing switches. He also proved that circuits with relays could solve Boolean algebra problems; a great milestone in the development of Switching Theory. Andrew Emerson in an <a href="https://www.theguardian.com/science/2001/mar/08/obituaries.news">article</a> in The Guardian states:</p>
<blockquote><p>That dissertation has since been hailed as one of the most significant master&#8217;s theses of the 20th century. To all intents and purposes, its use of binary code and Boolean algebra paved the way for the digital circuitry that is crucial to the operation of modern computers and telecommunications equipment.</p></blockquote>
<p>Employing the properties of electrical switches to process logic is the basic concept that underlies all modern electronic digital computers. Victor Shestakov at Moscow State University proposed a theory of electric switches based on Boolean logic even earlier than Claude Shannon in 1935. But the first publication of Shestakov&#8217;s result took place only in 1941 in Russian<sup class='endnote'><a href='#en-395-6' id='enref-395-6' onclick='return hhEndnotes_show(395)'>6</a></sup>. Hence Boolean algebra became the foundation of practical digital circuit design; and Boole, via Shannon and Shestakov, provided the theoretical grounding for the Digital Age.</p>
<h3>The Three of Balance</h3>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>Perhaps the prettiest number system of all, is the balanced ternary notation &#8230; and perhaps the symmetric properties and simple arithmetic of this number system will prove to be quite important someday; when the &#8220;flip-flop&#8221; is replaced by a &#8220;flip-flap-flop&#8221;.</p>
<p style="text-align: right;"><em><strong>&#8212; Donald E. Knuth, The Art of Computer Programming Volume 2</strong></em></p>
</blockquote>
</div>
</div></div>
<p>The reason behind the exclusive use of binary numbers in computing is purely physical as the electronic transistors of computers only have 2 stable states. All computer applications require testing conditions and taking actions accordingly through the ubiquitous If-Then statement. Life isn&#8217;t binary, though; you must occasionally say &#8220;I don&#8217;t know the answer&#8221; to be human. We actually need at least 3 states for our decision-making models: True, False, and Unknown. The <a href="https://en.wikipedia.org/wiki/Null_(SQL)">symbol &#8220;NULL&#8221;</a> in modern database management systems is one shining example of needing the unknown in modern computing.</p>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_486" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/Bachet-weight-problem.png"><img class="size-medium wp-image-486" src="/wp-content/uploads/2015/08/Bachet-weight-problem-300x131.png" alt="Bachet-weight-problem" width="300" height="131" srcset="/wp-content/uploads/2015/08/Bachet-weight-problem-300x131.png 300w, /wp-content/uploads/2015/08/Bachet-weight-problem-768x335.png 768w, /wp-content/uploads/2015/08/Bachet-weight-problem.png 902w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Bachet&#8217;s Problem: as few weights to weigh them all (<a href="https://arxiv.org/abs/1010.5486">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>Mathematically, a <a href="https://en.wikipedia.org/wiki/Ternary_computer">ternary</a> (i.e. base 3) number system is more efficient than a binary system in many ways; it offers <a href="http://bit-player.org/wp-content/extras/bph-publications/AmSci-2001-11-Hayes-ternary.pdf">the most economical way</a> of representing integers among all number systems. A <a href="https://en.wikipedia.org/wiki/Balanced_ternary">balanced ternary</a> number system is based on the numbers (-1, 0, and 1) instead of (0, 1, and 2). This number system first appeared in the 18th century and was used for solving the Bachet’s Weights Problem attributed to Bachet in the early 17th century, but actually dating back all the way to Fibonacci or earlier<sup class='endnote'><a href='#en-395-7' id='enref-395-7' onclick='return hhEndnotes_show(395)'>7</a></sup>, as one of the first problems of integer partitions:</p>
<blockquote><p>What is the least number of pound weights that can be used on a scale pan to weigh any integral number of pounds from 1 to 40 inclusive, if the weights can be placed in either of the scale pans?</p></blockquote>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_380" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/fowlerdiagram.jpg"><img class="size-medium wp-image-380" src="/wp-content/uploads/2015/08/fowlerdiagram-300x150.jpg" alt="A model of the ternary calculating machine of Thomas Fowler" width="300" height="150" srcset="/wp-content/uploads/2015/08/fowlerdiagram-300x150.jpg 300w, /wp-content/uploads/2015/08/fowlerdiagram.jpg 621w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">A model of the ternary calculating machine of Thomas Fowler. See <a href="http://www.mortati.com/glusker/fowler/about.htm">here</a> for more details.</p></div>
</div>

                            </div>
                        </div>
<p>The first true appearance of “pure” balanced ternary notation was in an article by Léon Lalanne in 1840, who was a designer of mechanical devices for arithmetic. <a href="http://www.mortati.com/glusker/fowler/fowlerbio.htm">Thomas Fowler</a> independently invented and constructed a balanced ternary calculator at about the same time. The balanced ternary number system was mentioned only rarely for the next 100 years, until the development of the first electronic computers at the Moore School of Electrical Engineering in 1945–1946; at that time it was given serious consideration as a possible replacement for the decimal system. The complexity of arithmetic circuitry for balanced ternary arithmetic is not much greater than it is for the binary system, and a given number requires only 63% as many digit positions for its representation<sup class='endnote'><a href='#en-395-8' id='enref-395-8' onclick='return hhEndnotes_show(395)'>8</a></sup>. An implementation of this uncommonly used but beautiful symmetric number system in several computer languages can be found in <a href="http://rosettacode.org/wiki/Balanced_ternary">this Rosetta Code article</a>. A Demonstration of the weighting problem can be found in <a href="http://demonstrations.wolfram.com/BalancedTernaryNotation/">this Wolfram demonstration</a>.</p>
<p>Perhaps someday ternary computers would replace our binary ones as described by Douglas W. Jones who wrote <a href="http://homepage.cs.uiowa.edu/~jones/ternary/">The Ternary Manifesto</a>. Some researchers even began to suggest hardware implementations of this number system; for example, a system based on the <a href="http://ieeexplore.ieee.org/document/679270/?reload=true&amp;arnumber=679270">Josephson junction</a>, and another system based on a <a href="http://iopscience.iop.org/article/10.1238/Physica.Topical.118a00098/meta;jsessionid=70C4C8ABF84CB6757494D0680027D880.c5.iopscience.cld.iop.org">ternary optical computer architecture</a>. Maybe we will see the &#8220;flip-flap-flop&#8221; in the near future after all.</p>
<p>&nbsp;</p>
<h3>The Curious Case of Floating Points</h3>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>There are 10 types of people in this world: those who understand binary and those who don&#8217;t.</p>
<p style="text-align: right;"><em><strong>&#8212; Author Unknown</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_478" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/IEEE-754-ENGLISH.jpg"><img class="size-medium wp-image-478" src="/wp-content/uploads/2015/08/IEEE-754-ENGLISH-300x120.jpg" alt="IEEE-754-ENGLISH" width="300" height="120" srcset="/wp-content/uploads/2015/08/IEEE-754-ENGLISH-300x120.jpg 300w, /wp-content/uploads/2015/08/IEEE-754-ENGLISH-768x306.jpg 768w, /wp-content/uploads/2015/08/IEEE-754-ENGLISH-1024x408.jpg 1024w, /wp-content/uploads/2015/08/IEEE-754-ENGLISH.jpg 1586w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">The IEEE-754 Standard for Floating-Point Numbers (<a href="http://www.puntoflotante.net/FLOATING-POINT-FORMAT-IEEE-754.htm">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>All the geometric number systems we talked about earlier (the complex numbers, quaternions, vectors, and multivectors) can be represented inside a computer as data structures consisting of real number components. The problem is that most real numbers are impossible to accurately represent inside our computationally limited space, in time and storage, so we have to approximate. The <a href="https://en.wikipedia.org/wiki/Floating_point">floating-point numbers</a> are the standard system for storing and manipulating approximations of real numbers in modern computers. The dedicated circuitry inside computers ensure fast floating-point based computations; some even rely on the GPU for <a href="http://gpgpu.org/">accelerating parallel computations</a>. As useful as they are, floating-point numbers have many <a href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html">bad mathematical properties</a>:</p>
<ul>
<li>They are only a subset of rational numbers; all irrationals are impossible to represent as they have infinite decimals.</li>
<li>Many common rational decimal numbers we intuitively use can only be represented in binary as recurring decimals. For example, the number (0.1) in decimal is (0.0 0011 0011 0011 0011 0011 &#8230;) in binary; leading also to an approximate representation for such simple decimals!</li>
<li>Floating point numbers are not closed under any of the basic operations of addition, subtraction, multiplication or division; a numerical recipe for computational disaster under chaos theory!</li>
<li>They don&#8217;t obey the important property of associativity: a+(b+c) is not always equal to (a+b)+c for floating point numbers a,b,c. The same problem is present in associativity of multiplication and distributivity of multiplication over addition.</li>
<li>They are not uniformly distributed on the real number line. This is a serious problem for geometric modeling applications; applying a transformation on an object near the origin is different than applying the same transformation to the same object far from the origin.</li>
<li>They have a limited range, accuracy, and precision for many practical applications.</li>
<li>Two floating-point numbers in different format must be scaled before being added together. In other words, the binary points must be aligned before the addition can be performed resulting in possible loss of accuracy.</li>
<li>Because of all of the above, equality and ordering tests are sometimes problematic; we must use tolerances and intervals instead of direct equality tests in many applications.</li>
</ul>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_3878" style="width: 510px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/Double-Pendulum.gif"><img class="wp-image-3878 size-full" src="/wp-content/uploads/2015/08/Double-Pendulum.gif" alt="Double Pendulum" width="500" height="171" /></a><p class="wp-caption-text">If not careful, floating point errors combined with <a href="https://en.wikipedia.org/wiki/Chaos_theory" target="_blank" rel="noopener">chaos theory</a> can destroy simulation results.</p></div>
</div>

                            </div>
                        </div>
<p>All these problems make direct implementation of mathematical models difficult for many applications. We need to add an additional &#8220;layer of protection&#8221; to ensure the model will work for an acceptable range of inputs just to avoid the bad effects of floating-point arithmetic<sup class='endnote'><a href='#en-395-9' id='enref-395-9' onclick='return hhEndnotes_show(395)'>9</a></sup>. There exist some approaches to reduce the bad effects of these numbers in computing like <a href="https://en.wikipedia.org/wiki/Decimal_floating_point">decimal floating-point</a>, <a href="https://en.wikipedia.org/wiki/Fixed-point_arithmetic#Precision_loss_and_overflow">fixed-point arithmetic,</a> and <a href="https://en.wikipedia.org/wiki/P-adic_number">p-adic arithmetic</a>. One other radically different solution is avoiding irrationals in our models from the start by only using rational numbers<sup class='endnote'><a href='#en-395-10' id='enref-395-10' onclick='return hhEndnotes_show(395)'>10</a></sup>; something that would definitely please the ancient Greeks. This approach requires us to create a library for &#8220;big integers&#8221; and base a rational numbers library on it. Another approach, common in financial applications, is to use very small units of measurement, like cents for example, and do all computations using integers; then do a final step of simple division when showing the results after accurately computing them. In any case, the floating-point binary number system will not go away anytime soon; we must take care when coding our geometric models not to allow these strange numbers to destroy the beauty of our geometry.</p>
<p>&nbsp;</p>
<h3>The Symbolic Meaning of Trees</h3>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>I had a very selfish reason for building Mathematica. I wanted to use it myself, a bit like Galileo got to use his telescope four hundred years ago. But I wanted to look, not at the astronomical universe, but at the computational universe.</p>
<p style="text-align: right;"><em><strong>&#8212; Stephen Wolfram</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_510" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/MemoryAddressContent.png"><img class="size-medium wp-image-510" src="/wp-content/uploads/2015/08/MemoryAddressContent-300x228.png" alt="MemoryAddressContent" width="300" height="228" srcset="/wp-content/uploads/2015/08/MemoryAddressContent-300x228.png 300w, /wp-content/uploads/2015/08/MemoryAddressContent.png 661w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Pointers and Strings are the bases for all data structures (<a href="https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp4_PointerReference.html">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>Binary integers are not just used for numerical calculations; their more important uses are for encoding symbols (using <a href="https://en.wikipedia.org/wiki/String_(computer_science)">strings of characters</a>) and for referencing memory locations (using <a href="https://en.wikipedia.org/wiki/Pointer_(computer_programming)">pointers</a>). Humans reason by symbols, they invent names for new entities on daily basis. Computers are required to store textual data and complex relations between symbolic entities to be useful; not just act as fast calculators. Strings and pointers are the bases for all other data structures that ever existed. Using sets of binary integers encoding symbols, their memory locations, and their semantic properties we have created arrays, stacks, queues, hash tables, heaps, trees, graphs, and geometrically optimized spatial data structures<sup class='endnote'><a href='#en-395-11' id='enref-395-11' onclick='return hhEndnotes_show(395)'>11</a></sup>. In the collective experience of computer scientists and software engineers, the most widely used data structures are <a href="https://en.wikipedia.org/wiki/Tree_(data_structure)">trees</a> of various kinds; think XML.</p>
<p>For our specific purpose of computational applications, there exists one type of software systems that relies completely on trees and their transformations: <a href="https://en.wikipedia.org/wiki/Symbolic_computation">Symbolic Computation Systems</a> a.k.a <a href="https://en.wikipedia.org/wiki/Computer_algebra_system">Computer Algebra Systems</a> (CAS). The mathematical and logical base for modern CAS date back to George Boole&#8217;s method of separation of symbols, the contemporary name for a method which is a precursor of today&#8217;s abstract mathematical formalization<sup class='endnote'><a href='#en-395-12' id='enref-395-12' onclick='return hhEndnotes_show(395)'>12</a></sup>. Computer algebra can be defined as<sup class='endnote'><a href='#en-395-13' id='enref-395-13' onclick='return hhEndnotes_show(395)'>13</a></sup>:</p>
<blockquote><p>Computer Algebra is a subject of science devoted to methods for solving mathematically formulated problems by symbolic algorithms, and to implementation of these algorithms in software and hardware. It is based on the exact finite representation of finite or infinite mathematical objects and structures, and allows for symbolic and abstract manipulation by a computer. Structural mathematical knowledge is used during the design as well as for verification and complexity analysis of the respective algorithms. Therefore computer algebra can be effectively employed for answering questions from various areas of computer science and mathematics, as well as natural sciences and engineering, provided they can be expressed in a mathematical model.</p></blockquote>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_468" style="width: 305px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/expr-tree.png"><img class="size-medium wp-image-468" src="/wp-content/uploads/2015/08/expr-tree-295x300.png" alt="expr-tree" width="295" height="300" srcset="/wp-content/uploads/2015/08/expr-tree-295x300.png 295w, /wp-content/uploads/2015/08/expr-tree.png 679w" sizes="(max-width: 295px) 100vw, 295px" /></a><p class="wp-caption-text">Computer Algebra Systems use and manipulate trees of symbols to accurately represent data, mathematical expressions, and algorithmic procedures (<a href="https://mathematica.stackexchange.com/questions/11632/how-to-generate-a-random-tree">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>Although properly speaking, computer algebra should be a sub-field of scientific computing, they are generally considered as distinct fields because scientific computing is usually based on numerical computation with approximate floating point numbers, while symbolic computation emphasizes exact computation with expressions containing variables that have not any given value and are thus manipulated as symbols (therefore the name of symbolic computation).</p>
<p><a href="https://en.wikipedia.org/wiki/Computer_algebra_system#History">Historically</a>, computer algebra evolved out of two quite different sources: the requirements of theoretical physicists and research into classical symbolic artificial intelligence in the 60&#8217;s. Physics is one of the oldest application fields of computer algebra; in fact, many of the early computer algebra systems were designed or strongly influenced by physicists in order to suit their research needs, in particular, the need to handle highly complicated mathematical relations with parameters in an exact way. The other source for CAS development was symbolic AI, the dominant paradigm of AI research from the middle fifties until the late 1980s, that was motivated by the <a href="https://en.wikipedia.org/wiki/Physical_symbol_system">physical symbol system hypothesis</a>, later challenged from many directions, stating: &#8220;a physical symbol system has the necessary and sufficient means for general intelligent action&#8221;. For example, Mathematica contains some form of an internal knowledge base and inference engine, the main components of an expert system symbolic AI, as part of its core components. In addition, many of the historical developments required for the normal construction and operation of modern CAS were developed out of symbolic AI research including timesharing, interactive interpreters, graphical user interfaces and the computer mouse, rapid development environments, the linked list data structure, automatic storage management, symbolic programming, functional programming, dynamic programming and object-oriented programming<sup class='endnote'><a href='#en-395-14' id='enref-395-14' onclick='return hhEndnotes_show(395)'>14</a></sup>.</p>
<p>As of today, the most popular commercial systems are <a href="http://www.wolfram.com/mathematica/">Mathematica</a> and <a href="https://www.maplesoft.com/products/maple/" class="broken_link">Maple</a>, which are commonly used by research mathematicians, scientists, and engineers. Freely available alternatives include <a href="http://www.sagemath.org/">Sage</a> which can act as a front-end to several other free and nonfree CAS. Computer algebra systems have profoundly impacted scientific activities in many ways:</p>
<ul>
<li>Standard problems in high school mathematics can be solved by the push of a button nowadays; for example, see the Wolfram Demonstration Project <a href="http://demonstrations.wolfram.com/">online site</a>.</li>
<li>They enable to teach the more application-oriented material, which is usually more extensive but also more interesting, and there is more time to explore more general and conceptual aspects of mathematics. Both can considerably improve comprehension of mathematical methods, their potential, and their limitations, by non-mathematicians.</li>
<li>The use of computer algebra systems has become a standard tool for experiments in advanced research that help to find, support, or refute conjectures. They have become absolutely indispensable in the design and update of tables of mathematical, physical or other scientific objects.</li>
<li>The goals of computer algebra constituted a major challenge for the development and refinement of a wide range of computer science tools and methods, among them list processing, abstract data types, parametric polymorphism, constraint logic programming, parallel computing at various levels of granularity, dynamical memory management, user interfaces and interfaces between systems, mathematical knowledge representation and management.</li>
</ul>
<p>This site is concerned with exploring the computational universe using geometric algebra. Naturally, the main utility for such exploration will definitely be based on a computer algebra system.</p>
<p>&nbsp;</p>
<h3>Arriving at an Exact Value, Give or Take</h3>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>As far as the laws of mathematics refer to reality, they are not certain; and as far as they are certain, they do not refer to reality.</p>
<p style="text-align: right;"><em><strong>&#8212; Albert Einstein, Sidelights on Relativity</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_527" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/Sci-method-Eng-method.png"><img class="size-medium wp-image-527" src="/wp-content/uploads/2015/08/Sci-method-Eng-method-300x200.png" alt="Sci-method-Eng-method" width="300" height="200" srcset="/wp-content/uploads/2015/08/Sci-method-Eng-method-300x200.png 300w, /wp-content/uploads/2015/08/Sci-method-Eng-method-768x511.png 768w, /wp-content/uploads/2015/08/Sci-method-Eng-method.png 981w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">In both science and engineering, data gathered from measurements or generated from models are approximations to reality (<a href="https://www.sciencebuddies.org/science-fair-projects/engineering-design-process/engineering-design-compare-scientific-method">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>In science and engineering, data gathering is of prime importance. Our ability to measure has developed over the ages to remarkable levels of accuracy. Many of our computational algorithms are originally designed to deal explicitly with well defined exact numerical values. On the other hand, real data obtained by measurement, however accurate, are mere approximations of the actual value. Sometimes there is not even an exact value but just an acceptable range of values of some random variable. Repeatability, the main feature of scientific experimentation, is in many cases only possible within a &#8220;margin of error&#8221; or tolerance. To make things more complicated, there are many natural and computational systems that are very sensitive to small changes in their initial conditions and parameter variations; any small deviation from our theoretical computations will result in unpredictable behavior of the studied system; this is called <a href="https://en.wikipedia.org/wiki/Chaos_theory">chaos theory</a>. Many solutions are used for this type of problem: <a href="https://en.wikipedia.org/wiki/Probability_theory">probability theory</a>, <a href="https://en.wikipedia.org/wiki/Fuzzy_logic">fuzzy logic</a>, <a href="https://en.wikipedia.org/wiki/Propagation_of_uncertainty">propagation of error</a>, and <a href="https://en.wikipedia.org/wiki/Interval_arithmetic">interval arithmetic</a>.</p>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_530" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/Archimedes_pi.png"><img class="size-medium wp-image-530" src="/wp-content/uploads/2015/08/Archimedes_pi-300x101.png" alt="Archimedes_pi" width="300" height="101" srcset="/wp-content/uploads/2015/08/Archimedes_pi-300x101.png 300w, /wp-content/uploads/2015/08/Archimedes_pi.png 707w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Archimedes used a method based on intervals to approximate Pi. See <a href="https://www.youtube.com/watch?v=_rJdkhlWZVQ">this video</a> for a full explanation</p></div>
</div>

                            </div>
                        </div>
<p>Interval arithmetic is a method developed by mathematicians <a href="https://en.wikipedia.org/wiki/Interval_arithmetic#History">since the 1950s and 1960s</a> as an approach to putting bounds on rounding errors and measurement errors in mathematical computation and thus developing numerical methods that yield reliable results. Very simply put, it represents each value as a range of possibilities. For example, instead of estimating the height of someone using standard arithmetic as 2.0 meters, using interval arithmetic we might be certain that that person is somewhere between 1.97 and 2.03 meters. Whereas classical arithmetic defines operations on individual numbers, interval arithmetic defines a set of operations on intervals. Interval arithmetic is not a completely new phenomenon in mathematics; it has appeared several times under different names in the course of history. For example, Archimedes calculated lower and upper bounds 223/71 &lt; π &lt; 22/7 in the 3rd century BC.</p>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_533" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/interval-arith.png"><img class="size-medium wp-image-533" src="/wp-content/uploads/2015/08/interval-arith-300x128.png" alt="interval-arith" width="300" height="128" srcset="/wp-content/uploads/2015/08/interval-arith-300x128.png 300w, /wp-content/uploads/2015/08/interval-arith.png 567w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Basic rules for arithmetic on real intervals. Though simple, they have many bad mathematical and semantic properties</p></div>
</div>

                            </div>
                        </div>
<p>At some point in time, research in interval computations was too optimistic; especially in applications related to global optimization<sup class='endnote'><a href='#en-395-15' id='enref-395-15' onclick='return hhEndnotes_show(395)'>15</a></sup>. But as research progressed many problems started to show. Most of these problems resulted from the bad semantics behind the basic rules of interval arithmetic. For example the operation of subtraction of intervals is not the reverse of addition, simple equations on intervals like A + X = [0, 0] and A X = [1, 1] have no interval solution. Another problem is interval dependency where traditional interval computation algorithms assume all occurrences of intervals to be independent so in an expression like x(1 + 2x) the two x&#8217;s are considered independent resulting in flawed outcomes. This means that most traditional floating point algorithms will never work correctly for intervals. Specific algorithms for solving the same problems will need to be developed specifically for intervals.</p>
<p>The more fundamental problem with intervals arises from the logical interpretation of intervals in practical applications. If we take the interval [a, b] for, say, a temperature satisfying some condition (predicate); what do we really mean by it:</p>
<ul>
<li>All values inside this interval satisfy the given condition.</li>
<li>There exist one or more values inside this interval satisfying the given condition.</li>
</ul>
<p>The difference may seem minor at first glance but it actually leads to different semantics in problems having many variables and many interactions between the variables. Realizing such problems researchers began to investigate other computational laws for intervals based on the actual semantics of their applications<sup class='endnote'><a href='#en-395-16' id='enref-395-16' onclick='return hhEndnotes_show(395)'>16</a></sup>. This serious problem with interval semantics is the main cause preventing the universal use of interval arithmetic in many computational problems, even though many <a href="http://www.cs.utep.edu/interval-comp/intsoft.html">software libraries</a> already exist for handling traditional interval arithmetic, including the <a href="http://ieeexplore.ieee.org/document/7140721/?reload=true&amp;arnumber=7140721&amp;filter%3DAND%28p_Publication_Number%3A7140719%29">IEEE Std 1788-2015</a> standard. I suspect that no single number system can alone handle all kinds of inaccuracies in data and intermediate computations. We need to re-think our algebra and algorithms for each problem area to select the most suitable solutions.</p>
<p>&nbsp;</p>
<h3>A Functional Definition of Numbers</h3>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>The real danger is not that computers will begin to think like men, but that men will begin to think like computers.</p>
<p style="text-align: right;"><em><strong>&#8212; Sydney J. Harris</strong></em></p>
</blockquote>
</div>
</div></div>
<p>In our 3 part journey with numbers, we saw some of the functional roles they play in our modern &#8220;computation oriented&#8221; civilization. It&#8217;s very difficult to give a single universal definition of a number. The reason is that each branch of mathematics, physics, and engineering depends on different kinds of numbers with many interpretations of each. Nevertheless, we can approach a definition using the functional role number systems play in our continuous investigations. The general characteristics of numbers include:</p>
<ul>
<li>Numbers are abstract symbolic mathematical entities with basic operations of, at least, addition and multiplication; algebra is the art and science of manipulating numbers. Some number systems are closed under their operations and some are not (for example floating-point numbers).</li>
<li>Numbers always result from finite or infinite processes (counting, partitioning, extending in dimension, geometric construction, digital manipulation etc.). We can only use infinite processes as conceptual abstractions while we can only implement our computational abstractions using finite processes.</li>
<li>The same number or class of numbers can be found\utilized through many processes: geometric, algebraic, physical, measurement, limiting, computing etc. In this sense, numbers are the most fundamental of all abstractions serving a universal encoding and exchange of information medium between all parts of the human scientific activity.</li>
</ul>
<p>Numbers are no more than abstract tools of the mind; they must be used wisely and creatively. Geometric algebra can be an excellent theoretical base for geometric modeling that encompasses, generalizes, and interprets complex, quaternion, and vector-based abstractions. On the algorithmic and implementation side, we need much more work because of the limited ability to use floating-point numbers for representing our abstract numerical patterns. We need to create new algorithms for our computational needs even for well-studied mathematical models. The blind conversion of abstractions into implementations result in all sorts of problems<sup class='endnote'><a href='#en-395-17' id='enref-395-17' onclick='return hhEndnotes_show(395)'>17</a></sup>. One very powerful interactive geometry software, <a href="https://www.cinderella.de/tiki-index.php">Cinderella</a>, avoided many of the problems other similar systems face not by increasing floating point accuracy or using interval arithmetic, but be intelligently using more advanced geometry-oriented algebraic structures on complex numbers; see <a href="https://doc.cinderella.de/tiki-index.php?page=Theoretical+Background">this technical background</a> for some details. This level of intelligence in software design requires creative use of our number systems usually unobtainable by studying traditional mathematics\engineering textbooks alone.</p>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_597" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/finished-diagram-for-dikw.png"><img class="size-medium wp-image-597" src="/wp-content/uploads/2015/08/finished-diagram-for-dikw-300x111.png" alt="finished-diagram-for-dikw" width="300" height="111" srcset="/wp-content/uploads/2015/08/finished-diagram-for-dikw-300x111.png 300w, /wp-content/uploads/2015/08/finished-diagram-for-dikw-768x285.png 768w, /wp-content/uploads/2015/08/finished-diagram-for-dikw-1024x380.png 1024w, /wp-content/uploads/2015/08/finished-diagram-for-dikw.png 1173w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">A closer look at the DIKW pyramid: starting at data we can arrive at wisdom and create vision (<a href="https://psuf10.wordpress.com/2014/02/16/a-walking-tour-of-the-pathway-to-wisdom/">Souce</a>)</p></div>
</div>

                            </div>
                        </div>
<p>If we take a closer look at the famous <a href="https://en.wikipedia.org/wiki/DIKW_Pyramid">DIKW Pyramid</a>, we see that numbers are needed at every stage in our non-stop pursuit of wisdom. However, the effective use of numbers in such pursuit of wisdom requires much wisdom in its own right. We need deep knowledge about a problem we&#8217;re trying to solve in order to select the best numbers to represent our solution, and we need to use whatever numbers we see potentially useful to reach a deep understanding of our problem. In effect, using numbers in a scientific activity should be an iterative process of four steps applied again and again in the long run:</p>
<ol>
<li>Select one or several number systems for the problem.</li>
<li>Represent your data and model with the selected number systems.</li>
<li>Study your system using the numeric tools you&#8217;ve selected.</li>
<li>Assess your findings and, perhaps, change some or all numbers you&#8217;ve worked with to more suitable number systems.</li>
</ol>
<p>Some number system might be better at an early stage of data gathering, some other might be better at a later stage of analysis, yet another one should be used in the implementation stage on computers, while a totally different number system is best used for teaching concepts of the exact same problem. For each problem area, we need to be deeply aware of its application and computation requirements to select and use suitable number systems to arrive at our goals. Any other path will result in a large number of ad hoc trial and error based techniques that may never advance our understanding, both collective and individual, for our particular application area. I don&#8217;t believe that we are at the danger of arriving at an &#8220;artificial intelligence&#8221; that can perform such &#8220;deeply creative and artistic&#8221; methods of selecting and using numbers anytime soon, or perhaps never. I do believe that many of us have completely been converted into &#8220;mindless computational machines&#8221; blindly using a specific limited set of number systems that we were taught to use with no idea whatsoever about the universe of other number systems out of our immediate scope of narrow specialty; this is a clear and present danger to our human scientific side. I hope this site may widen the &#8220;numerical horizon&#8221; of some of us, including me, to the point of no return.</p>
<hr />
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<p style="text-align: center;"><span style="font-size: 28px; font-family: 'Traditional Arabic';"><strong>تم بحمد الله الجمعة 29 شوال 1436هـ</strong></span></p>
</div>
</div></div>
<hr />
<div class='endnotes' id='hhendnotes-395'>
<ol>
<li id='en-395-1'>Stephen Wolfram, &#8220;A New Kind of Science&#8221;. Wolfram Research 2002 <span class='endnotereverse'><a href='#enref-395-1'>&#8617;</a></span></li>
<li id='en-395-2'>It&#8217;s worth noticing that 3 of our central mathematicians in this series were brilliant linguists: Hamilton, Grassmann, and Boole. See the studies <a href="http://basilo.kaist.ac.kr/mathnet/kms_tex/981583.pdf">here</a> and <a href="http://lshss.pubs.asha.org/article.aspx?articleid=1832557">here</a> for the relation between mathematics and language <span class='endnotereverse'><a href='#enref-395-2'>&#8617;</a></span></li>
<li id='en-395-3'>Luis M. Laita et al., &#8220;George Boole, a Forerunner of Symbolic Computation&#8221;. International Conference AISC 2000 Madrid, Spain, July 17–19, 2000 Revised Papers <span class='endnotereverse'><a href='#enref-395-3'>&#8617;</a></span></li>
<li id='en-395-4'>Luis M. Laita, &#8220;Influences on Boole&#8217;s logic: The controversy between William Hamilton and Augustus De Morgan&#8221;. Annals of Science Volume 36, Issue 1, 1979 <span class='endnotereverse'><a href='#enref-395-4'>&#8617;</a></span></li>
<li id='en-395-5'>George Boole 200, University College Cork, <a href="https://georgeboole200.ucc.ie/boole/legacy/phil/">Online</a> <span class='endnotereverse'><a href='#enref-395-5'>&#8617;</a></span></li>
<li id='en-395-6'>Radomir S. Stankovic and Jaakko Astola, &#8220;From Boolean Logic to Switching Circuits and Automata &#8211; Towards Modern Information Technology&#8221;. Springer 2011 <span class='endnotereverse'><a href='#enref-395-6'>&#8617;</a></span></li>
<li id='en-395-7'>Mohammad Bagheri, &#8220;Recreational Problems from Hasib Tabari’s Miftāh al-mu’āmalāt&#8221;. GANITA BHARATI Vol. 21, 1999. <a href="http://www.mb-kushyar.com/articles_e/RECREATIONAL%20PROBLEMS%20FROM%20HASIB%20TABARI.pdf">Online Version</a>. <span class='endnotereverse'><a href='#enref-395-7'>&#8617;</a></span></li>
<li id='en-395-8'>Donald E. Knuth, &#8220;The Art of Computer Programming Volume 2: Seminumerical Algorithms, 3rd Edition&#8221;. Addison-Wesley Professional 1997 <span class='endnotereverse'><a href='#enref-395-8'>&#8617;</a></span></li>
<li id='en-395-9'>For real instances of disastrous software failure due to floating-point errors see section 3.10 &#8220;The Elephant in the Living Room&#8221; in Ronald T. Kneusel, &#8220;Numbers and Computers&#8221;. Springer 2015 <span class='endnotereverse'><a href='#enref-395-9'>&#8617;</a></span></li>
<li id='en-395-10'>N.J. Wildberger, &#8220;Divine Proportions: Rational Trigonometry to Universal Geometry&#8221;. Wild Egg Books 2005 <span class='endnotereverse'><a href='#enref-395-10'>&#8617;</a></span></li>
<li id='en-395-11'>Hanan Samet, &#8220;Foundations of Multidimensional and Metric Data Structures&#8221;. Morgan Kaufmann 2006 <span class='endnotereverse'><a href='#enref-395-11'>&#8617;</a></span></li>
<li id='en-395-12'>Luis de Ledesma et al., &#8220;A Computational Approach to George Boole&#8217;s Discovery of Mathematical Logic&#8221;. Artificial Intelligence Volume 91 Issue 2, April 1997 <span class='endnotereverse'><a href='#enref-395-12'>&#8617;</a></span></li>
<li id='en-395-13'>Johannes Grabmeier, Erich Kaltofen, Volker Weispfenning (Editors), &#8220;Computer Algebra Handbook &#8211; Foundations, Applications, Systems&#8221;. Springer 2003 <span class='endnotereverse'><a href='#enref-395-13'>&#8617;</a></span></li>
<li id='en-395-14'>Stuart Russell, Peter Norvig, &#8220;Artificial Intelligence: A Modern Approach, 2nd Ed.&#8221;. Prentice Hall 2002 <span class='endnotereverse'><a href='#enref-395-14'>&#8617;</a></span></li>
<li id='en-395-15'>Eldon Hansen, G. William Walster (Editors), &#8220;Global Optimization Using Interval Analysis: Revised And Expanded, 2nd Edition&#8221;. CRC Press 2003 <span class='endnotereverse'><a href='#enref-395-15'>&#8617;</a></span></li>
<li id='en-395-16'>Sainz, M.A., Armengol, J., Calm, R., Herrero, P., Jorba, L., Vehi, J, &#8220;Modal Interval Analysis &#8211; New Tools for Numerical Information&#8221;. Springer 2014 <span class='endnotereverse'><a href='#enref-395-16'>&#8617;</a></span></li>
<li id='en-395-17'>Joab Winkler, Mahesan Niranjan (Editors), &#8220;Uncertainty in Geometric Computations&#8221;. Springer 2002 <span class='endnotereverse'><a href='#enref-395-17'>&#8617;</a></span></li>
</ol>
</div>
<p>The post <a rel="nofollow" href="/index.php/2015/08/14/history-of-numbers3/">A Functional History of Numbers (3 of 3)</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/2015/08/14/history-of-numbers3/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>A Functional History of Numbers (2 of 3)</title>
		<link>/index.php/2015/08/07/history-of-numbers2/</link>
		<comments>/index.php/2015/08/07/history-of-numbers2/#respond</comments>
		<pubDate>Fri, 07 Aug 2015 14:00:09 +0000</pubDate>
		<dc:creator><![CDATA[Ahmad Eid]]></dc:creator>
				<category><![CDATA[GA History]]></category>
		<category><![CDATA[Algebra]]></category>
		<category><![CDATA[Computing]]></category>
		<category><![CDATA[GA]]></category>
		<category><![CDATA[Geometry]]></category>
		<category><![CDATA[History]]></category>
		<category><![CDATA[Numbers]]></category>

		<guid isPermaLink="false">http://gacomputing.info/?p=270</guid>
		<description><![CDATA[<p>In part one of this functional history of numbers we saw the development of various number systems we are mostly familiar with. In this part, we will see the development of many number systems that are important for our modern scientific needs, geometrically and computationally. The sad fact about these developments is that we are using and teaching less effective number systems today because of a "series of unfortunate events" that took place during the grand drama of human development of modern mathematics.</p>
<p>The post <a rel="nofollow" href="/index.php/2015/08/07/history-of-numbers2/">A Functional History of Numbers (2 of 3)</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></description>
				<content:encoded><![CDATA[<div class='dropshadowboxes-container ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-note" style="border-color:#e5e5e5;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#ffffff;border-color:#ffffff;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<p><a href="/wp-content/uploads/2015/08/Old-Geometry.png"><img class=" size-full wp-image-364 aligncenter" src="/wp-content/uploads/2015/08/Old-Geometry.png" alt="Old-Geometry" width="968" height="768" srcset="/wp-content/uploads/2015/08/Old-Geometry.png 968w, /wp-content/uploads/2015/08/Old-Geometry-300x238.png 300w, /wp-content/uploads/2015/08/Old-Geometry-768x609.png 768w" sizes="(max-width: 968px) 100vw, 968px" /></a></p>
</div>
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>As long as algebra and geometry have been separated, their progress have been slow and their uses limited; but when these two sciences have been united, they have lent each mutual forces, and have marched together towards perfection.</p>
<p style="text-align: right;"><em><strong>&#8212; Joseph-Louis Lagrange</strong></em></p>
</blockquote>
</div>
</div></div>

                            </div>
                        </div>
<hr />
<span class="dropcap">I</span>n <a href="/index.php/2015/07/24/history-of-numbers1/">part one</a> of this functional history of numbers we saw the development of various number systems we are mostly familiar with. In this part, we will see the development of many number systems that are important for our modern scientific needs, geometrically and computationally. The sad fact about these developments is that we are using and teaching less effective number systems today because of a &#8220;series of unfortunate events&#8221; that took place during the grand drama of human development of modern mathematics.</p>
<hr />
<h3>Missing the Truth in Pursuit of Beauty</h3>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>Here as he walked by on the 16th of October 1843 Sir William Rowan Hamilton in a flash of genius discovered the fundamental formula for quaternion multiplication <span class="wp-katex-eq" data-display="false">i^{2}=j^{2}=k^{2}=ijk=-1</span> &amp; cut it on a stone of this bridge.</p>
<p style="text-align: right;"><em><strong>&#8212; <a href="https://en.wikipedia.org/wiki/History_of_quaternions#/media/File:William_Rowan_Hamilton_Plaque_-_geograph.org.uk_-_347941.jpg">Quaternion plaque</a> on Brougham (Broom) Bridge, Dublin</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_330" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/6a0163057a21c8970d017743e0b713970d.jpg"><img class="size-medium wp-image-330" src="/wp-content/uploads/2015/08/6a0163057a21c8970d017743e0b713970d-300x150.jpg" alt="Avoiding a gimbal lock using quaternions" width="300" height="150" srcset="/wp-content/uploads/2015/08/6a0163057a21c8970d017743e0b713970d-300x150.jpg 300w, /wp-content/uploads/2015/08/6a0163057a21c8970d017743e0b713970d.jpg 694w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Avoiding a gimbal lock using quaternions; see <a href="http://around-the-corner.typepad.com/adn/2012/08/avoid-gimbal-lock-for-rotationdirection-maya-manipulators.html">here</a> for the full article</p></div>
</div>

                            </div>
                        </div>
<p><a href="https://en.wikipedia.org/wiki/William_Rowan_Hamilton">Sir William Rowan Hamilton</a> a renounced Irish physicist, astronomer, and mathematician had been interested in complex numbers for a long time. Motivated by the beautiful geometric properties of complex numbers, he was obsessed with generalizing complex numbers to 3 dimensional space while keeping the most fascinating property of complex numbers: the unification of points (data) and transformations (processing) in a single algebraic entity while applying the transformations to points using algebraic multiplication and formal summation. Out of this preoccupation Hamilton was to invent the most beautiful algebra of the century: the algebra of quaternions. Hamilton never arrived at his beautiful generalization; it simply does not exist in the way he imagined. A fact about generalizations of abstract concepts is that they&#8217;re not free; with any generalization of a concept we must give up some of its properties. Often we cannot choose and control an arbitrary set of properties to generalize for some concept; this set may be consistent with the original concept but inconsistent with its generalization. Sadly enough, Hamilton and his followers made some big mistakes that almost banished quaternion algebra from practical applications in physics and engineering for a very long time<sup class='endnote'><a href='#en-270-1' id='enref-270-1' onclick='return hhEndnotes_show(270)'>1</a></sup>. They literally missed the true beauty of quaternions as rotation operators<sup class='endnote'><a href='#en-270-2' id='enref-270-2' onclick='return hhEndnotes_show(270)'>2</a></sup> in their stubborn pursuit of a specific form of beauty they imagined as pure mathematicians: a method to divide 3D vectors just like complex numbers. The full story of this unfortunate event can be found in Simon L. Altmann intriguing paper &#8220;Hamilton, Rodrigues, and the Quaternion Scandal&#8221;<sup class='endnote'><a href='#en-270-3' id='enref-270-3' onclick='return hhEndnotes_show(270)'>3</a></sup>.</p>
<p>On the morning of Monday, 16 October 1843 Hamilton, accompanied by Lady Hamilton, was walking along the Royal Canal in Dublin towards the Royal Irish Academy, where Hamilton was to preside at a meeting. As he was walking past Broome Bridge (referred to as Brougham Bridge by Hamilton and called by this name ever since), Hamilton, in a flash of inspiration, realized that three, rather than two, imaginary units were needed in 3D space, with the properties <span class="wp-katex-eq" data-display="false">i^{2}=j^{2}=k^{2}=-1,\;ij=-k,\;ji=-k</span> and cyclic permutation. Hamilton carved these formulae on the stone of the bridge; poor Lady Hamilton had to wait. Armed now with four units, Hamilton called the number <span class="wp-katex-eq" data-display="false">A=a\,1+A_{x}\,i+A_{y}\,j+A_{z}\,k</span> where the coefficients here are all real, a quaternion. Hamilton made the product <span class="wp-katex-eq" data-display="false">ij=-ji</span> non-commutative. Not only was this the first time that a non-commutative product appeared in mathematics, but this was a true stroke of genius which has given us the last possible <a href="https://en.wikipedia.org/wiki/Division_algebra#Associative_division_algebras">associative division algebra</a><sup class='endnote'><a href='#en-270-4' id='enref-270-4' onclick='return hhEndnotes_show(270)'>4</a></sup>. As a complex number <span class="wp-katex-eq" data-display="false">C=x+iy</span> is the formal sum of a real part <span class="wp-katex-eq" data-display="false">x</span> and an imaginary part <span class="wp-katex-eq" data-display="false">iy</span>, a quaternion <span class="wp-katex-eq" data-display="false">Q_{A}=a\,1+A_{x}\,i+A_{y}\,j+A_{z}\,k</span> can be viewed as a formal sum of the real part <span class="wp-katex-eq" data-display="false">a</span> and the &#8220;pure-quaternion&#8221; part <span class="wp-katex-eq" data-display="false">A=A_{x}\,i+A_{y}\,j+A_{z}\,k</span>. It follows that the product of two quaternions <span class="wp-katex-eq" data-display="false">Q_{A}=a+A</span> and <span class="wp-katex-eq" data-display="false">Q_{B}=b+B</span> is given by: <span class="wp-katex-eq" data-display="false">Q_{A}Q_{B}=(ab-A\cdot B)+(aB+bA+A\times B)</span> where <span class="wp-katex-eq" data-display="false">A\cdot B=A_{x}B_{x}+A_{y}B_{y}+A_{z}B_{z}</span> and <span class="wp-katex-eq" data-display="false">A\times B=(A_{y}B_{z}-A_{z}B_{y})\,i+(A_{z}B_{x}-A_{x}B_{z})\,j+(A_{x}B_{y}-A_{y}B_{x})\,k</span>
<p>Although Hamilton did not give names or symbols for these operations, it is here that the scalar and vector products of two vectors appear for the first time in history. The big mistake Hamilton made was treating the pure-quaternion part as a vector (actually it&#8217;s a <a href="https://en.wikipedia.org/wiki/Bivector#Quaternions">bivector</a>); he even named it a vector. He then treated rotations in 3D space using his newly invented algebra but with many internal contradictions stemming from his imagined goal of generalizing complex numbers while preserving all their &#8220;algebraically beautiful properties&#8221;. Two other unfortunate events happened in the drama of quaternions. First, Gauss had actually discovered quaternions but had never bothered to publish, as shown by Gauss&#8217;s notes from 1819, published in 1900; that certainly didn&#8217;t help Hamilton&#8217;s case. Second, a treatment of rotations and quaternions had been going on for some years before 1843, quite independently of Hamilton and taking a diametrically opposed view to his. This treatment was entirely geometrical, and because it tried to do a simple job in a simple way it was clear and precise and it was entirely successful, but it was largely ignored by everyone. It was <a href="https://en.wikipedia.org/wiki/Olinde_Rodrigues">Olinde Rodrigues</a> in his 1840 paper who provided a construction to <a href="https://en.wikipedia.org/wiki/Euler%27s_rotation_theorem">Euler&#8217;s rotation theorem</a> correctly <a href="https://en.wikipedia.org/wiki/Euler%E2%80%93Rodrigues_formula#Connection_with_quaternions">linking quaternions to rotations</a> <sup class='endnote'><a href='#en-270-5' id='enref-270-5' onclick='return hhEndnotes_show(270)'>5</a></sup>. Hamilton himself geometrically rediscovered the results of the Rodrigues construction but completely ignored its importance; probably blinded by his original goal of &#8220;algebraic beauty&#8221;.</p>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_351" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/quaternions.jpg"><img class="size-medium wp-image-351" src="/wp-content/uploads/2015/08/quaternions-300x220.jpg" alt="Irish stamp on the Quaternions," width="300" height="220" srcset="/wp-content/uploads/2015/08/quaternions-300x220.jpg 300w, /wp-content/uploads/2015/08/quaternions-768x564.jpg 768w, /wp-content/uploads/2015/08/quaternions.jpg 994w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Irish stamp on the Quaternions, issued by Ireland on May 4, 1983. (<a href="http://jeff560.tripod.com/images/quaternions.jpg">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>After Hamilton&#8217;s death, his work began to give fruits but not in the direction which he had expected. His ideas of vectors and of their scalar and vector products were much too important so that people began to try and graft a new skin onto them in order to make these concepts usable. Grassmann in Germany and Heaviside in Britain moved some way in this direction, but they were not much more transparent than Hamilton himself. It was left to Willard Gibbs of Yale to produce not only the first coherent picture of vectors and of their operations but also a good and successful working notation; effectively eliminating quaternions, with all their true beauty as rotation operators, from the picture. This hardened the response of Hamilton&#8217;s followers as one of them, Peter Tait, stated:</p>
<blockquote><p>Even Prof. Willard Gibbs must be ranked as one of the retarders of quaternion progress, in virtue of his pamphlet on Vector Analysis, a sort of hermaphrodite monster, compounded of the notations of Hamilton and of Grassmann.</p></blockquote>
<p>This was not the end of the story for quaternions. They would resurface many years later as advantageous rotation operators in 3D space; currently used in robotics, aviation, and computer graphics to name a few applications. Nevertheless, many important lessons can be taught from the story of the last division algebra. The main lesson being: you have to consistently follow the truth and it will lead to more beauty than the one you might imagine.</p>
<p>&nbsp;</p>
<h3>Hyperspace and the Womb of Numbers</h3>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>The Matrix is everywhere. It is all around us. Even now, in this very room.</p>
<p style="text-align: right;"><em><strong>&#8212; Morpheus, The Matrix</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_367" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/Matrix.png"><img class="wp-image-367 size-medium" src="/wp-content/uploads/2015/08/Matrix-300x65.png" alt="Matrix" width="300" height="65" srcset="/wp-content/uploads/2015/08/Matrix-300x65.png 300w, /wp-content/uploads/2015/08/Matrix.png 576w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">A Matrix is the &#8220;Womb of Numbers&#8221; in which Linear Algebra was born</p></div>
</div>

                            </div>
                        </div>
<p>It&#8217;s said that necessity is the mother of invention; sometimes the lack of necessity brutally kills brilliant ideas. Linear algebra is a fascinating subject with applications in almost every field of science and engineering<sup class='endnote'><a href='#en-270-6' id='enref-270-6' onclick='return hhEndnotes_show(270)'>6</a></sup>. When you search for a definition for the term &#8220;Linear Algebra&#8221; you will find a definition like:</p>
<blockquote><p>Linear Algebra is a branch of mathematics that is concerned with mathematical structures closed under the operations of addition and scalar multiplication and that includes the theory of systems of linear equations, matrices, determinants, vector spaces, and linear transformations.</p>
<p style="text-align: right;"><em><strong>&#8212; Merriam Webster <a href="https://www.merriam-webster.com/dictionary/linear%20algebra">online dictionary.</a></strong></em></p>
</blockquote>
<p>When you take a look at some books about the subject you will find two kinds of books. The first kind<sup class='endnote'><a href='#en-270-7' id='enref-270-7' onclick='return hhEndnotes_show(270)'>7</a></sup> mostly deals with linear equations, coordinate vectors (i.e. tuples of numbers), matrices, and determinants; this may give the wrong impression that linear algebra is nothing more than the study of matrix algebra and coordinate vectors in Euclidean space. The second kind of books<sup class='endnote'><a href='#en-270-8' id='enref-270-8' onclick='return hhEndnotes_show(270)'>8</a></sup> deals with an abstract concept of vectors and linear transformations defined axiomatically without giving any special importance to coordinates, and applicable to any metric space Euclidean or not. Now matrices are put to perspective as no more than computational and representational tools for the subject, not the subject itself. Historically<sup class='endnote'><a href='#en-270-9' id='enref-270-9' onclick='return hhEndnotes_show(270)'>9</a></sup> the first use of linear equations of 2 and 3 unknowns date back to ancient Babylonians and Chinese. The modern study of systems of linear equations can be said to have originated with Leibniz, who in 1693 invented the notion of a determinant for this purpose. Following developments took place by Cramer, Euler, Gauss, Laplace, Cauchy, Weierstrass, Kronecker, Cayley, Frobenius, and many others. All such developments were based on applications from diverse fields of mathematics and physics; a sign of the necessity and universality of linear algebra. In 1848, J.J. Sylvester introduced the term “matrix”, the Latin word for womb and a word related to &#8220;mother&#8221;, as a name for an array of numbers. By the year 1880, many of the fundamental results of linear algebra had been established, but they were not considered as parts of a general theory. In particular, the fundamental notion of vector space, within which such a theory would be framed, was absent. Matrices and coordinate vectors, out of necessity, are at the core of the historical development of linear algebra and vector spaces. In our modern computational age, any software library dealing with linear algebra must have matrices and their computational algorithms as the main component. Every engineer in the world must have some idea about the Matrix Laboratory; <a href="https://www.mathworks.com/products/matlab.html">MATLAB</a>.</p>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_356" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/clifford3d.png"><img class="size-medium wp-image-356" src="/wp-content/uploads/2015/08/clifford3d-300x97.png" alt="Exterior Product" width="300" height="97" srcset="/wp-content/uploads/2015/08/clifford3d-300x97.png 300w, /wp-content/uploads/2015/08/clifford3d-768x248.png 768w, /wp-content/uploads/2015/08/clifford3d.png 1012w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Grassmann used vectors to define higher-dimensional subspaces algebraically using his exterior product (<a href="https://slehar.wordpress.com/2014/03/18/clifford-algebra-a-visual-introduction/">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>One mathematician took a fundamentally different approach to linear algebra than all others hoping to approach Leibniz&#8217;s dream of a universal algebra that can deal directly and simply with geometric entities<sup class='endnote'><a href='#en-270-10' id='enref-270-10' onclick='return hhEndnotes_show(270)'>10</a></sup>; he was Hermann Günther Grassmann. Many have written about the extraordinary role of Grassmann&#8217;s work in modern mathematics and physics including Roger Penrose<sup class='endnote'><a href='#en-270-11' id='enref-270-11' onclick='return hhEndnotes_show(270)'>11</a></sup>, David Hestenes<sup class='endnote'><a href='#en-270-12' id='enref-270-12' onclick='return hhEndnotes_show(270)'>12</a></sup>, and many others<sup class='endnote'><a href='#en-270-13' id='enref-270-13' onclick='return hhEndnotes_show(270)'>13</a></sup>. Desmond Fearnley-Sander describes how Grassmann developed linear algebra by himself in <a href="https://www.maa.org/sites/default/files/pdf/upload_library/22/Ford/DesmondFearnleySander.pdf">his paper</a> &#8220;Hermann Grassmann and the Creation of Linear Algebra&#8221;. From the beginning, Grassmann distinguished linear algebra, as a formal theory independent of any interpretation, from its application in geometry. Grassmann described the concept of vector space and developed the theory of linear independence in a way which is astonishingly similar to the presentation one finds in modern linear algebra texts. He defined the concepts of subspace, linear independence, span, dimension, join and meet of subspaces, and projections of elements onto subspaces. He proved the invariance of dimension under change of basis and obtained the formula for change of coordinates under change of basis. He defined elementary transformations of basis and showed that every change of basis is a product of elementaries. His work led Peano in 1888 to put down the formal definitions of linear algebra that was ignored for 30 years until 1920 when Hermann Weyl and others published formal definitions resulting in the widespread of linear algebra ever since. Few have come closer than Hermann Grassmann to creating, single-handedly, a new subject. In addition, the first fundamental investigation in multi-dimensional geometry was provided by Grassmann in 1844, in which affine geometry was developed not only for three-dimensional space but for multi-dimensional space also. That it was Grassmann who succeeded in establishing an articulated theory of multidimensional space seems to be due largely to the fact that Grassmann was not under the influence of other great mathematicians of his time, and to his predilection for philosophical generalizations<sup class='endnote'><a href='#en-270-14' id='enref-270-14' onclick='return hhEndnotes_show(270)'>14</a></sup>. The following is an extract from the Foreword of &#8220;Die Ausdehnungslehre: Vollständig und in strenger Form bearbeitet&#8221; (The Theory of Extension, Thoroughly and Rigorously Treated) published by Grassmann in 1862:</p>
<blockquote><p>I remain completely confident that the labor I have expended on the science presented here and which has demanded a significant part of my life as well as the most strenuous application of my powers, will not be lost. It is true that I am aware that the form which I have given the science is imperfect and must be imperfect. But I know and feel obliged to state (though I run the risk of seeming arrogant) that even if this work should again remain unused for another seventeen years or even longer, without entering into the actual development of science, still that time will come when it will be brought forth from the dust of oblivion and when ideas now dormant will bring forth fruit. I know that if I also fail to gather around me (as I have until now desired in vain) a circle of scholars, whom I could fructify with these ideas, and whom I could stimulate to develop and enrich them further, yet there will come a time when these ideas, perhaps in a new form, will arise anew and will enter into a living communication with contemporary developments. For truth is eternal and divine and no phase of it &#8230; can pass without a trace; it remains in existence even if the cloth in which weak mortals dress it disintegrates into dust.</p></blockquote>
<p>Grassmann expected his ideas would be revived even if unused for 17 years or longer; it actually took a hundred years. At that time in the 19th century, Grassmann&#8217;s ideas (especially in geometry) were revolutionary; they were too advanced for the necessities of his age. Ironically, Grassmann was renowned in his day as a linguist but as a mathematician, he had poor notational skills. His ideas were great but his symbolic expression of them was awkward. Few mathematicians of his age acknowledged his brilliance. One of them was the English mathematician and philosopher William Kingdon Clifford. Clifford was the one who would give new form and meaning to Grassmann&#8217;s ideas.</p>
<p>&nbsp;</p>
<h3>Lost and Found: Geometric Algebra</h3>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>The further a mathematical theory is developed, the more harmoniously and uniformly does its construction proceed, and unsuspected relations are disclosed between hitherto separated branches of the science.</p>
<p style="text-align: right;"><em><strong>&#8212; David Hilbert</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_391" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/Spinor_on_the_circle.pdf.jpg"><img class="size-medium wp-image-391" src="/wp-content/uploads/2015/08/Spinor_on_the_circle.pdf-300x228.jpg" alt="When the vector is rotated along the Möbius strip it reverses direction after an odd number of full rotations; it's a spinor." width="300" height="228" srcset="/wp-content/uploads/2015/08/Spinor_on_the_circle.pdf-300x228.jpg 300w, /wp-content/uploads/2015/08/Spinor_on_the_circle.pdf-768x585.jpg 768w, /wp-content/uploads/2015/08/Spinor_on_the_circle.pdf.jpg 787w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">When the vector is rotated along the Möbius strip it reverses direction after an odd number of full rotations; it&#8217;s a spinor.</p></div>
</div>

                            </div>
                        </div>
<p>Grassmann&#8217;s vectors and subspaces were not numbers in a way complex numbers and quaternions are. In <a href="https://en.wikipedia.org/wiki/Exterior_algebra">Grassmann algebra</a>, a finite set of n vectors, representing 1-dimensional subspaces analogous to lines passing through the origin of a coordinate system of the space, are combined using his exterior product to algebraically form entities representing all other subspaces of dimension 2 to n. Grassmann had no interest, however, in representing transformations that &#8220;rotate&#8221; a subspace into another of the same dimension; something all physical and engineering models require to stand and function. Hamilton had the correct algebra for rotating vectors in 3-dimensional space but no generalization to n-dimensional space was present. While Hamilton lost his way insisting on treating rotations in 3D with the algebra of quaternions using direct multiplications, the brilliant but short-lived English mathematician William Kingdon Clifford took the correct path of generalizing rotations to the n-dimensional spaces of Grassmann<sup class='endnote'><a href='#en-270-15' id='enref-270-15' onclick='return hhEndnotes_show(270)'>15</a></sup>; the resulting beautiful mathematical abstraction was called <a href="https://slehar.wordpress.com/2014/03/18/clifford-algebra-a-visual-introduction/">Clifford Algebra</a>. Clifford successfully unified and generalized Hamilton&#8217;s quaternions and Grassmann&#8217;s vector spaces in a uniform manner that affected physics and science ever since. His motivation was to create an algebra that can act on strange but common objects in geometry and physics called <a href="https://en.wikipedia.org/wiki/Spinor">spinors</a>. A spinor is an abstraction of an object that reverses its direction when rotated by an odd number of full cycles in space; contrary to our common intuition about physical 3D objects. Clifford also wrote his report at Cambridge &#8220;On the Space-Theory of Matter&#8221;, published in 1876, <a href="https://en.wikipedia.org/wiki/William_Kingdon_Clifford#Premonition_of_relativity">anticipating Albert Einstein’s general relativity</a> by 40 years. Clifford&#8217;s contemporaries considered him acute and original, witty and warm. Felix Klein wrote, regarding Clifford,</p>
<blockquote><p>I recall him with particular pleasure, as a man who understood me thoroughly from the first and soon extended my research.</p></blockquote>
<p>Clifford was also working late into the night, he collapsed twice in two years from overworking, which may have led to his death at a young age; another unfortunate event for the development of his geometric numbers. Although Clifford recognized his algebra&#8217;s unique signiﬁcance as a representation of geometric concepts as conceived by Grassmann, mathematicians abstracted Clifford algebra from its geometric origins after his death and, for the better part of a century, it languished as a minor sub-discipline of mathematics; one more algebra among so many others<sup class='endnote'><a href='#en-270-16' id='enref-270-16' onclick='return hhEndnotes_show(270)'>16</a></sup>.</p>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_433" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/ga-hestenes-dev.png"><img class="size-medium wp-image-433" src="/wp-content/uploads/2015/08/ga-hestenes-dev-300x184.png" alt="ga-hestenes-dev" width="300" height="184" srcset="/wp-content/uploads/2015/08/ga-hestenes-dev-300x184.png 300w, /wp-content/uploads/2015/08/ga-hestenes-dev-768x471.png 768w, /wp-content/uploads/2015/08/ga-hestenes-dev.png 844w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Revival and Development of GA starting at David Hestenes research efforts</p></div>
</div>

                            </div>
                        </div>
<p>In 1966 <a href="https://en.wikipedia.org/wiki/David_Hestenes">David Orlin Hestenes</a> published his book &#8220;Space-Time Algebra&#8221;, motivated by a set of lecture notes by Marcel Riesz later published in 1993; launching him along three main lines of research:</p>
<ol>
<li>A straightforward reformulation of classical physics in terms of Clifford&#8217;s geometric algebra producing the first comprehensive coordinate-free treatment of Newtonian mechanics,  including rotational dynamics as explained in his book &#8220;New Foundations for Classical Mechanics&#8221;, in addition to a similar reformulation of classical electrodynamics.</li>
<li>Reformulating the Dirac equation in terms of Geometric Algebra. This revealed a hidden geometric structure in quantum mechanics, including a  hitherto unrecognized geometric interpretation for the unit imaginary relating it unequivocally to electron spin.</li>
<li>To produce a self-contained system of mathematical tools sufficient for addressing any problem in physics without resorting to alternative mathematical formalisms; as explained in his book &#8220;Clifford Algebra to Geometric Calculus, A Unified Language for Mathematics and Physics&#8221;.</li>
</ol>
<p>Hestenes received <a href="https://en.wikipedia.org/wiki/David_Hestenes#Awards_and_fellowships">several awards</a> related to his efforts in teaching physics using GA. As he describes his work in reviving Clifford and Grassmann&#8217;s work:</p>
<blockquote><p>I was consciously concerned with questions relating the structure of these mathematical systems to the structure of the physical world. One day Riesz’s notes appeared on the new-book shelf of the UCLA library. The impact on me was immediate and striking! By the time I was half way through the first chapter I was convinced that Clifford algebra was the key to unifying mathematical physics. During the next few years I worked out the framework for a fully geometric unification. The result was published in my book Space Time Algebra (1966). Fortunately, my book was widely distributed, and it helped me establish many fruitful contacts throughout the world in subsequent years. However, I believe its impact would have dissipated had I not followed it up with years of further research, lectures and publications. Also, I believe that the significance of Riesz’s notes would have remained unrecognized without the citation in my book, which eventually led to publication (in 1993). Though the book launched me on a program to unify mathematical physics, I refrained from proclaiming the product as a universal Geometric Algebra and Calculus until subsequent research convinced me that was fully justified. I was well aware that its roots were in the work of Grassmann, but it was not until the English translations of the Ausdehnungslehre by Lloyd Kannenberg that I realized how deep those roots were.</p></blockquote>
<p>Later on, Hestenes ideas in physics found their way into many computer science and engineering applications over the last 15 years. We are still at the beginning of the road to exploring this powerful abstract number system for our ever growing geometric dependent applications.</p>
<p>&nbsp;</p>
<h3>GA&#8217;s Multivectors: The Spacious Number System</h3>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>Physics is mathematical not because we know so much about the physical world, but because we know so little; it is only its mathematical properties that we can discover.</p>
<p style="text-align: right;"><em><strong>&#8212; Bertrand Russell</strong></em></p>
</blockquote>
</div>
</div></div>
<p>A geometric algebra is constructed from a set of <span class="wp-katex-eq" data-display="false">n</span> basis vectors on a scalar field (for example real or complex numbers) and a symmetric bilinear form defining the metric (i.e. the scalar-valued inner product of pairs of basis vectors). Using Clifford&#8217;s geometric product a set of <span class="wp-katex-eq" data-display="false">2^{n}</span> basis blades, representing main subspaces of the algebra of dimensions 0 to <span class="wp-katex-eq" data-display="false">n</span>, are constructed. Multivectors, our geometric numbers, are linear combinations of the basis blades. All GA algebraic operations and beauty follow from this simple construction.</p>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_426" style="width: 964px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/ga-basis-blades.png"><img class="size-full wp-image-426" src="/wp-content/uploads/2015/08/ga-basis-blades.png" alt="ga-basis-blades" width="954" height="294" srcset="/wp-content/uploads/2015/08/ga-basis-blades.png 954w, /wp-content/uploads/2015/08/ga-basis-blades-300x92.png 300w, /wp-content/uploads/2015/08/ga-basis-blades-768x237.png 768w" sizes="(max-width: 954px) 100vw, 954px" /></a><p class="wp-caption-text">GA basis blades are constructed from basis vectors using the outer product (<a href="http://www2.ic.uff.br/~laffernandes/projects/ga/2009_SIBGRAPI_tutorial/fernandes_oliveia_SIBGRAPI_2009_tutorial_slides.pdf">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<div class="su-spacer" style="height:20px"></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_417" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/ga-R3-blades.png"><img class="size-medium wp-image-417" src="/wp-content/uploads/2015/08/ga-R3-blades-300x274.png" alt="ga-R3-blades" width="300" height="274" srcset="/wp-content/uploads/2015/08/ga-R3-blades-300x274.png 300w, /wp-content/uploads/2015/08/ga-R3-blades.png 406w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">The 3D Euclidean GA has 8 basis blades constructed from 3 basis vectors (<a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.158.4974&amp;rep=rep1&amp;type=pdf">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>I will not go into the mathematical and geometric properties of GA in this post, after all, the whole site is dedicated to exploring GA, but I will mention some of its general characteristic strengths as an algebraic language for geometry compared to traditional matrix-based linear algebra for geometric modeling<sup class='endnote'><a href='#en-270-17' id='enref-270-17' onclick='return hhEndnotes_show(270)'>17</a></sup>:</p>
<p>1. GA can be used to model many geometries including non-Euclidean ones. The same algebraic structure can have many geometric modeling interpretations<sup class='endnote'><a href='#en-270-18' id='enref-270-18' onclick='return hhEndnotes_show(270)'>18</a></sup>.</p>
<div class="su-spacer" style="height:20px"></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_419" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/ga-spaces.png"><img class="wp-image-419 size-medium" src="/wp-content/uploads/2015/08/ga-spaces-300x227.png" alt="ga-spaces" width="300" height="227" srcset="/wp-content/uploads/2015/08/ga-spaces-300x227.png 300w, /wp-content/uploads/2015/08/ga-spaces.png 474w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">GA can be used to study non-Euclidean Geometries (<a href="https://arxiv.org/pdf/1101.4542v3.pdf">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>2. Many familiar algebraic entities can be considered isomorphic to special cases of multivectors. These include real numbers, complex numbers, quaternions, and vectors of many types (position, direction, and normal vectors), Many types of matrices, typically used as linear transforms, can be replaced by GA multivectors including orthogonal matrices, <a href="https://en.wikipedia.org/wiki/Pauli_matrices">Pauli matrices</a>, and <a href="https://en.wikipedia.org/wiki/Homogeneous_coordinates">homogeneous transform matrices</a>.</p>
<div class="su-spacer" style="height:20px"></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_411" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/ga-3d-rotation.png"><img class="wp-image-411 size-medium" src="/wp-content/uploads/2015/08/ga-3d-rotation-300x236.png" alt="ga-3d-rotation" width="300" height="236" srcset="/wp-content/uploads/2015/08/ga-3d-rotation-300x236.png 300w, /wp-content/uploads/2015/08/ga-3d-rotation.png 560w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Quaternions as GA versors (<a href="http://geometricalgebra.net/figures.html">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>3. Grassmann&#8217;s outer product can be used inside GA to construct algebraic entities called blades, one type of multivectors, that represent subspaces of the base vector space. Depending on the selected geometric model for the vectors, blades will be a systematic representation of geometric primitives inside the selected geometry.</p>
<div class="su-spacer" style="height:20px"></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_423" style="width: 271px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/ga-blades-geometry.png"><img class="wp-image-423 size-medium" src="/wp-content/uploads/2015/08/ga-blades-geometry-261x300.png" alt="ga-blades-geometry" width="261" height="300" srcset="/wp-content/uploads/2015/08/ga-blades-geometry-261x300.png 261w, /wp-content/uploads/2015/08/ga-blades-geometry.png 579w" sizes="(max-width: 261px) 100vw, 261px" /></a><p class="wp-caption-text">The same GA blade (subspace) can have several geometric interpretations (<a href="http://www2.ic.uff.br/~laffernandes/projects/ga/2009_SIBGRAPI_tutorial/fernandes_oliveia_SIBGRAPI_2009_tutorial_slides.pdf">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>4. Linear transformations on the base vector space can be easily extended and directly applied to blades (subspaces) using what is called <a href="https://en.wikipedia.org/wiki/Outermorphism">outermorphisms</a>. Now we can algebraically manipulate the geometric primitives of our selected geometry by linear transformations without the use of matrices if we want.</p>
<p>5. Orthogonal transformations (linear transformations consisting of a series of reflections on hyperplanes) are very important for many geometric applications. GA can efficiently represent and apply such transformations using a special kind of multivectors called a versor. This is a very good alternative for orthogonal matrices both theoretically and computationally in many situations.</p>
<div class="su-spacer" style="height:20px"></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_410" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/ga-3d-reflection.png"><img class="wp-image-410 size-medium" src="/wp-content/uploads/2015/08/ga-3d-reflection-300x226.png" alt="ga-3d-reflection" width="300" height="226" srcset="/wp-content/uploads/2015/08/ga-3d-reflection-300x226.png 300w, /wp-content/uploads/2015/08/ga-3d-reflection.png 530w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">In GA, versors come from using vectors as reflection operators; all orthogonal transformations are series of reflections (<a href="http://geometricalgebra.net/figures.html">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>6. Verosrs can be applied to geometric constructions in a &#8220;covariant&#8221; manner. In traditional matrix algebra, we need to analyze a subspace, representing some geometric entity, to its vector components before applying the orthogonal transform then reconstruct the transformed subspace\entity from the transformed vectors. In GA we can directly apply orthogonal transforms to geometric entities using versors and blades with no need for any extra overhead.</p>
<p>7. In GA many blades can act as versors, leading to the use of geometric entities as orthogonal transformations. One can, say, rotate a plane and reflect a circle on the rotated plane using the same multivectors with no conversion to any other algebraic representations. This is a very different concept, and indeed a very powerful one, compared to the traditional matrix algebra approach.</p>
<div class="su-spacer" style="height:20px"></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_414" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/ga-ops.png"><img class="wp-image-414 size-medium" src="/wp-content/uploads/2015/08/ga-ops-300x141.png" alt="ga-blades" width="300" height="141" srcset="/wp-content/uploads/2015/08/ga-ops-300x141.png 300w, /wp-content/uploads/2015/08/ga-ops-768x362.png 768w, /wp-content/uploads/2015/08/ga-ops-1024x482.png 1024w, /wp-content/uploads/2015/08/ga-ops-520x245.png 520w, /wp-content/uploads/2015/08/ga-ops-720x340.png 720w, /wp-content/uploads/2015/08/ga-ops.png 1153w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Geometric entities expressed as GA blades can be used to covariantly transform other geometric entities (<a href="https://staff.fnwi.uva.nl/t.h.koornwinder/specialdays/veldenwegen/Dorst.pdf">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>8. In some cases, GA can be used to find closed form expressions for geometric interpolations and perturbations of non-trivial kinds. This would very much help in developing algorithms for important geometric models.</p>
<div class="su-spacer" style="height:20px"></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_429" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/08/isea_img2_01_flat2.jpg"><img class="wp-image-429 size-medium" src="/wp-content/uploads/2015/08/isea_img2_01_flat2-300x146.jpg" alt="isea_img2_01_flat2" width="300" height="146" srcset="/wp-content/uploads/2015/08/isea_img2_01_flat2-300x146.jpg 300w, /wp-content/uploads/2015/08/isea_img2_01_flat2-768x373.jpg 768w, /wp-content/uploads/2015/08/isea_img2_01_flat2-1024x497.jpg 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">GA interpolations of motion using versors (<a href="http://isea2011.sabanciuniv.edu/paper/versor-proposal-system-organic-constructivism">Source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>9. GA can work well with traditional matrix-based modeling techniques. One can use a linear algebra software library and interface it with a GA model easily; no need to model everything into GA from scratch.</p>
<p>10. All the above and other GA characteristics can make life much easier for people creating computational code for geometric modeling applications. GA is consistent and systematic algebraically with direct geometric interpretation. You just need to select your model and do the math; programming is straight forward. For example take a look at <a href="https://vimeo.com/wolftype">these videos</a> created using the <a href="http://versor.mat.ucsb.edu/">Versor GA library</a>.</p>
<p>All these unique characteristics will certainly have deep influence, over the long run, on our understanding and development of geometric models in science and engineering. Many problems related to practical use and teaching of GA remain to be solved, but the concept had already been proven and the way is now much more clear for many researchers. In our next and final part of this functional history of numbers we will investigate another kind of numbers; the numbers we use in computing everything.</p>
<hr />
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<p style="text-align: center;"><span style="font-size: 28px; font-family: 'Traditional Arabic';"><strong>تم بحمد الله الجمعة 22 شوال 1436هـ</strong></span></p>
</div>
</div></div>
<hr />
<p>&nbsp;</p>
<div class='endnotes' id='hhendnotes-270'>
<ol>
<li id='en-270-1'>During my research for this post I found that the 1873 edition of James Clerk Maxwell&#8217;s &#8220;A Treatise on Electricity and Magnetism&#8221; contains 20 Quaternion Equations that later were rewritten by Oliver Heaviside, et al.. See <a href="http://www.rexresearch.com/maxwell.htm">here</a> and <a href="http://visualphysics.org/forum/topics/200-missing-quaternion-equations-maxwells-treatis-electromagnetism-edition-1">here</a> for some details <span class='endnotereverse'><a href='#enref-270-1'>&#8617;</a></span></li>
<li id='en-270-2'>Simon L. Altmann, &#8220;Rotations, Quaternions, and Double Groups&#8221;. Oxford University Press 1986 <span class='endnotereverse'><a href='#enref-270-2'>&#8617;</a></span></li>
<li id='en-270-3'>Simon L. Altmann, &#8220;Hamilton, Rodrigues, and the Quaternion Scandal&#8221;. Mathematics Magazine 62 (5): 306, December 1989. JSTOR 2689481. <span class='endnotereverse'><a href='#enref-270-3'>&#8617;</a></span></li>
<li id='en-270-4'>As later proven by Frobenius that the only possible associative division algebras are the real, complex, and quaternion algebras <span class='endnotereverse'><a href='#enref-270-4'>&#8617;</a></span></li>
<li id='en-270-5'>N. J. Wildberger has a series of video lectures on famous math problems, four of which introduce the rotation problem and Hamilton&#8217;s discovery of quaternions; the series can be found <a href="https://www.youtube.com/watch?v=uRKZnFAR7yw&amp;list=PLIljB45xT85Bfc-S4WHvTIM7E-ir3nAOf&amp;index=12">here</a>. <span class='endnotereverse'><a href='#enref-270-5'>&#8617;</a></span></li>
<li id='en-270-6'>See this <a href="https://www.youtube.com/watch?v=8CX-Q0gtSp8">intriguing video</a> for a glimpse <span class='endnotereverse'><a href='#enref-270-6'>&#8617;</a></span></li>
<li id='en-270-7'>For example David Poole, &#8220;Linear Algebra, a Modern Introduction, 4th Edition&#8221;. Cengage Learning 2015 <span class='endnotereverse'><a href='#enref-270-7'>&#8617;</a></span></li>
<li id='en-270-8'>For example Sheldon Axler, &#8220;Linear Algebra Done Right, Third Edition&#8221;. Springer 2015 <span class='endnotereverse'><a href='#enref-270-8'>&#8617;</a></span></li>
<li id='en-270-9'>Israel Kleiner, &#8220;A History of Abstract Algebra&#8221;. Birkhauser Boston 2007 <span class='endnotereverse'><a href='#enref-270-9'>&#8617;</a></span></li>
<li id='en-270-10'>Gottfried Leibniz, letter to Christian Huygens (8 September 1679) &#8220;I believe that, so far as geometry is concerned, we need still another analysis which is distinctly geometrical or linear and which will express situation directly as algebra expresses magnitude directly.&#8221;, in Gottfried Leibniz &#8220;Philosophical Papers and Letters, 2nd Edition&#8221;. Springer 1976 <span class='endnotereverse'><a href='#enref-270-10'>&#8617;</a></span></li>
<li id='en-270-11'>Roger Penrose, &#8220;The Road to Reality: A Complete Guide to the Laws of the Universe&#8221;. Vintage 2007 <span class='endnotereverse'><a href='#enref-270-11'>&#8617;</a></span></li>
<li id='en-270-12'>Gert Schubring (Editor), &#8220;Hermann Günther Graßmann (1809–1877): Visionary Mathematician, Scientist and Neohumanist Scholar, Papers from a Sesquicentennial Conference&#8221;. Springer Netherlands 1996 <span class='endnotereverse'><a href='#enref-270-12'>&#8617;</a></span></li>
<li id='en-270-13'>Hans-Joachim Petsche, Albert C. Lewis, Jörg Liesen, Steve Russ (Editors), &#8220;From Past to Future: Graßmann&#8217;s Work in Context, Graßmann Bicentennial Conference, September 2009&#8221;. Springer Basel 2011 <span class='endnotereverse'><a href='#enref-270-13'>&#8617;</a></span></li>
<li id='en-270-14'>A.N. Kolmogorov and A.P. Yushkevich (Editors), &#8220;Mathematics of the 19th Century, Mathematical Logic Algebra Number Theory Probability Theory&#8221;. Birkhäuser Basel 2001 <span class='endnotereverse'><a href='#enref-270-14'>&#8617;</a></span></li>
<li id='en-270-15'>For a good explanation of the differences between Grassmann algebra and Clifford algebra see Roger Penrose&#8217;s book &#8220;The Road To Reality&#8221; <span class='endnotereverse'><a href='#enref-270-15'>&#8617;</a></span></li>
<li id='en-270-16'>David Hestenes, &#8220;Oersted Medal Lecture 2002: Reforming the Mathematical Language of Physics&#8221;. American Journal of Physics 71, 104 (2003) <span class='endnotereverse'><a href='#enref-270-16'>&#8617;</a></span></li>
<li id='en-270-17'>For more very interesting details see Leo Dorst, Daniel Fontijne, and Stephen Mann, &#8220;Geometric Algebra for Computer Science (Revised Edition): An Object-Oriented Approach to Geometry&#8221;. Morgan Kaufmann 2009 <span class='endnotereverse'><a href='#enref-270-17'>&#8617;</a></span></li>
<li id='en-270-18'>G. Sommer (Editor), &#8220;Geometric Computing with Clifford Algebra&#8221;. Springer-Verlag Heidelberg 2000 <span class='endnotereverse'><a href='#enref-270-18'>&#8617;</a></span></li>
</ol>
</div>
<p>The post <a rel="nofollow" href="/index.php/2015/08/07/history-of-numbers2/">A Functional History of Numbers (2 of 3)</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/2015/08/07/history-of-numbers2/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>The Abstract</title>
		<link>/index.php/2015/07/03/the-abstract/</link>
		<comments>/index.php/2015/07/03/the-abstract/#respond</comments>
		<pubDate>Fri, 03 Jul 2015 14:00:18 +0000</pubDate>
		<dc:creator><![CDATA[Ahmad Eid]]></dc:creator>
				<category><![CDATA[Geometric Algebra]]></category>
		<category><![CDATA[Abstraction]]></category>
		<category><![CDATA[Computing]]></category>
		<category><![CDATA[GA]]></category>
		<category><![CDATA[Teaching]]></category>

		<guid isPermaLink="false">http://gacomputing.info/?p=130</guid>
		<description><![CDATA[<p>I've been dealing with mathematical abstractions most of my life, as a student then as a software engineer and faculty member, on various levels and forms. My experience is like trying to find a safe path in a big forest of data and ideas that keep on growing and changing each day.</p>
<p>The post <a rel="nofollow" href="/index.php/2015/07/03/the-abstract/">The Abstract</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></description>
				<content:encoded><![CDATA[<div class='dropshadowboxes-container ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-note" style="border-color:#e5e5e5;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#ffffff;border-color:#ffffff;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<p><a href="/wp-content/uploads/2015/07/The-Abstract.jpeg"><img class="aligncenter wp-image-3894 size-full" src="/wp-content/uploads/2015/07/The-Abstract.jpeg" alt="The Abstract" width="1280" height="960" srcset="/wp-content/uploads/2015/07/The-Abstract.jpeg 1280w, /wp-content/uploads/2015/07/The-Abstract-300x225.jpeg 300w, /wp-content/uploads/2015/07/The-Abstract-768x576.jpeg 768w, /wp-content/uploads/2015/07/The-Abstract-1024x768.jpeg 1024w" sizes="(max-width: 1280px) 100vw, 1280px" /></a></p>
</div>
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>If people do not believe that mathematics is simple, it is only because they do not realize how complicated life is.</p>
<p style="text-align: right;"><em><strong>&#8212; John von Neumann</strong></em></p>
</blockquote>
</div>
</div></div>

                            </div>
                        </div>
<hr />
<span class="dropcap">A</span>bstraction is a fundamental human skill and tool for understanding the universe. If you&#8217;re an artist expressing emotions and visual experiences, if you&#8217;re a mathematician investigating theorems and proofs, if you&#8217;re an engineer designing models and performing simulations, if you&#8217;re a software developer creating code for software systems, or if you&#8217;re an educator in need for transferring knowledge and motivating skills you must use abstraction to &#8220;create and communicate&#8221;. In one book about abstraction <sup class='endnote'><a href='#en-130-1' id='enref-130-1' onclick='return hhEndnotes_show(130)'>1</a></sup> the following definition is adopted:</p>
<blockquote><p>abstraction is deﬁned as &#8220;the process of extracting the underlying essence of a mathematical concept, removing any dependence on real world objects with which it might originally have been connected, and generalizing it so that it has wider applications.&#8221; A good illustrative example of this abstraction process is geometry, which started from the observation and measurement of physical spaces and forms, moving then to the abstract axioms of the Euclidean geometry, and, later on, to non-Euclidean geometries, farther and farther removed from the perceived physical world. An interesting aspect of abstraction is that an increase in the level of abstraction is paralleled by a deepening in the understanding of the connections among mathematical concepts. For instance, by abstracting the Non-Euclidean geometry to “the study of properties invariant under a given group of symmetries” has revealed deep connections between geometry and abstract algebra. Moreover, abstraction can suggest direction of knowledge transfer among different domains.</p></blockquote>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_249" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/07/254-750x726.jpg"><img class="size-medium wp-image-249" src="/wp-content/uploads/2015/07/254-750x726-300x290.jpg" alt="The Forest of Abstractions" width="300" height="290" srcset="/wp-content/uploads/2015/07/254-750x726-300x290.jpg 300w, /wp-content/uploads/2015/07/254-750x726.jpg 750w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">The Forest of Abstractions</p></div>
</div>

                            </div>
                        </div>
<p>I&#8217;ve been dealing with mathematical abstractions most of my life, as a student then as a software engineer and faculty member, on various levels and forms. My experience is like trying to find a safe path in a big forest of data and ideas that keep on growing and changing each day. Abstractions are like trees in the big forest; some are very tall and hard to climb but if you could reach their top you uncover vast areas of ideas and directions and you may even gain some wisdom about life itself. Some other abstractions are so weak and short-lived they just keep you warm at night or perhaps you can make a rope to climb the other tall trees of abstraction the next morning. Some abstractions are elegant and beautiful but may bear little fruit for quite some time (practical applications). Some abstractions are ugly but many depend on them for their practical usefulness. It also may happen that strong useful trees of abstraction can hide taller and better ones from our &#8220;mental vision&#8221; and at some point, we have to either jump from them or completely cut them down from our minds to get higher. Finding a safe path inside such forest is a blessing, not all are granted. Worse yet you could find your safe path and walk it alone as no other sees its elegance, usefulness, and security except you. Then you would have to call for a company by creating a website like this one.</p>
<p>Writing your first computer code at 11 and continuing to write more code for 25 or more years gives you many joys, disappointments, questions, ideas, and ultimately more knowledge. From an early stage, you realize that mathematics is both a fuel and limit for your computing skills. The more efficient your mathematical abstractions are the more powerful ideas you have, the more you can realize in your code, and the more wisdom you gain. This intuition was emphasized in my engineering study and practice through the universal presence of mathematics in computer science books and articles more than any other engineering discipline. Searching for and using good mathematical abstractions is, in my opinion, an important task for anyone in my position.</p>
<p>&nbsp;</p>
<h3>The Linear Engineer</h3>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>When the number of factors coming into play in a phenomenological complex is too large scientific method in most cases fails. One need only think of the weather, in which case the prediction even for a few days ahead is impossible.</p>
<p style="text-align: right;"><em><strong>&#8212; Albert Einstein</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_3889" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/07/1148px-Flagellum_base_diagram_en.svg.png"><img class="wp-image-3889 size-medium" src="/wp-content/uploads/2015/07/1148px-Flagellum_base_diagram_en.svg-300x268.png" alt="Flagellum_base_diagram" width="300" height="268" srcset="/wp-content/uploads/2015/07/1148px-Flagellum_base_diagram_en.svg-300x268.png 300w, /wp-content/uploads/2015/07/1148px-Flagellum_base_diagram_en.svg-768x685.png 768w, /wp-content/uploads/2015/07/1148px-Flagellum_base_diagram_en.svg-1024x913.png 1024w, /wp-content/uploads/2015/07/1148px-Flagellum_base_diagram_en.svg.png 1148w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Engineers can only learn from nature if they fully embrace its non-linearity</p></div>
</div>

                            </div>
                        </div>
<p>Up to high school, one gets usually familiar with some useful but &#8220;apparently distinct&#8221; mathematical abstractions. Several number systems (typically natural, rational, real, and complex numbers) are introduced. Polynomial algebra on real numbers is studied. Euclidean geometry in 2D and 3D (usually started by trigonometry and some analytic geometry) is presented. And some calculus is used to link the physical world to the mathematical world <sup class='endnote'><a href='#en-130-2' id='enref-130-2' onclick='return hhEndnotes_show(130)'>2</a></sup>. Each of these abstractions is usually taught as a set of &#8220;mathematical recipes&#8221; that are barely related together by any common thread of thought. This method of teaching is very annoying, and ultimately limiting, to &#8220;deep thinkers&#8221; on both sides: teachers and students.</p>
<p>The first shock usually comes in the &#8220;higher education&#8221; at the university. One would expect that the sets of &#8220;mathematical recipes&#8221; would somehow merge into a set of smaller, more powerful and seamlessly integrating mathematical abstractions to suit the needs of engineers and scientists. Instead, I found myself lost in a larger, more divided forest of &#8220;mathematical tools&#8221; rather than the well designed &#8220;garden of abstract knowledge&#8221; that I expected to enter into my engineering study.</p>
<p>During my first year <sup class='endnote'><a href='#en-130-3' id='enref-130-3' onclick='return hhEndnotes_show(130)'>3</a></sup> I found the first step to my path, a.k.a Abstract Linear Algebra <sup class='endnote'><a href='#en-130-4' id='enref-130-4' onclick='return hhEndnotes_show(130)'>4</a></sup>. I was blessed to be taught this course by Dr. Muhammad Yossuf <sup class='endnote'><a href='#en-130-5' id='enref-130-5' onclick='return hhEndnotes_show(130)'>5</a></sup> who had us view vectors and linear transforms as the elegant abstractions of Euclidean directions, positions, and motions, but with richer, deeper meanings and wider applicability by treating matrices as &#8220;convenient computational tools&#8221; rather than &#8220;mindless mathematical recipes&#8221;. This was my first time to climb a big abstraction tree and see the heavens and earth from higher grounds. The power of this concept of &#8220;linear abstraction&#8221; enabled me to view hidden links between seemingly diverse subjects of study in later years (like automatic control, differential equations, numerical analysis, and signal processing for example). Now I could invent new &#8220;mathematical recipes&#8221; and cook them into large amounts of computer code without losing insight into the basic idea behind the code. And once you find such path it&#8217;s impossible to go back.</p>
<p>It&#8217;s not strange that linear algebra is very important to engineers in all fields <sup class='endnote'><a href='#en-130-6' id='enref-130-6' onclick='return hhEndnotes_show(130)'>6</a></sup>. For example, the following statement taken from one signal processing book <sup class='endnote'><a href='#en-130-7' id='enref-130-7' onclick='return hhEndnotes_show(130)'>7</a></sup> can be found in many engineering books in some form or another:</p>
<blockquote><p>Much information is available for both the analysis and design of LTI (linear time-invariant) systems. This is especially true for system design. In fact, in preliminary design stages for non-LTI physical systems, we often fit a LTI model to the physical system so as to have a starting point for the design. The LTI model may not be very accurate, but the use of an LTI model allows us to initiate the design process with standard design procedures.</p></blockquote>
<p>I discovered after graduation, as my second shock, that the universe is mostly non-linear, that there is nothing that can be time-invariant because of the second law of thermodynamics, and that most systems are very sensitive to initial conditions to be predictable for indefinite periods of time (as clearly stated by chaos theory and widely experienced in practice). Nevertheless, a linear system is a good starting point to model and solve almost all problems in engineering; mostly because many engineers are afraid of the darkness of the mathematics of non-linear chaotic systems, a very dark part of the mathematical forest of abstractions.</p>
<p>&nbsp;</p>
<h3>The Geometric Engineer</h3>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>The engineer is concerned to travel from the abstract to the concrete. He begins with an idea and ends with an object. He journeys from theory to practice. The scientist’s job is the precise opposite. He explores nature with his telescopes or microscopes, or much more sophisticated techniques, and feeds into a computer what he finds or sees in an attempt to define mathematically its significance and relationships. He travels from the real to the symbolic, from the concrete to the abstract. The scientist and the engineer are the mirror image of each other.</p>
<p style="text-align: right;"><em><strong>&#8212; Gordon Lindsay Glegg</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_3886" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/07/construction-2682641_1280.jpg"><img class="wp-image-3886 size-medium" src="/wp-content/uploads/2015/07/construction-2682641_1280-300x169.jpg" alt="construction-2682641_1280" width="300" height="169" srcset="/wp-content/uploads/2015/07/construction-2682641_1280-300x169.jpg 300w, /wp-content/uploads/2015/07/construction-2682641_1280-768x432.jpg 768w, /wp-content/uploads/2015/07/construction-2682641_1280-1024x576.jpg 1024w, /wp-content/uploads/2015/07/construction-2682641_1280.jpg 1280w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Geometry and Engineering are tightly linked</p></div>
</div>

                            </div>
                        </div>
<p>In Arabic, the word engineering is pronounced &#8220;Handasah&#8221; and is said to be of Persian origin meaning &#8220;the ability to solve problems&#8221;. The word geometry is also called &#8220;Handasah&#8221; in Arabic; definitely not a coincidence. Since the dawn of human civilization geometry and engineering were the same. It appears that the need for regulating water supply and creating landmark buildings in the ancient world along with the inbuilt ability of the human brain to reason in 3D space was the origin of all engineering. Engineers can never understand, model, create or maintain any technology without using a geometry of some sort. The natural way of expressing and understanding geometry is to draw elegant diagrams that made us proud in our first years as engineering students while taking care of drawing each line and writing every dimension.  Although lines and planes are common in many engineering designs, they are not the only objects; not even the most important ones. Spheres, cylinders, cones, and many more complex non-linear objects are known and have been used through history.</p>
<p>Throughout history, the main efforts to further our understanding and use of geometry have always been through algebra. From the very old theory of Pythagoras, through the vast advancements of algebra, trigonometry, and geometry by Muslim mathematicians <sup class='endnote'><a href='#en-130-8' id='enref-130-8' onclick='return hhEndnotes_show(130)'>8</a></sup>, to the modern view of Cayley–Klein geometry <sup class='endnote'><a href='#en-130-9' id='enref-130-9' onclick='return hhEndnotes_show(130)'>9</a></sup>, the struggle was to find algebraic abstractions to express geometric ideas. Currently, we have many such algebraic abstractions (too many in fact); the problem now is not to find such abstractions, but how to teach them to whom it may concern!</p>
<p>&nbsp;</p>
<h3>The Computational Engineer</h3>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>Failure is central to engineering. Every single calculation that an engineer makes is a failure calculation. Successful engineering is all about understanding how things break or fail.</p>
<p style="text-align: right;"><em><strong>&#8212; Henry Petroski</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_3885" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/07/Jet_engine_simulation.jpg"><img class="wp-image-3885 size-medium" src="/wp-content/uploads/2015/07/Jet_engine_simulation-300x233.jpg" alt="Jet_engine_simulation" width="300" height="233" srcset="/wp-content/uploads/2015/07/Jet_engine_simulation-300x233.jpg 300w, /wp-content/uploads/2015/07/Jet_engine_simulation.jpg 616w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Simulation and Computer Aided Design are standard tools for modern engineering</p></div>
</div>

                            </div>
                        </div>
<p>To create software based on geometric abstractions it&#8217;s impossible to &#8220;directly&#8221; explain yourself to a computer through the human method of diagrams and verbal explanations. One must use algebra, expressed as data structures and algorithms, to &#8220;generate&#8221; the code that implements the intended geometric knowledge. Even software systems with graphical user interfaces (GUIs) like AutoCAD and 3ds Max use algebra-based data structures and algorithms internally. The GUI is just a layer for our human convenience not for any intrinsic need of the computer itself <sup class='endnote'><a href='#en-130-10' id='enref-130-10' onclick='return hhEndnotes_show(130)'>10</a></sup>. In our study as engineers, the use of vector algebra and vector calculus is dominant. Any software library dealing with geometry must have matrices and vectors built into its core. My third &#8220;shock of abstraction&#8221; that happened after completing my M.Sc. was to find this use not motivated by the lack of better algebraic systems, but rather by a &#8220;series of unfortunate events!&#8221; <sup class='endnote'><a href='#en-130-11' id='enref-130-11' onclick='return hhEndnotes_show(130)'>11</a></sup>. In addition, not all problems that can be described mathematically can be computed. The set of problems that we can &#8220;theoretically&#8221; compute solutions for is closely linked to the existence of an algorithm to solve the problem. Even in that theoretical set of computable problems we need to find an algorithm that produces acceptable results in &#8220;reasonable&#8221; time, hardware, and input-size requirements (remember the big O notation). One other problem is to find a programming language that &#8220;suits&#8221; the algorithm we found. The code should be writable, readable, and in general beautiful code <sup class='endnote'><a href='#en-130-12' id='enref-130-12' onclick='return hhEndnotes_show(130)'>12</a></sup>. The first two problems are the hardest theoretically; the third is the hardest practically.</p>
<p>There are two main kinds of programming languages: the general and the specific. General purpose programming languages are dominant in creating geometric-algebraic solutions to our problems. Everybody knows C++, Java, C#, Python, or some other such language. But generality comes with many problems in readability, writablity, and elegance of written code. In addition creating code by a general-purpose programming language usually separates the designer of the algorithm from the developer of the code. If the &#8220;geometric modeler&#8221; tries to write the code himself, as he should, using a general purpose language all kinds of problems often occur including memory leaks, bad performance, and having to learn the full details of a whole language just to create an efficient implementation of a required algorithm. Object-oriented programming may solve some of these problems, but a good tool to implement computational software should contain a domain specific language (DSL)<sup class='endnote'><a href='#en-130-13' id='enref-130-13' onclick='return hhEndnotes_show(130)'>13</a></sup> that can be used directly by the &#8220;domain expert&#8221; to write code that can be translated automatically to machine code or to a general purpose language code as an intermediate stage of compilation.</p>
<p>&nbsp;</p>
<h3>The Pedagogical Engineer</h3>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>Put glibly: In science if you know what you are doing you should not be doing it. In engineering if you do not know what you are doing you should not be doing it. Of course, you seldom, if ever, see either pure state.</p>
<p style="text-align: right;"><em><strong>&#8212; Richard Hamming</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<div id="attachment_3887" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/07/Descriptive-Geometry.jpg"><img class="wp-image-3887 size-medium" src="/wp-content/uploads/2015/07/Descriptive-Geometry-300x221.jpg" alt="Descriptive Geometry" width="300" height="221" srcset="/wp-content/uploads/2015/07/Descriptive-Geometry-300x221.jpg 300w, /wp-content/uploads/2015/07/Descriptive-Geometry.jpg 736w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Learning Descriptive Geometry is a good way for developing engineering intuition</p></div>
</div>

                            </div>
                        </div>
<p><a href="https://en.wikipedia.org/wiki/Pedagogy" target="_blank" rel="noopener">Pedagogy</a> is the discipline that deals with the theory and practice of education; it thus concerns the study and practice of how best to teach. A good teacher is always on the search for better ways to transfer knowledge and skills to students. The most important skill to be transferred to engineering students is the ability to self-educate. Dealing with new technology every day, especially in computer science, is impossible without such vital skill. But all engineering is based on mathematical abstractions; especially the algebraic, geometric, and computational abstractions. The nature of many mathematical abstractions used in teaching is, in my own experience as an engineering student and teacher, the most limiting for motivating and transferring the skill of self-education. The same conceptually intuitive geometric abstraction is expressed using too many algebraic tools.</p>
<p>Let&#8217;s take the simple concept of &#8220;rotation&#8221; as an example. Rotation is so geometrically basic that we deal with it easily in childhood; as individual children and as early human collective knowledge. Then we are taught to express rotations in the plane using trigonometry, After some time we use orthogonal matrices for the same purpose in 2D and 3D. If we take a course in electrical circuits we discover that electrical engineers deal with constant frequency &#8220;rotating vectors&#8221; in the form of complex-valued exponential functions. If we use some computer graphics library like DirectX we use something called a <a href="https://en.wikipedia.org/wiki/Quaternion" target="_blank" rel="noopener">quaternion</a> to perform rotations in 3D space. The simple concept of rotation is expressed using <a href="https://en.wikipedia.org/wiki/Rotation_formalisms_in_three_dimensions" target="_blank" rel="noopener">too many algebraic abstractions</a> with no apparent connection and no easy way of deciding when to use each tool and how to convert the geometric data to suit that algebraic tool.</p>
<p>The direct result of such problem is a limited number of geometrically competent engineers; a very frustrating outcome for many teachers and students alike. Another consequence is the need for many teaching hours per subject to establish a mathematical base of algebraic tools specific to that subject <sup class='endnote'><a href='#en-130-14' id='enref-130-14' onclick='return hhEndnotes_show(130)'>14</a></sup>. If there were a single abstract framework to be taught once for most subjects that would make more time for teaching the engineering concepts rather than the mathematical tools. The current state of affairs in engineering teaching is a lack of such a unifying framework; after all, abstraction is about unification through extraction of common patterns.</p>
<p>&nbsp;</p>
<h3>Into The Geometric Algebra Pathway</h3>
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>The wonderful thing about maths is it&#8217;s a totally logical subject, and a pathway has been marked out. I think a lot of these things can be crystallised in something quite essential, that people can get. If I can&#8217;t explain it, I realise that&#8217;s probably because I don&#8217;t completely understand it myself.</p>
<p style="text-align: right;"><em><strong>&#8212; Marcus du Sautoy</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#F1F1F1;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeIn" data-duration="2" data-delay="0">
<p><a href="/wp-content/uploads/2015/07/time-2919087_640.jpg"><img class="aligncenter wp-image-3896 size-medium" src="/wp-content/uploads/2015/07/time-2919087_640-300x231.jpg" alt="" width="300" height="231" srcset="/wp-content/uploads/2015/07/time-2919087_640-300x231.jpg 300w, /wp-content/uploads/2015/07/time-2919087_640.jpg 640w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
</div>

                            </div>
                        </div>
<p>To summarize:</p>
<ul>
<li>We need to be linear engineers; to find linear approximations for non-linear systems and create models accordingly.</li>
<li>We need to be geometric engineers; to think geometrically about our models and express our ideas algebraically.</li>
<li>We need to be computational engineers; to develop algorithms and implement them, at least partially, using domain specific languages suitable for our needs.</li>
<li>We need to be pedagogical engineers; to find a unifying mathematical abstraction suitable for building engineering skills in ourselves and our students in the most efficient manner.</li>
</ul>
<p>The key point here is &#8220;algebraic abstraction&#8221;. We need to find some compact mathematical algebraic abstraction, superseding the common ones, that directly corresponds to our human geometric intuition. This abstraction should be general enough to express and generalize familiar abstractions (like complex numbers, quaternions, subspace operations, linear transformations, and more) using a unified framework of algebraic tools. Now we can think geometrically and directly express our algorithms using a uniform algebraic framework and interpret the results efficiently. Creating a simple DSL based on such abstraction would be much easier as a great step in unifying computational geometry. Teaching geometry using such algebraic and programmatic tools would be efficient, fulfilling, and much more productive to students and teachers.</p>
<p>The reason this website is mainly dedicated to <a href="https://en.wikipedia.org/wiki/Geometric_algebra">Geometric Algebra</a> is that it has the potential of being <strong><em>the</em></strong> algebraic abstraction system for geometric processing for this century, just as vector algebra was for the 20th century. My goal isn&#8217;t to add to the mathematics behind GA, that&#8217;s already been done quite sufficiently, but rather to illustrate, reformulate, explore, and implement solutions to common problems in engineering and computer science in the abstract language of GA. That step has already been taken in physics with remarkable success. It&#8217;s about time to do the same on a wide scale in engineering and computer science. The title of this site &#8220;Geometric Algebra Computing&#8221; may have several meanings associated with it. One such meaning is given by <strong>Dr. Dietmar Hildenbrand</strong> (<a href="http://www.gaalop.de/dhilden/">http://www.gaalop.de/dhilden/</a>) the author of the book &#8220;<a href="https://www.amazon.com/Foundations-Geometric-Algebra-Computing-Geometry/dp/3642317936/ref=sr_1_1?ie=UTF8&amp;qid=1431672092&amp;sr=8-1&amp;keywords=dietmar+hildenbrand/">Foundations of Geometric Algebra Computing</a>&#8221; and creator of &#8220;<a href="http://www.gaalop.de/">Geometric Algebra Algorithms Optimizer (Gaalop)</a>&#8221; software. In his book, he defines <em><strong>“Geometric Algebra Computing”</strong></em> as:</p>
<blockquote><p>The geometrically intuitive development of algorithms using geometric algebra with a focus on their efficient implementation.</p></blockquote>
<p>Personally, I think about Geometric Algebra as a way of <em><strong>symbolic geometric thinking</strong></em>, not just another algebraic system. Computers can only be programmed when we fully understand the abstractions and processes involved in the problem at hand. Computing with Geometric Algebra is fascinating because it&#8217;s a high-level language for geometry as we humans think and understand and, at the same time, a logical algebraic system suitable for being a universal base for creating computer code for geometric processing using current compiler technology. Most of my research efforts are dedicated to illustrating and realizing the full potential of GA in various scientific computing applications.</p>
<p>I hope this site is successful in illustrating the power of GA-based linear models and DSLs. I hope you find your own path in the great forest of mathematical abstractions enjoyable and maturing.</p>
<hr />
<div class="su-note" style="border-color:#d9d9d9;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#F1F1F1;border-color:#fcfcfc;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<p style="text-align: center;"><span style="font-size: 28px; font-family: 'Traditional Arabic';"><strong>تم بحمد الله الجمعة 16 رمضان 1436هـ</strong></span></p>
</div>
</div></div>
<hr />
<p>&nbsp;</p>
<div class='endnotes' id='hhendnotes-130'>
<ol>
<li id='en-130-1'>Saitta, L. &#8220;Abstraction in Artificial Intelligence and Complex Systems&#8221;. Springer, 2013 <span class='endnotereverse'><a href='#enref-130-1'>&#8617;</a></span></li>
<li id='en-130-2'>Earl William Swokowski, &#8220;Calculus with Analytic Geometry: Alternate Edition&#8221;. Brooks/Cole, 1983 <span class='endnotereverse'><a href='#enref-130-2'>&#8617;</a></span></li>
<li id='en-130-3'>Our study begins with a general preparatory year followed by 4 years of specialized engineering study. So my first year was actually my second. <span class='endnotereverse'><a href='#enref-130-3'>&#8617;</a></span></li>
<li id='en-130-4'>Axler, S. J. &#8220;Linear Algebra Done Right, 3rd Edition&#8221;. Springer, 2014 <span class='endnotereverse'><a href='#enref-130-4'>&#8617;</a></span></li>
<li id='en-130-5'>In that same year I got a copy the handwritten lecture notes of another Abstract Algebra introductory course Dr. Muhammad Yossuf taught in earlier years. Though he didn&#8217;t give me the abstract algebra course himself, the lecture notes were enough to deliver his &#8220;messages of abstraction&#8221; elegantly; I&#8217;m deeply grateful for both courses <span class='endnotereverse'><a href='#enref-130-5'>&#8617;</a></span></li>
<li id='en-130-6'>Engineers rely on linearity to such extent that reminds me with the joke about the man who lost his money in a dark place but went to look for it in a far well-lit place because he simply can&#8217;t see in the dark <span class='endnotereverse'><a href='#enref-130-6'>&#8617;</a></span></li>
<li id='en-130-7'>Charles L. Phillips, John Parr, Eve Riskin, &#8220;Signals, Systems, and Transforms, 4th Edition&#8221;. Prentice Hall 2007 <span class='endnotereverse'><a href='#enref-130-7'>&#8617;</a></span></li>
<li id='en-130-8'>See J.L. Berggren, &#8220;Episodes in the Mathematics of Medieval Islam&#8221;. Springer 2003; and Jim Al-Khalili, &#8220;The House of Wisdom: How Arabic Science Saved Ancient Knowledge and Gave Us the Renaissance&#8221;. Penguin Books, 2012 <span class='endnotereverse'><a href='#enref-130-8'>&#8617;</a></span></li>
<li id='en-130-9'>Isaak Moiseevich Yaglom, &#8220;Geometries, Groups and Algebras in the Nineteenth Century &#8211; A History&#8221;. Ishi Press 2009 <span class='endnotereverse'><a href='#enref-130-9'>&#8617;</a></span></li>
<li id='en-130-10'>Actually, all such systems have some kind of scripting language or API to be used for modeling activities. This approach is preferred in many situations over GUI modeling <span class='endnotereverse'><a href='#enref-130-10'>&#8617;</a></span></li>
<li id='en-130-11'>The details of which is the subject of my second blog post <span class='endnotereverse'><a href='#enref-130-11'>&#8617;</a></span></li>
<li id='en-130-12'>Andy Oram, Greg Wilson (Editors), &#8220;Beautiful Code: Leading Programmers Explain How They Think&#8221;. O&#8217;Reilly Media, 2007 <span class='endnotereverse'><a href='#enref-130-12'>&#8617;</a></span></li>
<li id='en-130-13'>Martin Fowler, &#8220;Domain-Specific Languages&#8221;. Addison-Wesley Professional, 2010 <span class='endnotereverse'><a href='#enref-130-13'>&#8617;</a></span></li>
<li id='en-130-14'>The mathematical tools needed for signal processing and electrical circuits are different from computer graphics and robotics, for example <span class='endnotereverse'><a href='#enref-130-14'>&#8617;</a></span></li>
</ol>
</div>
<p>The post <a rel="nofollow" href="/index.php/2015/07/03/the-abstract/">The Abstract</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/2015/07/03/the-abstract/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
