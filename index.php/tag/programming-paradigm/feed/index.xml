<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Programming Paradigm &#8211; Geometric Algebra Explorer</title>
	<atom:link href="/index.php/tag/programming-paradigm/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Voyaging the Computational Universe with Geometric Algebra</description>
	<lastBuildDate>Mon, 23 Oct 2017 18:05:11 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.8.2</generator>

<image>
	<url>/wp-content/uploads/2016/12/cropped-GAExplorer-Icon-150x150.jpg</url>
	<title>Programming Paradigm &#8211; Geometric Algebra Explorer</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>GMac: The Next Generation (1 of 2)</title>
		<link>/index.php/2017/02/09/gmac-tng-1/</link>
		<pubDate>Thu, 09 Feb 2017 16:00:02 +0000</pubDate>
		<dc:creator><![CDATA[Ahmad Eid]]></dc:creator>
				<category><![CDATA[GA Software]]></category>
		<category><![CDATA[GMac]]></category>
		<category><![CDATA[Belief in Allah]]></category>
		<category><![CDATA[Computational Universe]]></category>
		<category><![CDATA[Effort]]></category>
		<category><![CDATA[Geometric Algebra]]></category>
		<category><![CDATA[Introverted]]></category>
		<category><![CDATA[Journey]]></category>
		<category><![CDATA[Object Oriented]]></category>
		<category><![CDATA[Ph.D.]]></category>
		<category><![CDATA[Programming Paradigm]]></category>
		<category><![CDATA[Requirements]]></category>
		<category><![CDATA[Software Engineering]]></category>

		<guid isPermaLink="false">https://gacomputing.info/?p=2532</guid>
		<description><![CDATA[<p>The belief that complex systems require armies of designers and programmers is wrong. A system that is not understood in its entirety, or at least to a significant degree of detail by a single&#46;&#46;&#46;</p>
<p>The post <a rel="nofollow" href="/index.php/2017/02/09/gmac-tng-1/">GMac: The Next Generation (1 of 2)</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2017/02/water-1828846_1280.jpg" data-rel="lightbox-0" title=""><img class="aligncenter size-large wp-image-2536" src="/wp-content/uploads/2017/02/water-1828846_1280-1024x682.jpg" alt="Water Drop" width="1024" height="682" srcset="/wp-content/uploads/2017/02/water-1828846_1280-1024x682.jpg 1024w, /wp-content/uploads/2017/02/water-1828846_1280-300x200.jpg 300w, /wp-content/uploads/2017/02/water-1828846_1280-768x512.jpg 768w, /wp-content/uploads/2017/02/water-1828846_1280.jpg 1280w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p>
<blockquote><p>The belief that complex systems require armies of designers and programmers is wrong. A system that is not understood in its entirety, or at least to a significant degree of detail by a single individual, should probably not be built. &#8212; Niklaus Wirth.</p></blockquote>
<p><span class="dropcap">I</span>n the summer of 2003, I was almost at the end of <a href="https://arxiv.org/abs/1607.06973" target="_blank">my M.Sc. thesis</a>. One day I was surfing the web searching for some references to add to the thesis I&#8217;d been writing. I ran into Mikael Nilsson’s interesting <a href="http://cid.nada.kth.se/pdf/CID-201.pdf" target="_blank">M.Sc. thesis</a> “Geometric Algebra with Conzilla: Building a Conceptual Web of Mathematics”. His work contains a nice introduction to Geometric Algebra, with accompanying <a href="https://en.wikipedia.org/wiki/Unified_Modeling_Language" target="_blank">UML</a>-based conceptual models. It got me very curious about GA. I made some more searches finding a few papers, books, and tutorials. After reading some of them I was suddenly transferred into a new world of algebraic abstractions. For the first time in my life as a student, engineer, and software developer I could hope to express, explore, and manipulate geometric abstractions with such clarity. I then decided that my Ph.D. will be about exploring Geometric Algebra using the best way I know: developing software. It was a natural decision to make given GA&#8217;s potential, but a hard and lonely journey to make. About 8 years have passed now developing my tool, <strong><a href="/index.php/about-gmac/" target="_blank" class="broken_link">GMac</a></strong>, into its current state all by myself passing through difficult events I could only have passed by Allah&#8217;s well and mercy.</p>
<p>In this post and the next, I talk about this journey and some of the lessons I learned along the way. I talk about how the current GMac design came to appear and the joys I found learning the hard way that profound belief <sup class='endnote'><a href='#en-2532-1' id='enref-2532-1' onclick='return hhEndnotes_show(2532)'>1</a></sup>, solid foundation, clear goals, and lots of patience are together the only way to realizing distant dreams.</p>
<h3>Discovering The Computational Universe</h3>
<blockquote><p>I had a very selfish reason for building Mathematica. I wanted to use it myself, a bit like Galileo got to use his telescope four hundred years ago. But I wanted to look, not at the astronomical universe, but at the computational universe. &#8212; Stephen Wolfram.</p></blockquote>
<div id="attachment_2486" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/02/Rule30-first-500-rows.png" data-rel="lightbox-1" title=""><img class="size-medium wp-image-2486" src="/wp-content/uploads/2017/02/Rule30-first-500-rows-300x150.png" alt="Rule30-first-500-rows" width="300" height="150" srcset="/wp-content/uploads/2017/02/Rule30-first-500-rows-300x150.png 300w, /wp-content/uploads/2017/02/Rule30-first-500-rows-768x384.png 768w, /wp-content/uploads/2017/02/Rule30-first-500-rows.png 1008w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Rule 30: Rich behavior can emerge from very simple computational rules. (<a href="https://en.wikipedia.org/wiki/Rule_30" target="_blank">source</a>)</p></div>
<p>In the Autumn of 2005, I&#8217;d just begun my Ph.D. preparatory courses when I had another perceptual shift, this time in how I think about computations. I found Stephen Wolfram&#8217;s 2002 fascinating book <strong>&#8220;<a href="http://www.wolframscience.com/thebook.html" target="_blank">A New Kind of Science</a>&#8221; (NKS)</strong> after watching <a href="https://www.youtube.com/watch?v=_eC14GonZnU&amp;t=2s" data-rel="lightbox-video-0" target="_blank">one of his lectures about it</a>. After reading a few pages of NKS online, I couldn&#8217;t stop until I finished reading the whole book, without the endnotes, in just 2 weeks. I couldn&#8217;t wait to buy the book because it would take at least a month to arrive back then so <a href="http://www.wolframscience.com/nks/" target="_blank">I read it online</a>.</p>
<p>Reading this book made me rethink about many concepts of science, mathematics, and computation that I took for granted. Concepts like <a href="http://www.wolframscience.com/nks/chap-4--systems-based-on-numbers/" target="_blank">numbers</a>, <a href="http://www.wolframscience.com/nks/chap-6--starting-from-randomness/" target="_blank">chaos</a>, <a href="http://www.wolframscience.com/nks/chap-6--starting-from-randomness/" target="_blank">randomness</a>, <a href="http://www.wolframscience.com/nks/chap-3--the-world-of-simple-programs/" target="_blank">complexity</a>, <a href="https://www.youtube.com/watch?v=DJ0WG3D3m1U" data-rel="lightbox-video-1" target="_blank">intelligence</a>, <a href="http://www.wolframscience.com/nks/p606--traditional-mathematics-and-mathematical-formulas/" target="_blank">mathematical models</a>, and <a href="http://www.wolframscience.com/nks/chap-11--the-notion-of-computation/" target="_blank">the nature of computation</a>. Although I don&#8217;t agree with everything he says in his book, Wolfram&#8217;s insights and explorations are fascinating and inspiring for someone like me. The most intriguing of all the concepts he talks about is the <strong><a href="http://www.stephenwolfram.com/publications/mining-computational-universe/" target="_blank">Computational Universe</a></strong>. Wolfram used <a href="https://en.wikipedia.org/wiki/Cellular_automaton" target="_blank">cellular automata</a> and similar computational tools for mapping and mining the computational universe.</p>
<p>I instantly realized that Geometric Algebra can be a uniquely valuable tool in any attempt to explore the computational universe. I just needed the right computational vessel to make such explorations. I searched a lot but found none that suited my goals. I read that Wolfram had created <a href="https://en.wikipedia.org/wiki/Wolfram_Mathematica" target="_blank"><strong>Mathematica</strong></a> as his personal lab for doing computational experiments. All this made me decide to create my own GA-based tool for voyaging and exploring the computational universe, and so my journey began.</p>
<h3>Creating The Perfect Library</h3>
<blockquote><p>Good judgment comes from experience, and experience comes from bad judgment. &#8212; Frederick P. Brooks</p></blockquote>
<div id="attachment_2487" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/02/OOPrinciples.jpg" data-rel="lightbox-2" title=""><img class="size-medium wp-image-2487" src="/wp-content/uploads/2017/02/OOPrinciples-300x266.jpg" alt="OO Design Principles" width="300" height="266" srcset="/wp-content/uploads/2017/02/OOPrinciples-300x266.jpg 300w, /wp-content/uploads/2017/02/OOPrinciples.jpg 620w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Object Oriented Design Principles (<a href="https://www.codeproject.com/Articles/186107/Object-Orientation-Beginners-Tutorial" target="_blank">source</a>)</p></div>
<p>When it comes to repetitive tasks, good software developers are the laziest of people; they prefer to create programs to do the repetitive tasks for them <sup class='endnote'><a href='#en-2532-2' id='enref-2532-2' onclick='return hhEndnotes_show(2532)'>2</a></sup>. To be more accurate, their deep creativity drives their apparent laziness. They never want to do the same task twice, and if they have to, they never want to do it in the same way. They almost always enjoy finding the most general framework for doing several tasks at once with minimum effort; I&#8217;m one of those people.</p>
<p>I started my actual Ph.D. research work in 2007 by studying GA mathematics through reading the excellent book &#8220;<a href="http://www.sciencedirect.com/science/book/9780123694652" target="_blank">Geometric Algebra for Computer Science</a>&#8220;. In 2008 I started to investigate several software designs and implementations in hope to implement a single perfect universal GA-based software library.</p>
<p>Driven by my creative laziness, I initially thought that the powerful unification GA brings to mathematics can be directly translated into a unified software library suitable for all <a href="/index.php/2015/09/18/ga-computing2/" target="_blank">Geometric Computing</a> purposes. I was naive back then with little experience in the difficult problems that face designing large sophisticated multi-purpose software systems. I gradually realized that this perfect software library is a myth. While working on the development of two big decision support software systems based on relational databases for several years, I gradually gained experience in the true meaning of the phrase &#8220;Necessity is the Mother of Invention&#8221;.</p>
<p>Successful software libraries are mainly driven by necessity not only by the elegance of some underlying abstraction, even a beautiful algebraic abstraction such as GA. Each particular application has its own set of necessities that we, software engineers, call requirements: <a href="https://en.wikipedia.org/wiki/Functional_requirement" target="_blank">functional</a>, <a href="https://en.wikipedia.org/wiki/Non-functional_requirement" target="_blank">non-functional</a>, financial, scope related, performance related, etc. There can never be a single perfect software library suitable for all applications in a wide-ranging domain like Geometric Computing.</p>
<p>Failing in my initial attempt I went higher in the level of abstraction. I had a good background in <a href="https://en.wikipedia.org/wiki/Object-oriented_design" target="_blank">Object-Oriented (OO) Software Design</a>. Why not, I asked myself, create an OO design based on the mathematical concepts of Geometric Algebra and then derive specific concrete implementations for specific applications. After all, this is how I learned about GA originally; using UML to diagram GA&#8217;s main concepts and relations. I soon found that OO design is a good conceptual tool to study some domain, but there can never be a single OO design suitable for all purposes either; especially when good memory\processing performance is critical <sup class='endnote'><a href='#en-2532-3' id='enref-2532-3' onclick='return hhEndnotes_show(2532)'>3</a></sup>. This got me to learn about other <a href="https://en.wikipedia.org/wiki/Programming_paradigm" target="_blank">programming paradigms</a> I&#8217;ve never considered reading about before.</p>
<h3>Shifting Paradigms</h3>
<blockquote><p>One principle problem of educating software engineers is that they will not use a new method until they believe it works and, more importantly, that they will not believe the method will work until they see it for themselves. &#8212; W. S. Humphrey, The Personal Software Process</p></blockquote>
<div id="attachment_2480" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/02/Programming-Paradigms.png" data-rel="lightbox-3" title=""><img class="size-medium wp-image-2480" src="/wp-content/uploads/2017/02/Programming-Paradigms-300x261.png" alt="Programming Paradigms" width="300" height="261" srcset="/wp-content/uploads/2017/02/Programming-Paradigms-300x261.png 300w, /wp-content/uploads/2017/02/Programming-Paradigms-768x667.png 768w, /wp-content/uploads/2017/02/Programming-Paradigms-1024x889.png 1024w, /wp-content/uploads/2017/02/Programming-Paradigms.png 1179w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Programming Paradigms (<a href="https://en.wikipedia.org/wiki/File:Programming_paradigms.svg" target="_blank">source</a>)</p></div>
<p>Back in 2009, I only knew about <a href="https://en.wikipedia.org/wiki/Procedural_programming" target="_blank">procedural programming</a> and <a href="https://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank">object oriented programming</a>. I did some reading and discovered many other paradigms like functional, aspect-oriented, concurrent, dynamic, feature-oriented, and more. I realized that GA can be used equally well as an algebraic base for creating software in all of these paradigms. My deep creative laziness led me to the most general of all paradigms: <a href="https://en.wikipedia.org/wiki/Automatic_programming" target="_blank">Automatic Meta-Programming</a>.</p>
<p>In April 2009 I bought and read the book &#8220;<a href="https://www.amazon.com/Generative-Programming-Methods-Tools-Applications/dp/0201309777" target="_blank">Generative Programming: Methods, Tools, and Applications</a>&#8221; in which the authors present a grand tour of <a href="http://program-transformation.org/Transform/GenerativeProgrammingWiki" target="_blank">Generative Programming</a> that is bound to become a classic. The book focuses on the generally unappreciated connection, back then, between <strong><a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank">Domain Specific Languages</a> (DSLs)</strong> and Generative Programming as a motivation for future developments. I immediately started designing and implementing the first prototype of my dream GA-based software vessel for exploring the computational universe; I called it GMac. The prototype took a couple of months to be functional for the purpose of completing my Ph.D. <sup class='endnote'><a href='#en-2532-4' id='enref-2532-4' onclick='return hhEndnotes_show(2532)'>4</a></sup>.</p>
<p>I tried to apply some of what I&#8217;d learned from the Generative Programming book to implement simple GA-based algorithms, which I call <em><strong>G</strong></em>eometric <em><strong>Mac</strong></em>ros, through code generation. A geometric macro is a set of standard GA multivector expressions assigned to local variables inside the macro. There are no <a href="https://en.wikipedia.org/wiki/Control_flow" target="_blank">control flow statements</a> inside this simple computational concept. All the computational power mainly comes from the mathematics of GA itself. I used the GMac prototype to implement parts of a ray tracer that I implemented based on Kevin Suffern&#8217;s nice book &#8220;<a href="http://www.raytracegroundup.com/" target="_blank">Ray Tracing from the Ground Up</a>&#8220;, in addition to some other small computational problems.</p>
<p>Using Automatic Programming and Code Generation is a fundamental design decision I made for GMac. My experience with OO design can be expected to extend to all other programming paradigms. There can be no universal design methodology suitable for all applications. Even more, in a single large application, we might need several paradigms to be used <sup class='endnote'><a href='#en-2532-5' id='enref-2532-5' onclick='return hhEndnotes_show(2532)'>5</a></sup>. The only common activity between all paradigms is the creative composition of structured textual code that is both human-readable and machine-compilable. Instead of trying to force some kind of fixed design method upon GA-based application developers, we can just provide a set of powerful tools to help them in composing their application in whatever programming paradigm, software system design, or programming language they choose. I still believe this is the best, most effective, and most general way to use GA in software development.</p>
<h3>Swimming Upstream</h3>
<blockquote><p>I had to resign from the University to continue my intellectual research project. &#8212; <a href="http://www.arabphilosophers.com/English/philosophers/contemporary/contemporary-names/Abdl-Wahab%20Elmessiri/Article/E_Elmessiri.htm" target="_blank">Professor Abdel-Wahab Elmessiri</a> <sup class='endnote'><a href='#en-2532-6' id='enref-2532-6' onclick='return hhEndnotes_show(2532)'>6</a></sup></p></blockquote>
<div id="attachment_2548" style="width: 295px" class="wp-caption alignright"><a href="/wp-content/uploads/2017/02/Introvert-Brain.jpg" data-rel="lightbox-4" title=""><img class="size-large wp-image-2548" src="/wp-content/uploads/2017/02/Introvert-Brain-285x1024.jpg" alt="Introvert Brain" width="285" height="1024" srcset="/wp-content/uploads/2017/02/Introvert-Brain-285x1024.jpg 285w, /wp-content/uploads/2017/02/Introvert-Brain.jpg 736w" sizes="(max-width: 285px) 100vw, 285px" /></a><p class="wp-caption-text">I&#8217;m an Introvert. The brains of Introverts and Extroverts work differently.</p></div>
<p>My Ph.D. part of the journey was completed in April 2010 when I defended my thesis. It was an exhausting part of my life with many difficulties resulting from working in an anti-scientific, anti-creative environment by design; especially for <a href="https://www.quietrev.com/6-illustrations-that-show-what-its-like-in-an-introverts-head/" target="_blank">introverted people</a> like me <sup class='endnote'><a href='#en-2532-7' id='enref-2532-7' onclick='return hhEndnotes_show(2532)'>7</a></sup>. In this difficult environment, I met many talented, highly creative, and mostly self-educated people. These people motivated their colleagues and students to make the best research possible and sincerely promoted good education. I&#8217;m very grateful for their presence in my life. The system itself is designed to kill the hope in such talented people or drive them out into more scientifically and humanly attractive environments <sup class='endnote'><a href='#en-2532-8' id='enref-2532-8' onclick='return hhEndnotes_show(2532)'>8</a></sup>. As Barry Schwartz <sup class='endnote'><a href='#en-2532-9' id='enref-2532-9' onclick='return hhEndnotes_show(2532)'>9</a></sup> describes it in <a href="https://www.ted.com/talks/barry_schwartz_the_way_we_think_about_work_is_broken?language=en" target="_blank">his beautiful TED talk</a>:</p>
<blockquote><p>It is not true that you &#8220;just can&#8217;t get good help anymore.&#8221; It is true that you &#8220;can&#8217;t get good help anymore&#8221; when you give people work to do that is demeaning and soulless. And interestingly enough, Adam Smith — the same guy who gave us this incredible invention of mass production, and division of labor — understood this. He said, of people who worked in assembly lines, of men who worked in assembly lines, he says: &#8220;He generally becomes as stupid as it is possible for a human being to become.&#8221; Now, notice the word here is &#8220;become.&#8221; &#8220;He generally becomes as stupid as it is possible for a human being to become.&#8221; Whether he intended it or not, what Adam Smith was telling us there, is that the very shape of the institution within which people work creates people who are fitted to the demands of that institution and deprives people of the opportunity to derive the kinds of satisfactions from their work that we take for granted.</p></blockquote>
<p>You can get some idea about the results of this sad situation by reading this 2011 article by Hillel Ofek: &#8220;<a href="http://www.thenewatlantis.com/publications/why-the-arabic-world-turned-away-from-science" target="_blank">Why the Arabic World Turned Away From Science</a>&#8220;. I can only pray and hope this situation changes in the near future.</p>
<p>In 2010 I made a mistake trying to publish my Ph.D. work as an article in a high-profile journal not concerned about Geometric Algebra. They rejected the article for good reasons, mostly not related to GA but to the article itself. The editor gave me a piece of advice going around Geometric Algebra having nothing new to offer in terms of applications in computer science. He emphasized that more effort must be made by the GA community to overcome this situation by finding new insights that only GA can provide. I realized then that choosing to do research using GA is a lonely path to take. Recently, I made some <a href="/index.php/category/interview/" target="_blank">interviews</a> with leading researchers in the GA community who stated this experience in similar words. The situation has gotten much better in the last couple of years where GA-related research started to appear at increasing rates in many fields in engineering and computer science.</p>
<p>After completing my Ph.D. back in 2010 I knew I had to design a new version of GMac to realize my dream vessel for exploring the computational universe with Geometric Algebra. I knew it would be a difficult journey to make. As Walter Bright puts it in his article &#8220;<a href="http://www.drdobbs.com/architecture-and-design/so-you-want-to-write-your-own-language/240165488" target="_blank">So You Want To Write Your Own Language?</a>&#8220;:</p>
<blockquote><p>First off, you&#8217;re in for a lot of work…years of work…most of which will be wandering in the desert. The odds of success are heavily stacked against you. If you are not strongly self-motivated to do this, it isn&#8217;t going to happen. If you need validation and encouragement from others, it isn&#8217;t going to happen.</p></blockquote>
<p>Nevertheless, I was certain that GA will be accepted in the near future as a major language for mathematical modeling in computer science and engineering. I was also certain that I will gain much experience and feel many joys developing the next generation of GMac. I could only work on my project alone against the surrounding environment for two to four months per year because of my many family obligations and non-research work duties. These available months weren&#8217;t even consecutive; they were spread along the year with no apparent order. During all these years whenever I got an opportunity to make research I faced a difficult question. Should I focus on writing papers in computer science topics not related to Geometric Algebra to be promoted? Or should I invest the little time I had in developing my dream vessel? I always chose the second.</p>
<p>After I finally got promoted to Assistant Professor <sup class='endnote'><a href='#en-2532-10' id='enref-2532-10' onclick='return hhEndnotes_show(2532)'>10</a></sup> in July 2010 and for another full year up to Summer 2011, I had to find additional jobs to support my family, so I had to delay developing the next generation of GMac until August 2011.</p>
<p>In <a href="/index.php/2017/02/10/gmac-tng-2/" target="_blank">the final part</a> of this series, I will talk about the next phase of my journey developing GMac&#8217;s next generation. I will explain its main components and how I arrived at their design.</p>
<p><img class="size-full wp-image-2554 alignright" src="/wp-content/uploads/2017/02/Done.png" alt="" width="375" height="40" srcset="/wp-content/uploads/2017/02/Done.png 375w, /wp-content/uploads/2017/02/Done-300x32.png 300w" sizes="(max-width: 375px) 100vw, 375px" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class='endnotes' id='hhendnotes-2532'>
<ol>
<li id='en-2532-1'>Belief in Islam, or &#8220;Iman&#8221; in Arabic, has 6 pillars: Belief in Allah, Belief in the angels, Belief in the revealed books, Belief in the commissioned Messengers (peace be upon them), Belief in the resurrection and the events of Qiyamah, Belief in the predestination by Allah of all things, both the (seemingly) good and the (seemingly) bad. You can read more details <a href="http://www.missionislam.com/knowledge/sixpillarsiman.htm" target="_blank">about this central concept in here</a>. You can also watch this beautiful lecture illustrating the profound effects of believing in these 6 pillars on <a href="https://www.islamreligion.com/articles/78/jeffrey-lang-professor-of-mathematics-and-writer-usa/" target="_blank">Dr. Jeffrey Lang</a>, an Associate Professor of Mathematics at the University of Kansas. <span class='endnotereverse'><a href='#enref-2532-1'>&#8617;</a></span></li>
<li id='en-2532-2'>Many online articles express this idea in one form or another as a common experience. For some examples, see <a href="https://swizec.com/blog/programmers-are-fucking-lazy/swizec/2648" target="_blank">here</a>, <a href="https://blog.codinghorror.com/how-to-be-lazy-dumb-and-successful/" target="_blank">here</a>, and <a href="https://jaxenter.com/results-developers-strategically-lazy-113513.html" target="_blank">here</a>. <span class='endnotereverse'><a href='#enref-2532-2'>&#8617;</a></span></li>
<li id='en-2532-3'>I now know from first-hand experience that there are many deep conceptual problems associated with Object-Oriented Programming and the misuse of Object-Oriented Design. You can get a good idea by watching David West&#8217;s lecture &#8220;<a href="https://www.youtube.com/watch?v=RdE-d_EhzmA" data-rel="lightbox-video-2" target="_blank">OOP is Dead! Long Live OODD!</a>&#8221; <span class='endnotereverse'><a href='#enref-2532-3'>&#8617;</a></span></li>
<li id='en-2532-4'>All the details of this GMac prototype can be found in my Ph.D. You can download a softcopy from <a href="https://arxiv.org/abs/1607.04767" target="_blank">here</a>, or buy a hard copy <a href="https://www.amazon.com/Code-Generation-Geometric-Algebra-Abstractions/dp/3330804653" target="_blank">from Amazon</a>. <span class='endnotereverse'><a href='#enref-2532-4'>&#8617;</a></span></li>
<li id='en-2532-5'>This occasional necessity affected the design of some powerful modern multi-paradigm languages like <a href="https://en.wikipedia.org/wiki/F_Sharp_(programming_language)" target="_blank">F#</a> and <a href="https://www.scala-lang.org/" target="_blank">Scala</a>, for example. <span class='endnotereverse'><a href='#enref-2532-5'>&#8617;</a></span></li>
<li id='en-2532-6'>Professor Abdel-Wahab Elmessiri is a famous Egyptian thinker, one of the critics of western modernity, and a pro of founding an &#8216;Islamic&#8217; version of modernism, author of the Encyclopedia &#8220;Jews, Judaism and Zionism&#8221;. <span class='endnotereverse'><a href='#enref-2532-6'>&#8617;</a></span></li>
<li id='en-2532-7'>In 2014, I read Susan Cain&#8217;s fascinating book &#8220;<a href="https://www.goodreads.com/book/show/8520610-quiet" target="_blank">Quiet: The Power of Introverts in a World That Can&#8217;t Stop Talking</a>&#8220;. It profoundly changed how I perceive myself and others. You can get an idea about the importance of her ideas for all humans by watching <a href="https://www.ted.com/talks/susan_cain_the_power_of_introverts" target="_blank">her TED talk</a>. Also, <a href="https://www.quietrev.com/6-illustrations-that-show-what-its-like-in-an-introverts-head/" target="_blank">this nice article</a> illustrates how introverts&#8217; minds work internally. I recommend following her ideas as they are important for any activities requiring human interactions, especially teaching and learning. <span class='endnotereverse'><a href='#enref-2532-7'>&#8617;</a></span></li>
<li id='en-2532-8'>The direct cause of this can be found in <a href="http://www.yesmagazine.org/happiness/want-the-good-life-your-neighbors-need-it-too" target="_blank">this article</a>, where epidemiologist Richard Wilkinson discusses new research showing that, among developed countries, the healthiest and happiest aren&#8217;t those with the highest incomes but those with the most equality. <span class='endnotereverse'><a href='#enref-2532-8'>&#8617;</a></span></li>
<li id='en-2532-9'>Barry Schwartz studies the link between economics and psychology, offering startling insights into modern life. He is the author of the book &#8220;Why We Work&#8221; providing an eye-opening, groundbreaking tour of the purpose of work in our lives. <span class='endnotereverse'><a href='#enref-2532-9'>&#8617;</a></span></li>
<li id='en-2532-10'>You can read more about academic ranks in Egyptian universities in <a href="https://en.wikipedia.org/wiki/Academic_ranks_in_Egypt" target="_blank">here</a>. <span class='endnotereverse'><a href='#enref-2532-10'>&#8617;</a></span></li>
</ol>
</div>
<p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=%2Findex.php%2F2017%2F02%2F09%2Fgmac-tng-1%2F&amp;linkname=GMac%3A%20The%20Next%20Generation%20%281%20of%202%29" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=%2Findex.php%2F2017%2F02%2F09%2Fgmac-tng-1%2F&amp;linkname=GMac%3A%20The%20Next%20Generation%20%281%20of%202%29" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=%2Findex.php%2F2017%2F02%2F09%2Fgmac-tng-1%2F&amp;linkname=GMac%3A%20The%20Next%20Generation%20%281%20of%202%29" title="Google+" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save" href="https://www.addtoany.com/share#url=%2Findex.php%2F2017%2F02%2F09%2Fgmac-tng-1%2F&amp;title=GMac%3A%20The%20Next%20Generation%20%281%20of%202%29" data-a2a-url="/index.php/2017/02/09/gmac-tng-1/" data-a2a-title="GMac: The Next Generation (1 of 2)"></a></p><p>The post <a rel="nofollow" href="/index.php/2017/02/09/gmac-tng-1/">GMac: The Next Generation (1 of 2)</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></content:encoded>
			</item>
	</channel>
</rss>
