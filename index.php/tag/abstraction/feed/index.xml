<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Abstraction &#8211; Geometric Algebra Explorer</title>
	<atom:link href="/index.php/tag/abstraction/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Voyaging the Computational Universe with Geometric Algebra</description>
	<lastBuildDate>Mon, 23 Oct 2017 18:05:11 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.8.2</generator>

<image>
	<url>/wp-content/uploads/2016/12/cropped-GAExplorer-Icon-150x150.jpg</url>
	<title>Abstraction &#8211; Geometric Algebra Explorer</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>The Abstract</title>
		<link>/index.php/2015/07/03/the-abstract/</link>
		<pubDate>Fri, 03 Jul 2015 14:00:18 +0000</pubDate>
		<dc:creator><![CDATA[Ahmad Eid]]></dc:creator>
				<category><![CDATA[Geometric Algebra]]></category>
		<category><![CDATA[Abstraction]]></category>
		<category><![CDATA[Computing]]></category>
		<category><![CDATA[GA]]></category>
		<category><![CDATA[Teaching]]></category>

		<guid isPermaLink="false">http://gacomputing.info/?p=130</guid>
		<description><![CDATA[<p>If people do not believe that mathematics is simple, it is only because they do not realize how complicated life is &#8211; John von Neumann bstraction is a fundamental human skill and tool for&#46;&#46;&#46;</p>
<p>The post <a rel="nofollow" href="/index.php/2015/07/03/the-abstract/">The Abstract</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2015/06/wordle-4.png" data-rel="lightbox-0" title=""><img class="size-full wp-image-206 aligncenter" src="/wp-content/uploads/2015/06/wordle-4.png" alt="Abstraction Word Cloud" width="792" height="506" srcset="/wp-content/uploads/2015/06/wordle-4.png 792w, /wp-content/uploads/2015/06/wordle-4-300x192.png 300w, /wp-content/uploads/2015/06/wordle-4-768x491.png 768w" sizes="(max-width: 792px) 100vw, 792px" /></a></p>
<blockquote><p>If people do not believe that mathematics is simple, it is only because they do not realize how complicated life is &#8211; John von Neumann</p></blockquote>
<p><span class="dropcap">A</span>bstraction is a fundamental human skill and tool for understanding the universe. If you&#8217;re an artist expressing emotions and visual experiences, if you&#8217;re a mathematician investigating theorems and proofs, if you&#8217;re an engineer designing models and performing simulations, if you&#8217;re a software developer creating code for software systems, or if you&#8217;re an educator in need for transferring knowledge and motivating skills you must use abstraction to &#8220;create and communicate&#8221;. In one book about abstraction <sup class='endnote'><a href='#en-130-1' id='enref-130-1' onclick='return hhEndnotes_show(130)'>1</a></sup> the following definition is adopted:</p>
<blockquote><p>abstraction is deﬁned as &#8220;the process of extracting the underlying essence of a mathematical concept, removing any dependence on real world objects with which it might originally have been connected, and generalizing it so that it has wider applications.&#8221; A good illustrative example of this abstraction process is geometry, which started from the observation and measurement of physical spaces and forms, moving then to the abstract axioms of the Euclidean geometry, and, later on, to non-Euclidean geometries, farther and farther removed from the perceived physical world. An interesting aspect of abstraction is that an increase in the level of abstraction is paralleled by a deepening in the understanding of the connections among mathematical concepts. For instance, by abstracting the Non-Euclidean geometry to “the study of properties invariant under a given group of symmetries” has revealed deep connections between geometry and abstract algebra. Moreover, abstraction can suggest direction of knowledge transfer among different domains.</p></blockquote>
<div id="attachment_249" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2015/07/254-750x726.jpg" data-rel="lightbox-1" title=""><img class="size-medium wp-image-249" src="/wp-content/uploads/2015/07/254-750x726-300x290.jpg" alt="The Forest of Abstractions" width="300" height="290" srcset="/wp-content/uploads/2015/07/254-750x726-300x290.jpg 300w, /wp-content/uploads/2015/07/254-750x726.jpg 750w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">The Forest of Abstractions</p></div>
<p>I&#8217;ve been dealing with mathematical abstractions most of my life, as a student then as a software engineer and faculty member, on various levels and forms. My experience is like trying to find a safe path in a big forest of data and ideas that keep on growing and changing each day. Abstractions are like trees in the big forest; some are very tall and hard to climb but if you could reach their top you uncover vast areas of ideas and directions and you may even gain some wisdom about life itself. Some other abstractions are so weak and short-lived they just keep you warm at night or perhaps you can make a rope to climb the other tall trees of abstraction the next morning. Some abstractions are elegant and beautiful but may bare little fruit for quite some time (practical applications). Some abstractions are ugly but many depend on them for their practical usefulness. It also may happen that strong useful trees of abstraction can hide taller and better ones from our &#8220;mental vision&#8221; and at some point we have to either jump from them or completely cut them down from our minds to get higher. Finding a safe path inside such forest is a blessing not all are granted. Worse yet you could find your safe path and walk it alone as no other sees its elegance, usefulness, and security except you. Then you would have to call for company by creating a website like this one.</p>
<p>Writing your first computer code at 11 and continuing to write more code for 25 or more years gives you many joys, disappointments, questions, ideas, and ultimately more knowledge. From an early stage you realize that mathematics is both a fuel and limit for your computing skills. The more efficient your mathematical abstractions are the more powerful ideas you have, the more you can realize in your code, and the more wisdom you gain. This intuition was emphasized in my engineering study and practice through the universal presence of mathematics in computer science books and articles more than any other engineering discipline. Searching for and using good mathematical abstractions is, in my opinion, an important task for anyone in my position.</p>
<h3>The Linear Engineer</h3>
<p>Up to high school one gets usually familiar with some useful but &#8220;apparently distinct&#8221; mathematical abstractions. Several number systems (typically natural, rational, real, and complex numbers) are introduced. Polynomial algebra on real numbers is studied. Euclidean geometry in 2D and 3D (usually started by trigonometry and some analytic geometry) is presented. And some calculus is used to link the physical world to the mathematical world <sup class='endnote'><a href='#en-130-2' id='enref-130-2' onclick='return hhEndnotes_show(130)'>2</a></sup>. Each of these abstractions are usually taught as sets of &#8220;mathematical recipes&#8221; that are barely related together by any common thread of thought. This method of teaching is very annoying, and ultimately limiting, to &#8220;deep thinkers&#8221; on both sides: teachers and students.</p>
<p>The first shock usually comes in the &#8220;higher education&#8221; at the university. One would expect that the sets of &#8220;mathematical recipes&#8221; would somehow merge into a set of smaller, more powerful and seamlessly integrating mathematical abstractions to suit the needs of engineers and scientists. Instead I found myself lost in a larger, more divided forest of &#8220;mathematical tools&#8221; rather than the well designed &#8220;garden of abstract knowledge&#8221; that I expected to enter in my engineering study. <span class="pullquote-right">Instead I found myself lost in a larger, more divided forest of &#8220;mathematical tools&#8221; rather than the well designed &#8220;garden of abstract knowledge&#8221; that I expected to enter in my engineering study.</span></p>
<p>During my first year <sup class='endnote'><a href='#en-130-3' id='enref-130-3' onclick='return hhEndnotes_show(130)'>3</a></sup> I found the first step to my path, a.k.a Abstract Linear Algebra <sup class='endnote'><a href='#en-130-4' id='enref-130-4' onclick='return hhEndnotes_show(130)'>4</a></sup>. I was blessed to be taught this course by Dr. Muhammad Yossuf <sup class='endnote'><a href='#en-130-5' id='enref-130-5' onclick='return hhEndnotes_show(130)'>5</a></sup> who had us view vectors and linear transforms as the elegant abstractions of Euclidean directions, positions, and motions, but with richer, deeper meanings and wider applicability by treating matrices as &#8220;convenient computational tools&#8221; rather than &#8220;mindless mathematical recipes&#8221;. This was my first time to climb a big abstraction tree and see the heavens and earth from higher grounds. The power of this concept of &#8220;linear abstraction&#8221; enabled me to view hidden links between seemingly diverse subjects of study in later years (like automatic control, differential equations, numerical analysis, and signal processing for example). Now I could invent new &#8220;mathematical recipes&#8221; and cook them into large amounts of computer code without losing insight into the basic idea behind the code. And once you find such path it&#8217;s impossible to go back.</p>
<p>It&#8217;s not strange that linear algebra is very important to engineers in all fields <sup class='endnote'><a href='#en-130-6' id='enref-130-6' onclick='return hhEndnotes_show(130)'>6</a></sup>. For example the following statement taken from one signal processing book <sup class='endnote'><a href='#en-130-7' id='enref-130-7' onclick='return hhEndnotes_show(130)'>7</a></sup> can be found in many engineering books in some form or another:</p>
<blockquote><p>Much information is available for both the analysis and design of LTI (linear time-invariant) systems. This is especially true for system design. In fact, in preliminary design stages for non-LTI physical systems, we often fit a LTI model to the physical system so as to have a starting point for the design. The LTI model may not be very accurate, but the use of an LTI model allows us to initiate the design process with standard design procedures.</p></blockquote>
<p>I discovered after graduation, as my second shock, that the universe is mostly non-linear, that there is noting that can be time-invariant because of the second law of thermodynamics, and that most systems are very sensitive to initial conditions to be predictable for indefinite periods of time (as clearly stated by chaos theory and widely experienced in practice). Nevertheless, a linear system is a good starting point to model and solve almost all problems in engineering; mostly because many engineers are afraid of the darkness of the mathematics of non-linear chaotic systems, a very dark part of the mathematical forest of abstractions.</p>
<h3>The Geometric Engineer</h3>
<p>In Arabic the word engineering is pronounced &#8220;Handasah&#8221; and is said to be of Persian origin meaning &#8220;the ability to solve problems&#8221;. The word geometry is also called &#8220;Handasah&#8221; in Arabic; definitely not a coincidence. Since the dawn of human civilization geometry and engineering were the same. It appears that the need for regulating water supply and creating landmark buildings in the ancient world along with the in-built ability of the human brain to reason in 3D space was the origin of all engineering. Engineers can never understand, model, create, or maintain any technology without using a geometry of some sort. The natural way of expressing and understanding geometry is to draw elegant diagrams that made us proud in our first years as engineering students while taking care of drawing each line and writing every dimension. <span class="pullquote-right">The natural way of expressing and understanding geometry is to draw elegant diagrams that made us proud in our first years as engineering students while taking care of drawing each line and writing every dimension.</span> Although lines and planes are common in many engineering designs, they are not the only objects; not even the most important ones. Spheres, cylinders, cones, and many more complex non-linear objects are known and have been used through history.</p>
<p>Throughout history the main efforts to further our understanding and use of geometry have always been through algebra. From the very old theory of Pythagoras, through the vast advancements of algebra, trigonometry, and geometry by Muslim mathematicians <sup class='endnote'><a href='#en-130-8' id='enref-130-8' onclick='return hhEndnotes_show(130)'>8</a></sup>, to the modern view of Cayley–Klein geometry <sup class='endnote'><a href='#en-130-9' id='enref-130-9' onclick='return hhEndnotes_show(130)'>9</a></sup>, the struggle was to find algebraic abstractions to express geometric ideas. Currently we have many such algebraic abstractions (too many in fact); the problem now is not to find such abstractions, but how to teach them to whom it may concern!</p>
<h3>The Computational Engineer</h3>
<p>To create software based on geometric abstractions it&#8217;s impossible to &#8220;directly&#8221; explain yourself to a computer through the human method of diagrams and verbal explanations. One must use algebra, expressed as data structures and algorithms, to &#8220;generate&#8221; the code that implements the intended geometric knowledge. Even software systems with graphical user interfaces (GUIs) like AutoCAD and 3ds Max use algebra-based data structures and algorithms internally. The GUI is just a layer for our human convenience not for any intrinsic need of the computer itself <sup class='endnote'><a href='#en-130-10' id='enref-130-10' onclick='return hhEndnotes_show(130)'>10</a></sup>. In our study as engineers the use of vector algebra and vector calculus is dominant. Any software library dealing with geometry must have matrices and vectors built into its core. My third &#8220;shock of abstraction&#8221; that happened after completing my M.Sc. was to find this use not motivated by the lack of better algebraic systems, but rather by a &#8220;series of unfortunate events!&#8221; <sup class='endnote'><a href='#en-130-11' id='enref-130-11' onclick='return hhEndnotes_show(130)'>11</a></sup>. <span class="pullquote-right">My third &#8220;shock of abstraction&#8221; that happened after completing my M.Sc. was to find this use not motivated by the lack of better algebraic systems, but rather by a &#8220;series of unfortunate events!&#8221;</span> In addition, not all problems that can be described mathematically can be computed. The set of problems that we can &#8220;theoretically&#8221; compute solutions for is closely linked to the existence of an algorithm to solve the problem. Even in that theoretical set of computable problems we need to find an algorithm that produces acceptable results in &#8220;reasonable&#8221; time, hardware, and input-size requirements (remember the big O notation). One other problem is to find a programming language that &#8220;suits&#8221; the algorithm we found. The code should be writable, readable, and in general beautiful code <sup class='endnote'><a href='#en-130-12' id='enref-130-12' onclick='return hhEndnotes_show(130)'>12</a></sup>. The first two problems are the hardest theoretically; the third is the hardest practically.</p>
<p>There are two main kinds of programming languages: the general and the specific. General purpose programming languages are dominant in creating geometric-algebraic solutions to our problems. Everybody knows C++, Java, C#, Python, or some other such language. But generality comes with many problems in readability, writablity, and elegance of written code. In addition creating code by a general purpose programming language usually separates the designer of the algorithm from the developer of the code. If the &#8220;geometric modeller&#8221; tries to write the code himself, as he should, using a general purpose language all kinds of problems often occur including memory leaks, bad performance, and having to learn the full details of a whole language just to create an efficient implementation of a required algorithm. Object oriented programming may solve some of these problems, but a good tool to implement computational software should contain a domain specific language (DSL)<sup class='endnote'><a href='#en-130-13' id='enref-130-13' onclick='return hhEndnotes_show(130)'>13</a></sup> that can be used directly by the &#8220;domain expert&#8221; to write code that can be translated automatically to machine code or to a general purpose language code as an intermediate stage of compilation.</p>
<h3>The Pedagogical Engineer</h3>
<p><a href="https://en.wikipedia.org/wiki/Pedagogy" target="_blank">Pedagogy</a> is the discipline that deals with the theory and practice of education; it thus concerns the study and practice of how best to teach. A good teacher is always on the search for better ways to transfer knowledge and skills to students. The most important skill to be transferred to engineering students is the ability to self-educate. Dealing with new technology every day, especially in computer science, is impossible without such vital skill. But all engineering is based on mathematical abstractions; especially the algebraic, geometric, and computational abstractions. The nature of many mathematical abstractions used in teaching is, in my own experience as an engineering student and teacher, the most limiting for motivating and transferring the skill of self-education. The same conceptually intuitive geometric abstraction is expressed using too many algebraic tools. Let&#8217;s take the simple concept of &#8220;rotation&#8221; as an example. Rotation is so geometrically basic that we deal with it easily in childhood; as individual children and as early human collective knowledge. Then we are taught to express rotations in the plane using trigonometry, After some time we use orthogonal matrices for the same purpose in 2D and 3D. If we take a course in electrical circuits we discover that electrical engineers deal with constant frequency &#8220;rotating vectors&#8221; in the form of exponential functions. If we use some computer graphics library like DirectX we use something called a <a href="https://en.wikipedia.org/wiki/Quaternion" target="_blank">quaternion</a> to perform rotation in 3D space. The simple concept of rotation is expressed using too many algebraic abstractions with no apparent connection and no easy way of deciding when to use each tool and how to convert the geometric data to suit that algebraic tool. The direct result of such problem is a limited number of geometrically competent engineers; a very frustrating outcome for many teachers and students alike. Another consequence is the need for many teaching hours per subject to establish a mathematical base of algebraic tools specific to that subject <sup class='endnote'><a href='#en-130-14' id='enref-130-14' onclick='return hhEndnotes_show(130)'>14</a></sup>. If there were a single abstract framework to be taught once for most subjects that would make more time for teaching the engineering concepts rather than the mathematical tools. The current state of affairs in engineering teaching is a lack of such a unifying framework; after all, abstraction is about unification through extraction of common patterns.</p>
<h3>Geometric Algebra Computing</h3>
<p>To summarize:</p>
<ul>
<li>We need to be linear engineers; to find linear approximations for non-linear systems and create models accordingly.</li>
<li>We need to be geometric engineers; to think geometrically about our models and express our ideas algebraically.</li>
<li>We need to be computational engineers; to develop algorithms and implement them, at least partially, using domain specific languages suitable for our needs.</li>
<li>We need to be pedagogical engineers; to find a unifying mathematical abstraction suitable for building engineering skills in ourselves and our students in the most efficient manner.</li>
</ul>
<p>The key point here is &#8220;algebraic abstraction&#8221;. We need to find some compact mathematical algebraic abstraction, superseding the common ones, that directly corresponds to our human geometric intuition. This abstraction should be general enough to express and generalize familiar abstractions (like complex numbers, quaternions, subspace operations, linear transformations, and more) using a unified framework of algebraic tools. Now we can think geometrically and directly express our algorithms using a uniform algebraic framework and interpret the results efficiently. Creating a simple DSL based on such abstraction would be much easier as a great step in unifying computational geometry. Teaching geometry using such algebraic and programmatic tools would be efficient, fulfilling, and much more productive to students and teachers.</p>
<p>The reason this website is mainly dedicated to <a href="https://en.wikipedia.org/wiki/Geometric_algebra">Geometric Algebra</a> is that it has the potential of being <strong><em>the</em></strong> algebraic abstraction system for geometric processing for this century, just as vector algebra was for the 20th century. My goal isn&#8217;t to add to the mathematics behind GA, that&#8217;s already been done quite sufficiently, but rather to illustrate, reformulate, explore, and implement solutions to common problems in engineering and computer science in the abstract language of GA. That step has already been taken in physics with remarkable success. It&#8217;s about time to do the same on a wide scale in engineering and computer science. The title of this site &#8220;Geometric Algebra Computing&#8221; may have several meanings associated with it. One such meaning is given by <strong>Dr. Dietmar Hildenbrand</strong> (<a href="http://www.gaalop.de/dhilden/">http://www.gaalop.de/dhilden/</a>) the author of the book &#8220;<a href="https://www.amazon.com/Foundations-Geometric-Algebra-Computing-Geometry/dp/3642317936/ref=sr_1_1?ie=UTF8&amp;qid=1431672092&amp;sr=8-1&amp;keywords=dietmar+hildenbrand/">Foundations of Geometric Algebra Computing</a>&#8221; and creator of &#8220;<a href="http://www.gaalop.de/">Geometric Algebra Algorithms Optimizer (Gaalop)</a>&#8221; software. In his book, he defines <em><strong>“Geometric Algebra Computing”</strong></em> as:</p>
<blockquote><p>The geometrically intuitive development of algorithms using geometric algebra with a focus on their efficient implementation.</p></blockquote>
<p>Personally, I think about Geometric Algebra as a way of <em><strong>symbolic geometric thinking</strong></em>, not just another algebraic system. Computers can only be programmed when we fully understand the abstractions and processes involved in the problem at hand. Computing with Geometric Algebra is fascinating because it&#8217;s a high-level language for geometry as we humans think and understand and, at the same time, a logical algebraic system suitable for being a universal base for creating computer code for geometric processing using current compiler technology. Most of my research efforts are dedicated to illustrating and realizing the full potential of GA in various scientific computing applications.</p>
<p>I hope this site is successful in illustrating the power of GA-based linear models and DSLs. I hope you find your own path in the great forest of mathematical abstractions enjoyable and maturing.</p>
<p><img class="alignright size-full wp-image-208" src="/wp-content/uploads/2015/06/done1.png" alt="تمت بحمد الله الجمعة 16 رمضان 1436هـ" width="300" height="40" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<hr />
<p>&nbsp;</p>
<div class='endnotes' id='hhendnotes-130'>
<ol>
<li id='en-130-1'>Saitta, L. &#8220;Abstraction in Artificial Intelligence and Complex Systems&#8221;. Springer, 2013 <span class='endnotereverse'><a href='#enref-130-1'>&#8617;</a></span></li>
<li id='en-130-2'>Earl William Swokowski, &#8220;Calculus with Analytic Geometry: Alternate Edition&#8221;. Brooks/Cole, 1983 <span class='endnotereverse'><a href='#enref-130-2'>&#8617;</a></span></li>
<li id='en-130-3'>Our study begins with a general preparatory year followed by 4 years of specialized engineering study. So my first year was actually my second. <span class='endnotereverse'><a href='#enref-130-3'>&#8617;</a></span></li>
<li id='en-130-4'>Axler, S. J. &#8220;Linear Algebra Done Right, 3rd Edition&#8221;. Springer, 2014 <span class='endnotereverse'><a href='#enref-130-4'>&#8617;</a></span></li>
<li id='en-130-5'>In that same year I got a copy the hand written lecture notes of another Abstract Algebra introductory course Dr. Muhammad Yossuf taught in earlier years. Though he didn&#8217;t give me the abstract algebra course himself, the lecture notes were enough to deliver his &#8220;messages of abstraction&#8221; elegantly; I&#8217;m deeply grateful for both courses <span class='endnotereverse'><a href='#enref-130-5'>&#8617;</a></span></li>
<li id='en-130-6'>Engineers rely on linearity to such extent that reminds me with the joke about the man who lost his money in a dark place but went to look for it in a far well-lit place because he simply can&#8217;t see in the dark <span class='endnotereverse'><a href='#enref-130-6'>&#8617;</a></span></li>
<li id='en-130-7'>Charles L. Phillips, John Parr, Eve Riskin, &#8220;Signals, Systems, and Transforms, 4th Edition&#8221;. Prentice Hall 2007 <span class='endnotereverse'><a href='#enref-130-7'>&#8617;</a></span></li>
<li id='en-130-8'>See J.L. Berggren, &#8220;Episodes in the Mathematics of Medieval Islam&#8221;. Springer 2003; and Jim Al-Khalili, &#8220;The House of Wisdom: How Arabic Science Saved Ancient Knowledge and Gave Us the Renaissance&#8221;. Penguin Books, 2012 <span class='endnotereverse'><a href='#enref-130-8'>&#8617;</a></span></li>
<li id='en-130-9'>Isaak Moiseevich Yaglom, &#8220;Geometries, Groups and Algebras in the Nineteenth Century &#8211; A History&#8221;. Ishi Press 2009 <span class='endnotereverse'><a href='#enref-130-9'>&#8617;</a></span></li>
<li id='en-130-10'>Actually, all such systems have some kind of scripting language or API to be used for modeling activities, and is preferred in many situations over GUI modeling <span class='endnotereverse'><a href='#enref-130-10'>&#8617;</a></span></li>
<li id='en-130-11'>The details of which is the subject of my second blog post <span class='endnotereverse'><a href='#enref-130-11'>&#8617;</a></span></li>
<li id='en-130-12'>Andy Oram, Greg Wilson (Editors), &#8220;Beautiful Code: Leading Programmers Explain How They Think&#8221;. O&#8217;Reilly Media, 2007 <span class='endnotereverse'><a href='#enref-130-12'>&#8617;</a></span></li>
<li id='en-130-13'>Martin Fowler, &#8220;Domain-Specific Languages&#8221;. Addison-Wesley Professional, 2010 <span class='endnotereverse'><a href='#enref-130-13'>&#8617;</a></span></li>
<li id='en-130-14'>The mathematical tools needed for signal processing and electrical circuits are different from computer graphics and robotics, for example <span class='endnotereverse'><a href='#enref-130-14'>&#8617;</a></span></li>
</ol>
</div>
<p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=%2Findex.php%2F2015%2F07%2F03%2Fthe-abstract%2F&amp;linkname=The%20Abstract" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=%2Findex.php%2F2015%2F07%2F03%2Fthe-abstract%2F&amp;linkname=The%20Abstract" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=%2Findex.php%2F2015%2F07%2F03%2Fthe-abstract%2F&amp;linkname=The%20Abstract" title="Google+" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save" href="https://www.addtoany.com/share#url=%2Findex.php%2F2015%2F07%2F03%2Fthe-abstract%2F&amp;title=The%20Abstract" data-a2a-url="/index.php/2015/07/03/the-abstract/" data-a2a-title="The Abstract"></a></p><p>The post <a rel="nofollow" href="/index.php/2015/07/03/the-abstract/">The Abstract</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></content:encoded>
			</item>
	</channel>
</rss>
