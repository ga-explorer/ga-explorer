<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>GMac &#8211; Geometric Algebra Explorer</title>
	<atom:link href="/index.php/tag/gmac/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Voyaging the Computational Universe with Geometric Algebra</description>
	<lastBuildDate>Fri, 10 Nov 2017 21:18:27 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.8.3</generator>

<image>
	<url>/wp-content/uploads/2016/12/cropped-GAExplorer-Icon-150x150.jpg</url>
	<title>GMac &#8211; Geometric Algebra Explorer</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>GMac: The Next Generation (2 of 2)</title>
		<link>/index.php/2017/02/10/gmac-tng-2/</link>
		<comments>/index.php/2017/02/10/gmac-tng-2/#respond</comments>
		<pubDate>Fri, 10 Feb 2017 03:00:04 +0000</pubDate>
		<dc:creator><![CDATA[Ahmad Eid]]></dc:creator>
				<category><![CDATA[GA Software]]></category>
		<category><![CDATA[GMac]]></category>
		<category><![CDATA[Compiler]]></category>
		<category><![CDATA[Computer Algebra]]></category>
		<category><![CDATA[Development]]></category>
		<category><![CDATA[Development Environment]]></category>
		<category><![CDATA[Domain Specific]]></category>
		<category><![CDATA[DSL]]></category>
		<category><![CDATA[Geometric Algebra]]></category>
		<category><![CDATA[GMacAPI]]></category>
		<category><![CDATA[GMacAST]]></category>
		<category><![CDATA[GMacDSL]]></category>
		<category><![CDATA[Irony Framework]]></category>
		<category><![CDATA[Mathematica]]></category>
		<category><![CDATA[Parsing]]></category>
		<category><![CDATA[Scripting]]></category>
		<category><![CDATA[Semantic Analysis]]></category>
		<category><![CDATA[TextComposerLib]]></category>

		<guid isPermaLink="false">https://gacomputing.info/?p=2531</guid>
		<description><![CDATA[<p>Planning for the next generation of GMac began in August 2011. I started to design the new version of GMac from scratch by reading significant parts of Terence Parr's book "Language Implementation Patterns", Robert W. Sebesta's classic book "Concepts of Programming Languages", and the second edition of the bestseller Dragon Book "Compilers: Principles, Techniques, and Tools". I had learned many lessons during developing the first GMac prototype. These books provided a solid conceptual framework for designing the new version of GMac containing all the lessons I'd learned before.<br />
In the previous post, I talked about the first part of my journey developing GMac, the fascinating discoveries I made, and the difficulties I faced along the way. In this final part, I explain the design decisions I made for GMac and how I came to select them, in addition to the developments I hope to make in the future.</p>
<p>The post <a rel="nofollow" href="/index.php/2017/02/10/gmac-tng-2/">GMac: The Next Generation (2 of 2)</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></description>
				<content:encoded><![CDATA[<div class='dropshadowboxes-container ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#E4EDF8;    '>
                            
<div class="su-note" style="border-color:#e5e5e5;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#ffffff;border-color:#ffffff;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<p><a href="/wp-content/uploads/2017/02/Arches.jpg"><img class="aligncenter size-large wp-image-2539" src="/wp-content/uploads/2017/02/Arches-1024x768.jpg" alt="Arches" width="1024" height="768" srcset="/wp-content/uploads/2017/02/Arches-1024x768.jpg 1024w, /wp-content/uploads/2017/02/Arches-300x225.jpg 300w, /wp-content/uploads/2017/02/Arches-768x576.jpg 768w, /wp-content/uploads/2017/02/Arches.jpg 1280w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p>
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult.</p>
<p style="text-align: right;"><em><strong>&#8212; C. A. R. Hoare</strong></em></p>
</blockquote>
</div>
</div></div>

                            </div>
                        </div>
<hr />
<span class="dropcap">P</span>lanning for the next generation of GMac began in August 2011. I started to design the new version of GMac from scratch by reading significant parts of Terence Parr&#8217;s book &#8220;<a href="https://pragprog.com/book/tpdsl/language-implementation-patterns" target="_blank" rel="noopener">Language Implementation Patterns</a>&#8221; <sup class='endnote'><a href='#en-2531-1' id='enref-2531-1' onclick='return hhEndnotes_show(2531)'>1</a></sup>, Robert W. Sebesta&#8217;s classic book &#8220;<a href="https://www.amazon.com/Concepts-Programming-Languages-Robert-Sebesta/dp/0131395319" target="_blank" rel="noopener">Concepts of Programming Languages</a>&#8220;, and the second edition of the bestseller <a href="https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools" target="_blank" rel="noopener">Dragon Book</a> &#8220;<a href="https://www.amazon.com/Compilers-Principles-Techniques-Tools-2nd/dp/0321486811/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1486586482&amp;sr=1-1&amp;keywords=compiler+design" target="_blank" rel="noopener">Compilers: Principles, Techniques, and Tools</a>&#8220;. I had learned many lessons during developing the first GMac prototype. These books provided a solid conceptual framework for designing the new version of GMac containing all the lessons I&#8217;d learned before.</p>
<p>In the <a href="/index.php/2017/02/09/gmac-tng-1/" target="_blank" rel="noopener">previous post</a>, I talked about the first part of my journey developing GMac, the fascinating discoveries I made, and the difficulties I faced along the way. In this final part, I explain the design decisions I made for GMac and how I came to select them, in addition to the developments I hope to make in the future.</p>
<hr />
<h3>Having a Symbolic Value</h3>
<div class="su-note" style="border-color:#cdd5df;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#E4EDF8;border-color:#fafbfe;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>&#8230; with proper design, the features come cheaply. This approach is arduous, but continues to succeed.</p>
<p style="text-align: right;"><em><strong>&#8212; Dennis Ritchie</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#E4EDF8;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<p><a href="/wp-content/uploads/2017/02/Equations.jpg"><img class="size-medium wp-image-2523 aligncenter" src="/wp-content/uploads/2017/02/Equations-300x200.jpg" alt="Equations" width="300" height="200" srcset="/wp-content/uploads/2017/02/Equations-300x200.jpg 300w, /wp-content/uploads/2017/02/Equations.jpg 640w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
</div>

                            </div>
                        </div>
<p>The first line of code I wrote was in the most basic of its foundations; namely the interface between GMac and a mathematical symbolic processing system like Mathematica. In addition, I created a library of utilities and basic data structures that grew over time called <strong>UtilsLib</strong>. I initially started out trying to design a single library that is capable of unifying and handling symbolic processing for a number of <a href="https://en.wikipedia.org/wiki/Computer_algebra_system" target="_blank" rel="noopener"><strong>Computer Algebra Systems</strong></a> <strong>(CAS)</strong> like <a href="https://www.wolfram.com/mathematica/" target="_blank" rel="noopener">Mathematica</a>, <a href="https://www.maplesoft.com/products/maple/" target="_blank" rel="noopener" class="broken_link">Maple</a>, <a href="https://www.ptc.com/en/products/mathcad" target="_blank" rel="noopener">Mathcad</a>, <a href="http://www.sagemath.org/" target="_blank" rel="noopener">SageMath</a>, <a href="http://maxima.sourceforge.net/" target="_blank" rel="noopener">Maxima</a>, etc. In order to create such class library, I would have to learn the basics of all these systems to abstract a common interface. This was a huge project by itself that would delay my dream considerably. I eventually concentrated on designing an Object Oriented (OO) interface to <a href="http://reference.wolfram.com/language/NETLink/tutorial/Overview.html" target="_blank" rel="noopener">Mathematica&#8217;s NET Link API</a> in the hope that I would have the time to expand it later to other symbolic processing systems.</p>
<p>Computer algebra systems mostly use homogeneous trees of objects, like Mathematica&#8217;s <a href="https://reference.wolfram.com/language/NETLink/ref/net/Wolfram.NETLink.Expr.html" target="_blank" rel="noopener">Expr class</a>, to store information about <a href="http://reference.wolfram.com/language/tutorial/EverythingIsAnExpression.html" target="_blank" rel="noopener">the structure of all their expressions</a>. These homogenous trees are suitable for computer algebra but not easy to handle using OO design. This is a similar problem to needing an OO interface between tables in relational databases and the OO applications interacting with them, we call that the <strong><a href="https://en.wikipedia.org/wiki/Data_access_layer" target="_blank" rel="noopener">Data Access Layer</a> (DAL)</strong>.</p>
<p>The final result is my <strong><a href="https://gmac-guides.netlify.com/index.php/gmac-math-guide/" target="_blank" rel="noopener">SymbolicInterface</a></strong> component class library, a kind of <strong>Symbolic Processing Access Layer (SPAL)</strong> to Mathematica. The main purpose of this library is to add low-level symbolic processing capabilities to GMac on symbolic scalars. A symbolic scalar is the most basic unit of computation that GMac can handle; it represents an expression that can be evaluated into a real number after substituting values into its symbolic variables if any are present. For example, all the following are basic symbolic scalars in GMac based on Mathematica syntax for symbolic expressions:</p>
<ul>
<li>-109</li>
<li>2.3456</li>
<li>Rational[6,11]</li>
<li>Pi</li>
<li>Sin[2*Pi/3]</li>
<li>Exp[-t/5]</li>
<li>x + 3 * Power[y, 2] &#8211; 5 x * y</li>
</ul>
<p>The restrictions on the Mathematica values and functions used in scalar expressions is that each value or function should be convertible into the target language in which code generation is desired. Each symbolic variable, like x, y, and t in the above expressions, should be associated with a data store in the target code; for example, a local variable, an array element, a class member, a named constant etc. Additional kinds of symbolic expressions with unified OO interfaces can be defined and evaluated like matrices, vectors, boolean expressions, rules, etc.</p>
<p>Using the SymbolicInterface classes I could now define basic operations on multivectors in any selected GA frame. I could define symbolic basis blades and their linear combinations using an approach similar to the one described in &#8220;<a href="https://www.amazon.com/Geometric-Algebra-Computer-Science-Revised/dp/0123749425" target="_blank" rel="noopener">Geometric Algebra for Computer Science</a>&#8220;. I could create and manipulate symbolic multivectors as linear combinations of basis blades with any given signature, even non-orthogonal ones like the 5D Conformal GA. The coefficients of these symbolic multivectors are symbolic scalars, not just numeric floating point numbers. I began implementing all standard operations on multivectors and blades like the geometric, outer, and inner products, inversions and involutions, outermorphisms, etc.</p>
<p>The SymbolicInterface classes are used extensively across all layers and components of GMac to communicate with Mathematica through a unified OO interface. This interface can be used in similar projects. I hope I could make it an open source component in the near future, if I could obtain proper funding for GMac, to be further developed by interested people. I also need to add automatic symbolic multivector differentiation to increase the range of applications that GMac can be used in.</p>
<p>&nbsp;</p>
<h3>Being Specific</h3>
<div class="su-note" style="border-color:#cdd5df;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#E4EDF8;border-color:#fafbfe;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>It&#8217;s OK to figure out murder mysteries, but you shouldn&#8217;t need to figure out code. You should be able to read it.</p>
<p style="direction: ltr; text-align: right;"><em><strong>&#8212; Steve McConnell</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#E4EDF8;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<p><a href="/wp-content/uploads/2017/02/Coding.jpg"><img class="wp-image-2526 size-medium aligncenter" src="/wp-content/uploads/2017/02/Coding-300x200.jpg" alt="Coding" width="300" height="200" srcset="/wp-content/uploads/2017/02/Coding-300x200.jpg 300w, /wp-content/uploads/2017/02/Coding.jpg 640w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
</div>

                            </div>
                        </div>
<p>The next logical step to make was to design and implement the main user interface to the GMac system, its <strong><a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="noopener">Domain Specific Language</a> (DSL)</strong>. One of the lessons I&#8217;d learned during my Ph.D. was that using sophisticated software systems requires a well-designed interface close to the user&#8217;s specific domain of knowledge, not the software engineer&#8217;s. Two approaches, DSLs and <strong><a href="https://en.wikipedia.org/wiki/Visual_programming_language" target="_blank" rel="noopener">Visual Programming Languages</a> (VPLs)</strong>, are the best candidates for the job. A VPL can always be built around a DSL but would require an additional layer to visually interface with the user, So I decided to start with a simple Geometric Algebra based DSL <sup class='endnote'><a href='#en-2531-2' id='enref-2531-2' onclick='return hhEndnotes_show(2531)'>2</a></sup>. I hope in the future I could implement a visual environment for GMac that can be used to define GA-models using visual GA-notation and relate the DSL&#8217;s components together visually.</p>
<p>It took a lot of experimentation and re-design, but the final result is <a href="https://gmac-guides.netlify.com/index.php/gmacdsl-guide/" target="_blank" rel="noopener"><strong>GMacDSL</strong></a>. The language design of GMacDSL is simple and focused on the domain; namely GA-based modeling. GMacDSL is not <a href="https://en.wikipedia.org/wiki/Turing_completeness" target="_blank" rel="noopener">Turing-complete</a> because it doesn&#8217;t need to be. The main elements of GMacDSL are:</p>
<ol>
<li><strong>Namespaces:</strong> These are simple logical named containers for the other elements of GMacDSL similar ti Java packages and C# namespaces.</li>
<li><strong>Frames:</strong> Using GMacDSL, the user can define any fixed set of named basis vectors along with their relative metric relations including Euclidean, Orthonormal, Orthogonal, and Non-orthogonal frames. Frames are the basic abstraction on which all subsequent symbolic computations occur inside GMac.</li>
<li><strong>Subspaces:</strong> A subspace is a set of basis blades of a given frame. They are useful in many cases for selecting or defining parts of multivectors during symbolic computations.</li>
<li><strong>Pre-defined Data Types:</strong> Two types are present in GMacDSL. Scalars are symbolic expressions of real values, including number literals. In addition, each frame automatically defines an associated Multivector type; a list of scalars defining a symbolic linear combination of the Frame&#8217;s basis blades.</li>
<li><strong>Structures:</strong> User-defined combinations of named members having given types including scalars, multivectors, or other structures. These are similar to user-defined types and structs in other languages. The main purpose of structures is to implement the pattern of <a href="/index.php/2017/01/13/ga-computing3/" target="_blank" rel="noopener">Geometric Generators</a> in GMacDSL.</li>
<li><strong>Constants:</strong> These are constant-valued named data containers of any type including scalars, multivectors, and structures. The scalar values inside constants can be large symbolic expressions; they needn&#8217;t be number literals.</li>
<li><strong>Fixed Outermorphisms:</strong> These are simple outermorphisms with fixed scalar elements that are mainly used to transform related frames. For example, we can define a non-orthogonal frame using an orthogonal one and an invertible change of basis matrix. Then GMac automatically defines two fixed outermorphisms to transform multivectors between the two frames.</li>
<li><strong>Multivector Expressions:</strong> The main function of GMac is to handle standard GA operations on symbolic multivectors. Multivector expressions provide this capability to define macros and construct constants.</li>
<li><strong>Macros:</strong> A macro in GMacDSL is the most important unit of computation. Simply speaking, a macro is a list of GA-based high-level computations on scalars, multivectors, and structures that produce a single value of any type from computations performed on a number of inputs, also of any type. A macro is not a procedure or function in the familiar way of common programming languages. A macro can only call other macros defined before it in the DSL code and allows no recursion.</li>
</ol>
<p>This structure is simple to understand and use for non-programmers working with GA models while being sufficient for covering many practical GA models. In the future, I hope to develop GMacDSL using the <a href="https://en.wikipedia.org/wiki/Functional_programming" target="_blank" rel="noopener">Functional Programming Paradigm</a>. This would provide elegant and powerful syntax and semantics for GA-based models that would take great benefit from GA&#8217;s unified and elegant mathematical abstractions.</p>
<p>&nbsp;</p>
<h3>Finding Irony</h3>
<div class="su-note" style="border-color:#cdd5df;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#E4EDF8;border-color:#fafbfe;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>When debugging, novices insert corrective code; experts remove defective code.</p>
<p style="text-align: right;"><em><strong>&#8212; Richard Pattis</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#E4EDF8;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<div id="attachment_2494" style="width: 266px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/02/Compiler.png"><img class="size-medium wp-image-2494" src="/wp-content/uploads/2017/02/Compiler-256x300.png" alt="Compiler" width="256" height="300" srcset="/wp-content/uploads/2017/02/Compiler-256x300.png 256w, /wp-content/uploads/2017/02/Compiler.png 378w" sizes="(max-width: 256px) 100vw, 256px" /></a><p class="wp-caption-text">Construction of a typical compiler (<a href="https://commons.wikimedia.org/wiki/File:Compilador.png" target="_blank" rel="noopener">source</a>)</p></div>
</div>

                            </div>
                        </div>
<p>In order to experiment with various designs of GMacDSL I had to implement a compiler to parse and translate GMacDSL code into a suitable intermediate data structure. In 2012, I began writing the <strong>GMacCompiler</strong> <a href="https://en.wikipedia.org/wiki/Compiler#Front_end" target="_blank" rel="noopener">front-end</a> for that purpose. The first step in creating a typical <a href="https://en.wikipedia.org/wiki/Compiler" target="_blank" rel="noopener">compiler</a> is to implement its parser. I initially tried to code my own parser using the elegant functional capabilities of <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a> but I later found a much better solution called <strong><a href="http://irony.codeplex.com/" target="_blank" rel="noopener">Irony</a> </strong>by Roman Ivantsov <sup class='endnote'><a href='#en-2531-3' id='enref-2531-3' onclick='return hhEndnotes_show(2531)'>3</a></sup>. Irony has many good features that attract computer language designers to use it as a base for their language tools. Using Irony I could easily parse GMacDSL code into a homogeneous <a href="https://en.wikipedia.org/wiki/Parse_tree" target="_blank" rel="noopener"><strong>Parse Tree</strong></a>. This parse tree is not useful by itself because it&#8217;s based on a context-free Irony Grammar, but it can be converted into a more useful <strong><a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" target="_blank" rel="noopener">Abstract Syntax Tree</a> (AST)</strong> through <a href="https://www.tutorialspoint.com/compiler_design/compiler_design_semantic_analysis.htm" target="_blank" rel="noopener">semantic analysis</a>.</p>
<p>Based on Irony, I developed an infrastructure for creating simple DSLs. I call this infrastructure <strong>IronyGrammars </strong><sup class='endnote'><a href='#en-2531-4' id='enref-2531-4' onclick='return hhEndnotes_show(2531)'>4</a></sup>; it provides many services needed by typical DSL compilers like source code handling, error and warning messages reporting, <a href="https://en.wikipedia.org/wiki/Symbol_table" target="_blank" rel="noopener">symbol table</a> management, <a href="https://www.tutorialspoint.com/compiler_design/compiler_design_semantic_analysis.htm" target="_blank" rel="noopener">semantic analysis</a>, AST construction and navigation, interpretation services, etc. Naturally, the most difficult part of implementing the IronyGrammars infrastructure is the debugging. Many cycles of refactoring, testing, and debugging were made. The implementation finally settled in a relatively satisfying state after removing much code.</p>
<p>I used IronyGrammars to create the GMacCompiler front-end as a specific compiler of GMacDSL code. The GMacCompiler front-end parses and translates the GMacDSL code into the desired intermediate data structure; the <strong><a href="https://gmac-guides.netlify.com/index.php/gmacast-guide/" target="_blank" rel="noopener">GMacAST</a></strong> structure used as the primary GA-based high-level information source for further symbolic processing at later stages. I also created mini-compilers that can translate partial GMacDSL code like a single multivector expression, a single user-defined structure, or a single macro. This kind of small compilers is very useful during code composition for adding temporary structure to an already created GMacAST.</p>
<p>&nbsp;</p>
<h3>Caring for the Environment, Talking to Trees</h3>
<div class="su-note" style="border-color:#cdd5df;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#E4EDF8;border-color:#fafbfe;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>Perfection (in design) is achieved not when there is nothing more to add, but rather when there is nothing more to take away.</p>
<p style="text-align: right;"><em><strong>&#8212; Antoine de Saint-Exupery</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#E4EDF8;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<div id="attachment_1220" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/11/GMacAST_MainComponents.jpeg"><img class="size-medium wp-image-1220" src="/wp-content/uploads/2015/11/GMacAST_MainComponents-300x268.jpeg" alt="GMacAST Main Components" width="300" height="268" /></a><p class="wp-caption-text">GMacAST Main Components</p></div>
</div>

                            </div>
                        </div>
<p>By 2013 I had a solid perception of the main components that GMac should have. I also was almost finished with two of GMac&#8217;s core components: GMacDSL and the GMacCompiler front-end that translated GMacDSL code into the high-level GMacAST intermediate structure. It was about time to create a proper, but simple, <strong><a href="https://en.wikipedia.org/wiki/Integrated_development_environment" target="_blank" rel="noopener">Integrated Development Environment</a> (IDE)</strong>; the <strong><a href="https://gmac-guides.netlify.com/index.php/gmac-system-guide/" target="_blank" rel="noopener">GMacIDE</a></strong>.</p>
<p>The first thing I needed is a simple colored TextBox control for <a href="https://en.wikipedia.org/wiki/Syntax_highlighting" target="_blank" rel="noopener">Syntax Highlighting</a>. I soon found the nice <a href="https://www.codeproject.com/Articles/161871/Fast-Colored-TextBox-for-syntax-highlighting" target="_blank" rel="noopener">FastColoredTextBox control</a> by Pavel Torgashov <sup class='endnote'><a href='#en-2531-5' id='enref-2531-5' onclick='return hhEndnotes_show(2531)'>5</a></sup>. I implemented a simple interface for GMacDSL code management to handle projects containing multiple code files, to compile and report errors and warnings, explore the GMacAST, generate sample code from a single macro, and perform other functions.</p>
<p>The current GMacIDE is very simple, I hope in the future it can be extended to contain a set of Visual Editors for creating and modifying GMacDSL code and manage the details of code composition from GA-models. In addition, I need to add some form of interactive multivector visualization component to enable exploring GA-based geometry visually.</p>
<p>&nbsp;</p>
<h3>Scripting Your Next Play</h3>
<div class="su-note" style="border-color:#cdd5df;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#E4EDF8;border-color:#fafbfe;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>Talk is cheap. Show me the code.</p>
<p style="text-align: right;"><em><strong>&#8212; Linus Torvalds</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#E4EDF8;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<p><a href="/wp-content/uploads/2017/02/GMac.jpg"><img class="wp-image-2476 size-medium aligncenter" src="/wp-content/uploads/2017/02/GMac-300x169.jpg" alt="Script" width="300" height="169" srcset="/wp-content/uploads/2017/02/GMac-300x169.jpg 300w, /wp-content/uploads/2017/02/GMac-768x432.jpg 768w, /wp-content/uploads/2017/02/GMac-1024x576.jpg 1024w, /wp-content/uploads/2017/02/GMac.jpg 1173w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
</div>

                            </div>
                        </div>
<p>The GMacIDE enables the GMac user to perform many functions. One of the most important of these functions is interfacing with the <strong><a href="https://gmac-guides.netlify.com/index.php/gmac-scripting-guide/" target="_blank" rel="noopener">GMac Scripting Engine</a></strong>. Implementing a scripting engine for a system like GMac is essential. GMacDSL is not Turing-complete, the user can describe GA-based models but can&#8217;t properly interact with them unless he uses more programming structure like loops, conditional execution, expression evaluation, etc. These functions require an interpreter, at least, to be implemented properly. In addition, the powerful symbolic processing capabilities supporting GMac can be accessed using such scripting engine.</p>
<p>GMac scripting is intended for exploration of geometric ideas through GA-based geometric models and algorithms. Three languages can be integrated into a single GMac script, each for a specific purpose:</p>
<ol>
<li><a href="https://en.wikipedia.org/wiki/C_Sharp_(programming_language)" target="_blank" rel="noopener">C# code</a> comprises the main body of the script. C# is not originally designed for <a href="https://en.wikipedia.org/wiki/Scripting_language" target="_blank" rel="noopener">scripting purposes</a>, nevertheless, C# is a <a href="http://csharpindepth.com/" target="_blank" rel="noopener">very powerful</a> compiled statically typed object-oriented language that can be used for scripting. To simplify using C# as a scripting interface for GMac some <a href="https://en.wikipedia.org/wiki/Syntactic_sugar" target="_blank" rel="noopener">syntactic sugar</a> is used to &#8220;sweeten&#8221; the process of reading and writing GMac scripts.</li>
<li><a href="https://gmac-guides.netlify.com/index.php/gmacdsl-guide/" target="_blank" rel="noopener">GMacDSL code</a> can be executed on <a href="https://gmac-guides.netlify.com/index.php/gmacdsl-guide/#frames" target="_blank" rel="noopener">multivector</a> values and user-defined <a href="https://gmac-guides.netlify.com/index.php/gmacdsl-guide/#structures" target="_blank" rel="noopener">structures</a>. The scalar coefficients of multivectors can be numerical, symbolic, or a mix of both. GMac code is passed, as C# public method calls, to GMac internal services in string form to be automatically compiled and executed by the GMacCompiler.</li>
<li><a href="https://en.wikipedia.org/wiki/Mathematica" target="_blank" rel="noopener">Mathematica code</a> can be executed on the Mathematica kernel used in the background by GMac. The Mathematica text code is passed through C# service method calls to the Mathematica kernel through the SymbolicInterface classes. This can be used to exploit the full power of Mathematica through GMac to perform many symbolic manipulations and graphing tasks related to the purpose of the GA-based script exploration.</li>
</ol>
<p>The main input to the script is always a GMacAST structure compiled from the main GMacDSL code. This combination of GMacAST structure, C#, GMac, and Mathematica code, make GMac scripting a very powerful method for GA-models exploration from the simple to the complex.</p>
<p>Scripting in GMac is not intended for efficient execution of GA-based algorithms. If the user is satisfied by the final algorithm, GMacAPI can be used by a good software designer to implement an efficient, well-structured version of the script in any desired programming language, with specific types of multivectors and GA algorithms.</p>
<p>&nbsp;</p>
<h3>Composing Text Art</h3>
<div class="su-note" style="border-color:#cdd5df;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#E4EDF8;border-color:#fafbfe;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>In science, if you don&#8217;t do it, somebody else will. Whereas in art, if Beethoven didn&#8217;t compose the &#8216;Ninth Symphony,&#8217; no one else before or after is going to compose the &#8216;Ninth Symphony&#8217; that he composed; no one else is going to paint &#8216;Starry Night&#8217; by van Gogh.</p>
<p style="text-align: right;"><em><strong>&#8212; Neil deGrasse Tyson</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#E4EDF8;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<p><a href="/wp-content/uploads/2017/02/Composing-Code.jpg"><img class="size-medium wp-image-2586 aligncenter" src="/wp-content/uploads/2017/02/Composing-Code-300x200.jpg" alt="Composing Code" width="300" height="200" srcset="/wp-content/uploads/2017/02/Composing-Code-300x200.jpg 300w, /wp-content/uploads/2017/02/Composing-Code.jpg 640w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
</div>

                            </div>
                        </div>
<p>The final stage in any compiler is <a href="https://en.wikipedia.org/wiki/Code_generation_(compiler)" target="_blank" rel="noopener">code generation</a> from some intermediate representation of the input source code. This stage is the most demanding for creativity because it relies on designing and implementing many optimizations to generate target code suitable for its specific consumer. Traditional compilers typically generate machine code for native hardware or byte code for virtual machine frameworks. This form of code is machine-oriented, cold and repetitive code not intended for reading or understanding by humans. GMac, being a DSL based <a href="https://en.wikipedia.org/wiki/Source-to-source_compiler" target="_blank" rel="noopener">source-to-source compiler</a>, produces programmer-oriented textual source code in some high-level human-readable language. The difference between designing the code generator of any typical compiler vs. the code generator of a system like GMac is similar to the difference between designing a machine that creates mechanical parts and designing a tool-set for an artist.</p>
<p>If we look up the verb <em><strong>compose</strong></em> in the <a href="https://www.merriam-webster.com/dictionary/compose" target="_blank" rel="noopener">Merriam-Webster online dictionary</a> we&#8217;ll find the following meanings:</p>
<ol>
<li><strong>A) to form by putting together</strong>: fashion; &#8216;a committee composed of three representatives&#8217;<br />
<strong>B) to form the substance of</strong>: constitute; &#8216;composed of many ingredients&#8217;<br />
<strong>C) to produce (as columns or pages of type) by composition</strong></li>
<li><strong>A) to create by mental or artistic labor</strong>: produce; &#8216;compose a sonnet&#8217;<br />
<strong>B) to formulate and write (a piece of music)</strong>: to compose music for</li>
<li><strong>to deal with or act on so as to reduce to a minimum</strong> &#8216;compose their differences&#8217;</li>
<li><strong>to arrange in proper or orderly form</strong></li>
<li><strong>to free from agitation</strong>: calm, settle &#8216;composed himself&#8217;</li>
</ol>
<p>My personal view of coding is a form of:</p>
<blockquote><p>Creative composition of highly structured, human-understandable, and machine-compilable text holding all the meanings of the verb <em><strong>compose</strong></em> stated above.</p></blockquote>
<p>To me writing code is not just about execution efficiency or blind implementation of algorithms; writing code is fundamentally artistic such that no two skilled software developers may produce the same code for a single problem. Like there can be no machine that may creatively produce music or paintings, there can be no single code generator that can, by itself, write human-understandable code with all its rich content of information, creativity, and beauty. Nevertheless, we can certainly make many smaller tool sets to help the skilled code developer layout code in the way humanly and creatively desired, while automatically generating machine-oriented code from the intermediate representation to free the <em><strong>coding artist</strong></em> from its repetitive cold nature.</p>
<p>The text generation toolset specifically created for GMac, but independently usable otherwise, is a C# library called <a href="https://gmac-guides.netlify.com/index.php/textcomposerlib-guide/" target="_blank" rel="noopener"><strong>TextComposerLib</strong></a>. I made the decision of creating my own text generation component in 2013 after an extensive search for many similar libraries. I found no libraries that satisfied my vision for GMac. The TextComposerLib library is like a set of paint brushes to artists. The user can combine several of its text composition tools to create highly structured text. The structure can be generated on the internal level of a single document, or on the external level of files and folders.</p>
<p>In the future, I hope to make TextComposerLib more versatile and reliable by introducing <a href="https://en.wikipedia.org/wiki/Multithreading_(software)" target="_blank" rel="noopener">Multithreading</a> capabilities and designing a <a href="https://en.wikipedia.org/wiki/Service-oriented_programming" target="_blank" rel="noopener">Service-Oriented</a> interface. I also hope to release it as an open-source component for general text composition tasks.</p>
<p>&nbsp;</p>
<h3>Building A Factory</h3>
<div class="su-note" style="border-color:#cdd5df;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#E4EDF8;border-color:#fafbfe;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>Make everything as simple as possible, but not simpler.</p>
<p style="text-align: right;"><em><strong>&#8212; Albert Einstein</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#E4EDF8;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<p><a href="/wp-content/uploads/2017/02/Industrial-robots.jpg"><img class="size-medium wp-image-2528 aligncenter" src="/wp-content/uploads/2017/02/Industrial-robots-300x169.jpg" alt="Factory" width="300" height="169" srcset="/wp-content/uploads/2017/02/Industrial-robots-300x169.jpg 300w, /wp-content/uploads/2017/02/Industrial-robots.jpg 500w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
</div>

                            </div>
                        </div>
<p>In 2014 I began implementing the GMac part I enjoyed the most; the <strong><a href="https://gmac-guides.netlify.com/index.php/gmacapi-guide/" target="_blank" rel="noopener">GMacAPI</a> </strong>code assembly component. If TextComposerLib is like a set of tools for artists to compose with, then GMacAPI is like a fully configurable production line for assembling structured code. Using this extensive and sophisticated <strong><a href="https://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="noopener">Application Programming Interface</a> (API)</strong>, you can perform a full process of assembling code libraries in any desired target programming language. Using the GMacAPI you can:</p>
<ul>
<li>Supply raw materials to the assembly line; mainly a compiled GMacAST data structure that is independent of any particular target language, like C#, Python, C++, Java, etc., from any particular external computing libraries, and from any particular software architecture required.</li>
<li>Use the full composition capabilities of TextComposerLib for producing the final code.</li>
<li>Define sub-processes for assembling subsets of the final code library by inheriting from the GMacAPI core classes.</li>
<li>Monitor and log each step of the code assembly process for debugging and maintenance.</li>
<li>Use GMacDSL macros to produce a series of optimized computationally equivalent low-level code in the target language of choice.</li>
</ul>
<p>I&#8217;m very proud of my work in the GMacAPI as it contains many interesting techniques from computer science and software engineering; especially techniques related to <a href="https://en.wikipedia.org/wiki/Optimizing_compiler" target="_blank" rel="noopener">code block optimization</a>. The tasks in which GMacAPI can be used are diverse and wide-ranging. I&#8217;ve tried my best to make it as simple as possible for a good software Engineer to use a given GA-model and create a full code library out of it. Because such goal is not easy to reach, using the GMacAPI component requires a good deal of learning and experimentation. I hope in the future to make it more accessible through some form of Visual Interface in which the software engineer can lay out the components, connect, and configure them visually with few lines of code as possible.</p>
<p>&nbsp;</p>
<h3>Seeking Guidance</h3>
<div class="su-note" style="border-color:#cdd5df;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#E4EDF8;border-color:#fafbfe;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>Conceptual integrity is the most important consideration in system design.</p>
<p style="text-align: right;"><em><strong>&#8212; Fred Brooks, &#8220;The Mythical Man-Month&#8221;</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#E4EDF8;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<p><a href="/wp-content/uploads/2017/02/books-659690_640.jpg"><img class="size-medium wp-image-2519 aligncenter" src="/wp-content/uploads/2017/02/books-659690_640-300x200.jpg" alt="Documentation" width="300" height="200" srcset="/wp-content/uploads/2017/02/books-659690_640-300x200.jpg 300w, /wp-content/uploads/2017/02/books-659690_640.jpg 640w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
</div>

                            </div>
                        </div>
<p>Software documentation is a hard but necessary part of any software system. GMac is a sophisticated system with lots of interacting components. For a good part of 2015 and 2016, I concentrated on writing the online <strong><a href="https://gmac-guides.netlify.com/index.php/about-gmac/" target="_blank" rel="noopener">GMac Guides</a></strong>. The GMac Guides explain in good details the structure of the main components of GMac and how to use them as intended. While writing these guides I discovered some design deficiencies in some parts of GMac that needed fixing or enhancing. This is simply because I couldn&#8217;t explain them to myself in plain English, or with a direct example when I tried to write the GMac Guides.</p>
<p>Naturally, the full power of GMac can only be illustrated through practical examples. I&#8217;ve created the <strong><a href="https://gmac-guides.netlify.com/index.php/gmac-samples/" target="_blank" rel="noopener">GMac Samples</a></strong> page on this website for this purpose. In time this page should contain enough examples that I hope would motivate users to explore the computational space using Geometric Algebra and GMac.</p>
<p>&nbsp;</p>
<h3>The Next Generation</h3>
<div class="su-note" style="border-color:#cdd5df;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#E4EDF8;border-color:#fafbfe;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>Space: the final frontier. These are the voyages of the starship Enterprise. Its continuing mission: to explore strange new worlds, to seek out new life and new civilizations, to boldly go where no one has gone before.</p>
<p style="text-align: right;"><em><strong>&#8212; <a href="https://www.youtube.com/watch?v=HnDtvZXYHgE" target="_blank" rel="noopener">Captain Jean-Luc Picard, Star Trek: The Next Generation</a></strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#E4EDF8;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<div id="attachment_2497" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/02/GMac-Components.png"><img class="wp-image-2497 size-medium" src="/wp-content/uploads/2017/02/GMac-Components-300x141.png" alt="GMac Components" width="300" height="141" srcset="/wp-content/uploads/2017/02/GMac-Components-300x141.png 300w, /wp-content/uploads/2017/02/GMac-Components-768x360.png 768w, /wp-content/uploads/2017/02/GMac-Components-520x245.png 520w, /wp-content/uploads/2017/02/GMac-Components-720x340.png 720w, /wp-content/uploads/2017/02/GMac-Components.png 939w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">The main components of GMac</p></div>
</div>

                            </div>
                        </div>
<p>I&#8217;m writing these words on the 9th of February 2017; it is my 40th birthday. This post is my final thoughts on the 8 years journey creating my own vessel for exploration, GMac. I don&#8217;t know if I will actually get to use it, as I hope, to explore the computational universe. I still need to add a visualization component and a multivector differentiation component to the mix. I also hope I could modify the design to use other CAS like SymPy or Maple and add a Visual Interface to create GMacDSL code that should be developed to apply functional programming techniques. Many other enhancements and components are possible. Nevertheless, I have learned a lot as I initially expected. I&#8217;m now ready to explore applications and algorithms with my own tool. I&#8217;m ready to contact other people to exchange ideas and investigate possibilities. I&#8217;m ready to begin a new journey as this one ends.</p>
<hr />
<div class="su-note" style="border-color:#cdd5df;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#E4EDF8;border-color:#fafbfe;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<p style="text-align: center;"><span style="font-family: 'Traditional Arabic'; font-size: 28px;"><strong>تم بحمد الله الجمعة 13 جماد أول 1438هـ</strong></span></p>
</div>
</div></div>
<hr />
<p>&nbsp;</p>
<div class='endnotes' id='hhendnotes-2531'>
<ol>
<li id='en-2531-1'>Terence Parr is the creator of <a href="http://www.antlr.org/" target="_blank" rel="noopener"><strong>ANTLR</strong></a> <strong>(AN</strong>other<strong> T</strong>ool for<strong> L</strong>anguage<strong> R</strong>ecognition<strong>)</strong>; a powerful parser generator for reading, processing, executing, or translating structured text or binary files. It&#8217;s widely used to build languages, tools, and frameworks. From a grammar, ANTLR generates a parser that can build and walk parse trees. <span class='endnotereverse'><a href='#enref-2531-1'>&#8617;</a></span></li>
<li id='en-2531-2'>For more information about DSLs and alternative approaches, you can read my post &#8220;<a href="/index.php/2015/09/11/ga-computing1/" target="_blank" rel="noopener">Computing: Please, Mind Your Language!</a>&#8220;. <span class='endnotereverse'><a href='#enref-2531-2'>&#8617;</a></span></li>
<li id='en-2531-3'>You can find good Irony tutorials <a href="https://blogs.msdn.microsoft.com/kirillosenkov/2009/10/31/irony/" target="_blank" rel="noopener">here</a> and <a href="https://www.codeproject.com/Articles/22650/Irony-NET-Compiler-Construction-Kit" target="_blank" rel="noopener">here</a>, in addition to the many samples coming with the <a href="https://github.com/Alxandr/Irony" target="_blank" rel="noopener">Irony source code</a>. <span class='endnotereverse'><a href='#enref-2531-3'>&#8617;</a></span></li>
<li id='en-2531-4'>The IronyGrammars class library is not yet documented. I hope I could release it as an open-source project in the future. <span class='endnotereverse'><a href='#enref-2531-4'>&#8617;</a></span></li>
<li id='en-2531-5'>You can find the FCTB source code <a href="https://github.com/PavelTorgashov/FastColoredTextBox" target="_blank" rel="noopener">here</a>. <span class='endnotereverse'><a href='#enref-2531-5'>&#8617;</a></span></li>
</ol>
</div>
<p>The post <a rel="nofollow" href="/index.php/2017/02/10/gmac-tng-2/">GMac: The Next Generation (2 of 2)</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/2017/02/10/gmac-tng-2/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>GMac: The Next Generation (1 of 2)</title>
		<link>/index.php/2017/02/09/gmac-tng-1/</link>
		<comments>/index.php/2017/02/09/gmac-tng-1/#respond</comments>
		<pubDate>Thu, 09 Feb 2017 16:00:02 +0000</pubDate>
		<dc:creator><![CDATA[Ahmad Eid]]></dc:creator>
				<category><![CDATA[GA Software]]></category>
		<category><![CDATA[GMac]]></category>
		<category><![CDATA[Belief in Allah]]></category>
		<category><![CDATA[Computational Universe]]></category>
		<category><![CDATA[Effort]]></category>
		<category><![CDATA[Geometric Algebra]]></category>
		<category><![CDATA[Introverted]]></category>
		<category><![CDATA[Journey]]></category>
		<category><![CDATA[Object Oriented]]></category>
		<category><![CDATA[Ph.D.]]></category>
		<category><![CDATA[Programming Paradigm]]></category>
		<category><![CDATA[Requirements]]></category>
		<category><![CDATA[Software Engineering]]></category>

		<guid isPermaLink="false">https://gacomputing.info/?p=2532</guid>
		<description><![CDATA[<p>In the summer of 2003, I was almost at the end of my M.Sc. thesis. One day I was surfing the web searching for some references to add to the thesis I'd been writing. I ran into Mikael Nilsson’s interesting M.Sc. thesis “Geometric Algebra with Conzilla: Building a Conceptual Web of Mathematics”. His work contains a nice introduction to Geometric Algebra, with accompanying UML-based conceptual models. It got me very curious about GA. I made some more searches finding a few papers, books, and tutorials. After reading some of them I was suddenly transferred into a new world of algebraic abstractions. For the first time in my life as a student, engineer, and software developer I could hope to express, explore, and manipulate geometric abstractions with such clarity. I then decided that my Ph.D. will be about exploring Geometric Algebra using the best way I know: developing software. </p>
<p>The post <a rel="nofollow" href="/index.php/2017/02/09/gmac-tng-1/">GMac: The Next Generation (1 of 2)</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></description>
				<content:encoded><![CDATA[<div class='dropshadowboxes-container ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#f2ede3;    '>
                            
<div class="su-note" style="border-color:#e5e5e5;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#ffffff;border-color:#ffffff;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<p><a href="/wp-content/uploads/2017/02/water-1828846_1280.jpg"><img class="aligncenter size-large wp-image-2536" src="/wp-content/uploads/2017/02/water-1828846_1280-1024x682.jpg" alt="Water Drop" width="1024" height="682" srcset="/wp-content/uploads/2017/02/water-1828846_1280-1024x682.jpg 1024w, /wp-content/uploads/2017/02/water-1828846_1280-300x200.jpg 300w, /wp-content/uploads/2017/02/water-1828846_1280-768x512.jpg 768w, /wp-content/uploads/2017/02/water-1828846_1280.jpg 1280w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p>
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>The belief that complex systems require armies of designers and programmers is wrong. A system that is not understood in its entirety, or at least to a significant degree of detail by a single individual, should probably not be built.</p>
<p style="text-align: right;"><em><strong>&#8212; Niklaus Wirth</strong></em></p>
</blockquote>
</div>
</div></div>

                            </div>
                        </div>
<hr />
<span class="dropcap">I</span>n the summer of 2003, I was almost at the end of <a href="https://arxiv.org/abs/1607.06973" target="_blank" rel="noopener">my M.Sc. thesis</a>. One day I was surfing the web searching for some references to add to the thesis I&#8217;d been writing. I ran into Mikael Nilsson’s interesting <a href="http://cid.nada.kth.se/pdf/CID-201.pdf" target="_blank" rel="noopener">M.Sc. thesis</a> “Geometric Algebra with Conzilla: Building a Conceptual Web of Mathematics”. His work contains a nice introduction to Geometric Algebra, with accompanying <a href="https://en.wikipedia.org/wiki/Unified_Modeling_Language" target="_blank" rel="noopener">UML</a>-based conceptual models. It got me very curious about GA. I made some more searches finding a few papers, books, and tutorials. After reading some of them I was suddenly transferred into a new world of algebraic abstractions. For the first time in my life as a student, engineer, and software developer I could hope to express, explore, and manipulate geometric abstractions with such clarity. I then decided that my Ph.D. will be about exploring Geometric Algebra using the best way I know: developing software. It was a natural decision to make given GA&#8217;s potential, but a hard and lonely journey to make. About 8 years have passed now developing my tool, <strong><a href="https://gmac-guides.netlify.com/index.php/about-gmac/" target="_blank" rel="noopener">GMac</a></strong>, into its current state all by myself passing through difficult events I could only have passed by Allah&#8217;s will and mercy.</p>
<p>In this post and the next, I talk about this journey and some of the lessons I learned along the way. I talk about how the current GMac design came to appear and the joys I found learning the hard way that profound belief <sup class='endnote'><a href='#en-2532-1' id='enref-2532-1' onclick='return hhEndnotes_show(2532)'>1</a></sup>, solid foundation, clear goals, and lots of patience are together the only way to realizing distant dreams.</p>
<hr />
<h3>Discovering The Computational Universe</h3>
<div class="su-note" style="border-color:#dad5cc;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#f2ede3;border-color:#fcfbf9;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>I had a very selfish reason for building Mathematica. I wanted to use it myself, a bit like Galileo got to use his telescope four hundred years ago. But I wanted to look, not at the astronomical universe, but at the computational universe.</p>
<p style="text-align: right;"><em><strong>&#8212; Stephen Wolfram</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#f2ede3;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<p><a href="/wp-content/uploads/2017/02/Rule30-first-500-rows.png"><img class="aligncenter wp-image-2486 size-medium" src="/wp-content/uploads/2017/02/Rule30-first-500-rows-300x150.png" alt="Rule30-first-500-rows" width="300" height="150" srcset="/wp-content/uploads/2017/02/Rule30-first-500-rows-300x150.png 300w, /wp-content/uploads/2017/02/Rule30-first-500-rows-768x384.png 768w, /wp-content/uploads/2017/02/Rule30-first-500-rows.png 1008w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p style="text-align: center;"><span style="font-size: 14px;">Rule 30: Rich behavior can emerge from<br />
very simple computational rules. (<a href="https://en.wikipedia.org/wiki/Rule_30" target="_blank" rel="noopener">source</a>)</span></p>
</div>

                            </div>
                        </div>
<p>In the Autumn of 2005, I&#8217;d just begun my Ph.D. preparatory courses when I had another perceptual shift, this time in how I think about computations. I found Stephen Wolfram&#8217;s 2002 fascinating book <strong>&#8220;<a href="http://www.wolframscience.com/thebook.html" target="_blank" rel="noopener">A New Kind of Science</a>&#8221; (NKS)</strong> after watching <a href="https://www.youtube.com/watch?v=_eC14GonZnU&amp;t=2s" target="_blank" rel="noopener">one of his lectures about it</a>. After reading a few pages of NKS online, I couldn&#8217;t stop until I finished reading the whole book, without the endnotes, in just 2 weeks. I couldn&#8217;t wait to buy the book because it would take at least a month to arrive back then so <a href="http://www.wolframscience.com/nks/" target="_blank" rel="noopener">I read it online</a>.</p>
<p>Reading this book made me rethink about many concepts of science, mathematics, and computation that I took for granted. Concepts like <a href="http://www.wolframscience.com/nks/chap-4--systems-based-on-numbers/" target="_blank" rel="noopener">numbers</a>, <a href="http://www.wolframscience.com/nks/chap-6--starting-from-randomness/" target="_blank" rel="noopener">chaos</a>, <a href="http://www.wolframscience.com/nks/chap-6--starting-from-randomness/" target="_blank" rel="noopener">randomness</a>, <a href="http://www.wolframscience.com/nks/chap-3--the-world-of-simple-programs/" target="_blank" rel="noopener">complexity</a>, <a href="https://www.youtube.com/watch?v=DJ0WG3D3m1U" target="_blank" rel="noopener">intelligence</a>, <a href="http://www.wolframscience.com/nks/p606--traditional-mathematics-and-mathematical-formulas/" target="_blank" rel="noopener">mathematical models</a>, and <a href="http://www.wolframscience.com/nks/chap-11--the-notion-of-computation/" target="_blank" rel="noopener">the nature of computation</a>. Although I don&#8217;t agree with everything he says in his book, Wolfram&#8217;s insights and explorations are fascinating and inspiring for someone like me. The most intriguing of all the concepts he talks about is the <strong><a href="http://www.stephenwolfram.com/publications/mining-computational-universe/" target="_blank" rel="noopener">Computational Universe</a></strong>. Wolfram used <a href="https://en.wikipedia.org/wiki/Cellular_automaton" target="_blank" rel="noopener">cellular automata</a> and similar computational tools for mapping and mining the computational universe.</p>
<p>I instantly realized that Geometric Algebra can be a uniquely valuable tool in any attempt to explore the computational universe. I just needed the right computational vessel to make such explorations. I searched a lot but found none that suited my goals. I read that Wolfram had created <a href="https://en.wikipedia.org/wiki/Wolfram_Mathematica" target="_blank" rel="noopener"><strong>Mathematica</strong></a> as his personal lab for doing computational experiments. All this made me decide to create my own GA-based tool for voyaging and exploring the computational universe, and so my journey began.</p>
<p>&nbsp;</p>
<h3>Creating The Perfect Library</h3>
<div class="su-note" style="border-color:#dad5cc;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#f2ede3;border-color:#fcfbf9;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>Good judgment comes from experience, and experience comes from bad judgment.</p>
<p style="text-align: right;"><em><strong>&#8212; Frederick P. Brooks</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#f2ede3;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<p><a href="/wp-content/uploads/2017/02/OOPrinciples.jpg"><img class="aligncenter wp-image-2487 size-medium" src="/wp-content/uploads/2017/02/OOPrinciples-300x266.jpg" alt="OO Design Principles" width="300" height="266" srcset="/wp-content/uploads/2017/02/OOPrinciples-300x266.jpg 300w, /wp-content/uploads/2017/02/OOPrinciples.jpg 620w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p style="text-align: center;"><span style="font-size: 14px;">Object Oriented Design Principles (<a href="https://www.codeproject.com/Articles/186107/Object-Orientation-Beginners-Tutorial" target="_blank" rel="noopener">source</a>)</span></p>
</div>

                            </div>
                        </div>
<p>When it comes to repetitive tasks, good software developers are the laziest of people; they prefer to create programs to do the repetitive tasks for them <sup class='endnote'><a href='#en-2532-2' id='enref-2532-2' onclick='return hhEndnotes_show(2532)'>2</a></sup>. To be more accurate, their deep creativity drives their apparent laziness. They never want to do the same task twice, and if they have to, they never want to do it in the same way. They almost always enjoy finding the most general framework for doing several tasks at once with minimum effort; I&#8217;m one of those people.</p>
<p>I started my actual Ph.D. research work in 2007 by studying GA mathematics through reading the excellent book &#8220;<a href="http://www.sciencedirect.com/science/book/9780123694652" target="_blank" rel="noopener">Geometric Algebra for Computer Science</a>&#8220;. In 2008 I started to investigate several software designs and implementations in hope to implement a single perfect universal GA-based software library.</p>
<p>Driven by my creative laziness, I initially thought that the powerful unification GA brings to mathematics can be directly translated into a unified software library suitable for all <a href="/index.php/2015/09/18/ga-computing2/" target="_blank" rel="noopener">Geometric Computing</a> purposes. I was naive back then with little experience in the difficult problems that face designing large sophisticated multi-purpose software systems. I gradually realized that this perfect software library is a myth. While working on the development of two big decision support software systems based on relational databases for several years, I gradually gained experience in the true meaning of the phrase &#8220;Necessity is the Mother of Invention&#8221;.</p>
<p>Successful software libraries are mainly driven by necessity not only by the elegance of some underlying abstraction, even a beautiful algebraic abstraction such as GA. Each particular application has its own set of necessities that we, software engineers, call requirements: <a href="https://en.wikipedia.org/wiki/Functional_requirement" target="_blank" rel="noopener">functional</a>, <a href="https://en.wikipedia.org/wiki/Non-functional_requirement" target="_blank" rel="noopener">non-functional</a>, financial, scope related, performance related, etc. There can never be a single perfect software library suitable for all applications in a wide-ranging domain like Geometric Computing.</p>
<p>Failing in my initial attempt I went higher in the level of abstraction. I had a good background in <a href="https://en.wikipedia.org/wiki/Object-oriented_design" target="_blank" rel="noopener">Object-Oriented (OO) Software Design</a>. Why not, I asked myself, create an OO design based on the mathematical concepts of Geometric Algebra and then derive specific concrete implementations for specific applications. After all, this is how I learned about GA originally; using UML to diagram GA&#8217;s main concepts and relations. I soon found that OO design is a good conceptual tool to study some domain, but there can never be a single OO design suitable for all purposes either; especially when good memory\processing performance is critical <sup class='endnote'><a href='#en-2532-3' id='enref-2532-3' onclick='return hhEndnotes_show(2532)'>3</a></sup>. This got me to learn about other <a href="https://en.wikipedia.org/wiki/Programming_paradigm" target="_blank" rel="noopener">programming paradigms</a> I&#8217;ve never considered reading about before.</p>
<p>&nbsp;</p>
<h3>Shifting Paradigms</h3>
<div class="su-note" style="border-color:#dad5cc;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#f2ede3;border-color:#fcfbf9;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>One principle problem of educating software engineers is that they will not use a new method until they believe it works and, more importantly, that they will not believe the method will work until they see it for themselves.</p>
<p style="text-align: right;"><em><strong>&#8212; W. S. Humphrey, The Personal Software Process</strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#f2ede3;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<p><a href="/wp-content/uploads/2017/02/Programming-Paradigms.png"><img class="aligncenter wp-image-2480 size-medium" src="/wp-content/uploads/2017/02/Programming-Paradigms-300x261.png" alt="Programming Paradigms" width="300" height="261" srcset="/wp-content/uploads/2017/02/Programming-Paradigms-300x261.png 300w, /wp-content/uploads/2017/02/Programming-Paradigms-768x667.png 768w, /wp-content/uploads/2017/02/Programming-Paradigms-1024x889.png 1024w, /wp-content/uploads/2017/02/Programming-Paradigms.png 1179w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p style="text-align: center;"><span style="font-size: 14px;">Programming Paradigms (<a href="https://en.wikipedia.org/wiki/File:Programming_paradigms.svg" target="_blank" rel="noopener">source</a>)</span></p>
</div>

                            </div>
                        </div>
<p>Back in 2009, I only knew about <a href="https://en.wikipedia.org/wiki/Procedural_programming" target="_blank" rel="noopener">procedural programming</a> and <a href="https://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank" rel="noopener">object oriented programming</a>. I did some reading and discovered many other paradigms like functional, aspect-oriented, concurrent, dynamic, feature-oriented, and more. I realized that GA can be used equally well as an algebraic base for creating software in all of these paradigms. My deep creative laziness led me to the most general of all paradigms: <a href="https://en.wikipedia.org/wiki/Automatic_programming" target="_blank" rel="noopener">Automatic Meta-Programming</a>.</p>
<p>In April 2009 I bought and read the book &#8220;<a href="https://www.amazon.com/Generative-Programming-Methods-Tools-Applications/dp/0201309777" target="_blank" rel="noopener">Generative Programming: Methods, Tools, and Applications</a>&#8221; in which the authors present a grand tour of <a href="http://program-transformation.org/Transform/GenerativeProgrammingWiki" target="_blank" rel="noopener">Generative Programming</a> that is bound to become a classic. The book focuses on the generally unappreciated connection, back then, between <strong><a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="noopener">Domain Specific Languages</a> (DSLs)</strong> and Generative Programming as a motivation for future developments. I immediately started designing and implementing the first prototype of my dream GA-based software vessel for exploring the computational universe; I called it GMac. The prototype took a couple of months to be functional for the purpose of completing my Ph.D. <sup class='endnote'><a href='#en-2532-4' id='enref-2532-4' onclick='return hhEndnotes_show(2532)'>4</a></sup>.</p>
<p>I tried to apply some of what I&#8217;d learned from the Generative Programming book to implement simple GA-based algorithms, which I call <em><strong>G</strong></em>eometric <em><strong>Mac</strong></em>ros, through code generation. A geometric macro is a set of standard GA multivector expressions assigned to local variables inside the macro. There are no <a href="https://en.wikipedia.org/wiki/Control_flow" target="_blank" rel="noopener">control flow statements</a> inside this simple computational concept. All the computational power mainly comes from the mathematics of GA itself. I used the GMac prototype to implement parts of a ray tracer that I implemented based on Kevin Suffern&#8217;s nice book &#8220;<a href="http://www.raytracegroundup.com/" target="_blank" rel="noopener">Ray Tracing from the Ground Up</a>&#8220;, in addition to some other small computational problems.</p>
<p>Using Automatic Programming and Code Generation is a fundamental design decision I made for GMac. My experience with OO design can be expected to extend to all other programming paradigms. There can be no universal design methodology suitable for all applications. Even more, in a single large application, we might need several paradigms to be used <sup class='endnote'><a href='#en-2532-5' id='enref-2532-5' onclick='return hhEndnotes_show(2532)'>5</a></sup>. The only common activity between all paradigms is the creative composition of structured textual code that is both human-readable and machine-compilable. Instead of trying to force some kind of fixed design method upon GA-based application developers, we can just provide a set of powerful tools to help them in composing their application in whatever programming paradigm, software system design, or programming language they choose. I still believe this is the best, most effective, and most general way to use GA in software development.</p>
<p>&nbsp;</p>
<h3>Swimming Upstream</h3>
<div class="su-note" style="border-color:#dad5cc;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#f2ede3;border-color:#fcfbf9;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<blockquote><p>I had to resign from the University to continue my intellectual research project<sup class='endnote'><a href='#en-2532-6' id='enref-2532-6' onclick='return hhEndnotes_show(2532)'>6</a></sup>.</p>
<p style="text-align: right;"><em><strong>&#8212; <a href="http://www.arabphilosophers.com/English/philosophers/contemporary/contemporary-names/Abdl-Wahab%20Elmessiri/Article/E_Elmessiri.htm" target="_blank" rel="noopener">Professor Abdel-Wahab Elmessiri</a></strong></em></p>
</blockquote>
</div>
</div></div>
<div class='dropshadowboxes-container dropshadowboxes-right ' style='width:auto;'>
                            <div class='dropshadowboxes-drop-shadow dropshadowboxes-rounded-corners dropshadowboxes-inside-and-outside-shadow dropshadowboxes-curled dropshadowboxes-effect-default' style=' border: 1px solid #dddddd; height:; background-color:#f2ede3;    '>
                            
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<p><a href="/wp-content/uploads/2017/02/Introvert-Brain.jpg"><img class="aligncenter wp-image-2548 size-large" src="/wp-content/uploads/2017/02/Introvert-Brain-285x1024.jpg" alt="Introvert Brain" width="285" height="1024" srcset="/wp-content/uploads/2017/02/Introvert-Brain-285x1024.jpg 285w, /wp-content/uploads/2017/02/Introvert-Brain.jpg 736w" sizes="(max-width: 285px) 100vw, 285px" /></a></p>
<p style="text-align: center;"><span style="font-size: 14px;">I&#8217;m an Introvert. The brains of Introverts and<br />
Extroverts work quite differently.</span></p>
</div>

                            </div>
                        </div>
<p>My Ph.D. part of the journey was completed in April 2010 when I defended my thesis. It was an exhausting part of my life with many difficulties resulting from working in an anti-scientific, anti-creative environment by design; especially for <a href="https://www.quietrev.com/6-illustrations-that-show-what-its-like-in-an-introverts-head/" target="_blank" rel="noopener">introverted people</a> like me <sup class='endnote'><a href='#en-2532-7' id='enref-2532-7' onclick='return hhEndnotes_show(2532)'>7</a></sup>. In this difficult environment, I met many talented, highly creative, and mostly self-educated people. These people motivated their colleagues and students to make the best research possible and sincerely promoted good education. I&#8217;m very grateful for their presence in my life. The system itself is designed to kill the hope of such talented people or drive them out into more scientifically and humanly attractive environments <sup class='endnote'><a href='#en-2532-8' id='enref-2532-8' onclick='return hhEndnotes_show(2532)'>8</a></sup>. As Barry Schwartz <sup class='endnote'><a href='#en-2532-9' id='enref-2532-9' onclick='return hhEndnotes_show(2532)'>9</a></sup> describes it in <a href="https://www.ted.com/talks/barry_schwartz_the_way_we_think_about_work_is_broken?language=en" target="_blank" rel="noopener">his beautiful TED talk</a>:</p>
<blockquote><p>It is not true that you &#8220;just can&#8217;t get good help anymore.&#8221; It is true that you &#8220;can&#8217;t get good help anymore&#8221; when you give people work to do that is demeaning and soulless. And interestingly enough, Adam Smith — the same guy who gave us this incredible invention of mass production, and division of labor — understood this. He said, of people who worked in assembly lines, of men who worked in assembly lines, he says: &#8220;He generally becomes as stupid as it is possible for a human being to become.&#8221; Now, notice the word here is &#8220;become.&#8221; &#8220;He generally becomes as stupid as it is possible for a human being to become.&#8221; Whether he intended it or not, what Adam Smith was telling us there, is that the very shape of the institution within which people work creates people who are fitted to the demands of that institution and deprives people of the opportunity to derive the kinds of satisfactions from their work that we take for granted.</p></blockquote>
<p>You can get some idea about the results of this sad situation by reading this 2011 article by Hillel Ofek: &#8220;<a href="http://www.thenewatlantis.com/publications/why-the-arabic-world-turned-away-from-science" target="_blank" rel="noopener">Why the Arabic World Turned Away From Science</a>&#8220;. I can only pray and hope this situation changes in the near future.</p>
<p>In 2010 I made a mistake trying to publish my Ph.D. work as an article in a high-profile journal not concerned about Geometric Algebra. They rejected the article for good reasons, mostly not related to GA but to the article itself. The editor gave me a piece of advice going around Geometric Algebra having nothing new to offer in terms of applications in computer science. He emphasized that more effort must be made by the GA community to overcome this situation by finding new insights that only GA can provide. I realized then that choosing to do research using GA is a lonely path to take. Recently, I made some <a href="/index.php/category/interview/" target="_blank" rel="noopener">interviews</a> with leading researchers in the GA community who stated this experience in similar words. The situation has gotten much better in the last couple of years where GA-related research started to appear at increasing rates in many fields in engineering and computer science.</p>
<p>After completing my Ph.D. back in 2010 I knew I had to design a new version of GMac to realize my dream vessel for exploring the computational universe with Geometric Algebra. I knew it would be a difficult journey to make. As Walter Bright puts it in his article &#8220;<a href="http://www.drdobbs.com/architecture-and-design/so-you-want-to-write-your-own-language/240165488" target="_blank" rel="noopener">So You Want To Write Your Own Language?</a>&#8220;:</p>
<blockquote><p>First off, you&#8217;re in for a lot of work…years of work…most of which will be wandering in the desert. The odds of success are heavily stacked against you. If you are not strongly self-motivated to do this, it isn&#8217;t going to happen. If you need validation and encouragement from others, it isn&#8217;t going to happen.</p></blockquote>
<p>Nevertheless, I was certain that GA will be accepted in the near future as a major language for mathematical modeling in computer science and engineering. I was also certain that I will gain much experience and feel many joys developing the next generation of GMac. I could only work on my project alone against the surrounding environment for two to four months per year because of my many family obligations and non-research work duties. These available months weren&#8217;t even consecutive; they were spread along the year with no apparent order. During all these years whenever I got an opportunity to make research I faced a difficult question. Should I focus on writing papers in computer science topics not related to Geometric Algebra to be promoted? Or should I invest the little time I had in developing my dream vessel? I always chose the second.</p>
<p>After I finally got promoted to Assistant Professor <sup class='endnote'><a href='#en-2532-10' id='enref-2532-10' onclick='return hhEndnotes_show(2532)'>10</a></sup> in July 2010 and for another full year up to Summer 2011, I had to find additional jobs to support my family, so I had to delay developing the next generation of GMac until August 2011.</p>
<p>In <a href="/index.php/2017/02/10/gmac-tng-2/" target="_blank" rel="noopener">the final part</a> of this series, I will talk about the next phase of my journey developing GMac&#8217;s next generation. I will explain its main components and how I arrived at their design.</p>
<hr />
<div class="su-note" style="border-color:#dad5cc;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;"><div class="su-note-inner su-clearfix" style="background-color:#f2ede3;border-color:#fcfbf9;color:#464646;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;">
<div class="su-animate" style="visibility:hidden;-webkit-animation-duration:2s;-webkit-animation-delay:0s;animation-duration:2s;animation-delay:0s;" data-animation="fadeInUp" data-duration="2" data-delay="0">
<p style="text-align: center;"><span style="font-size: 28px; font-family: 'Traditional Arabic';"><strong>تم بحمد الله الجمعة 13 جماد أول 1438هـ</strong></span></p>
</div>
</div></div>
<hr />
<p>&nbsp;</p>
<div class='endnotes' id='hhendnotes-2532'>
<ol>
<li id='en-2532-1'>Belief in Islam, or &#8220;Iman&#8221; in Arabic, has 6 pillars: Belief in Allah, Belief in the angels, Belief in the revealed books, Belief in the commissioned Messengers (peace be upon them), Belief in the resurrection and the events of Qiyamah, Belief in the predestination by Allah of all things, both the (seemingly) good and the (seemingly) bad. You can read more details <a href="http://www.missionislam.com/knowledge/sixpillarsiman.htm" target="_blank" rel="noopener">about this central concept in here</a>. You can also watch this beautiful lecture illustrating the profound effects of believing in these 6 pillars on <a href="https://www.islamreligion.com/articles/78/jeffrey-lang-professor-of-mathematics-and-writer-usa/" target="_blank" rel="noopener">Dr. Jeffrey Lang</a>, an Associate Professor of Mathematics at the University of Kansas. <span class='endnotereverse'><a href='#enref-2532-1'>&#8617;</a></span></li>
<li id='en-2532-2'>Many online articles express this idea in one form or another as a common experience. For some examples, see <a href="https://swizec.com/blog/programmers-are-fucking-lazy/swizec/2648" target="_blank" rel="noopener">here</a>, <a href="https://blog.codinghorror.com/how-to-be-lazy-dumb-and-successful/" target="_blank" rel="noopener">here</a>, and <a href="https://jaxenter.com/results-developers-strategically-lazy-113513.html" target="_blank" rel="noopener">here</a>. <span class='endnotereverse'><a href='#enref-2532-2'>&#8617;</a></span></li>
<li id='en-2532-3'>I now know from first-hand experience that there are many deep conceptual problems associated with Object-Oriented Programming and the misuse of Object-Oriented Design. You can get a good idea by watching David West&#8217;s lecture &#8220;<a href="https://www.youtube.com/watch?v=RdE-d_EhzmA" target="_blank" rel="noopener">OOP is Dead! Long Live OODD!</a>&#8221; <span class='endnotereverse'><a href='#enref-2532-3'>&#8617;</a></span></li>
<li id='en-2532-4'>All the details of this GMac prototype can be found in my Ph.D. You can download a softcopy from <a href="https://arxiv.org/abs/1607.04767" target="_blank" rel="noopener">here</a>, or buy a hard copy <a href="https://www.amazon.com/Code-Generation-Geometric-Algebra-Abstractions/dp/3330804653" target="_blank" rel="noopener">from Amazon</a>. <span class='endnotereverse'><a href='#enref-2532-4'>&#8617;</a></span></li>
<li id='en-2532-5'>This occasional necessity affected the design of some powerful modern multi-paradigm languages like <a href="https://en.wikipedia.org/wiki/F_Sharp_(programming_language)" target="_blank" rel="noopener">F#</a> and <a href="https://www.scala-lang.org/" target="_blank" rel="noopener">Scala</a>, for example. <span class='endnotereverse'><a href='#enref-2532-5'>&#8617;</a></span></li>
<li id='en-2532-6'>Professor Abdel-Wahab Elmessiri is a famous Egyptian thinker, one of the critics of western modernity, and a pro of founding an &#8216;Islamic&#8217; version of modernism, author of the Encyclopedia &#8220;Jews, Judaism and Zionism&#8221;. <span class='endnotereverse'><a href='#enref-2532-6'>&#8617;</a></span></li>
<li id='en-2532-7'>In 2014, I read Susan Cain&#8217;s fascinating book &#8220;<a href="https://www.goodreads.com/book/show/8520610-quiet" target="_blank" rel="noopener">Quiet: The Power of Introverts in a World That Can&#8217;t Stop Talking</a>&#8220;. It profoundly changed how I perceive myself and others. You can get an idea about the importance of her ideas for all humans by watching <a href="https://www.ted.com/talks/susan_cain_the_power_of_introverts" target="_blank" rel="noopener">her TED talk</a>. Also, <a href="https://www.quietrev.com/6-illustrations-that-show-what-its-like-in-an-introverts-head/" target="_blank" rel="noopener">this nice article</a> illustrates how introverts&#8217; minds work internally. I recommend following her ideas as they are important for any activities requiring human interactions, especially teaching and learning. <span class='endnotereverse'><a href='#enref-2532-7'>&#8617;</a></span></li>
<li id='en-2532-8'>The direct cause of this can be found in <a href="http://www.yesmagazine.org/happiness/want-the-good-life-your-neighbors-need-it-too" target="_blank" rel="noopener">this article</a>, where epidemiologist Richard Wilkinson discusses new research showing that, among developed countries, the healthiest and happiest aren&#8217;t those with the highest incomes but those with the most equality. <span class='endnotereverse'><a href='#enref-2532-8'>&#8617;</a></span></li>
<li id='en-2532-9'>Barry Schwartz studies the link between economics and psychology, offering startling insights into modern life. He is the author of the book &#8220;Why We Work&#8221; providing an eye-opening, groundbreaking tour of the purpose of work in our lives. <span class='endnotereverse'><a href='#enref-2532-9'>&#8617;</a></span></li>
<li id='en-2532-10'>You can read more about academic ranks in Egyptian universities in <a href="https://en.wikipedia.org/wiki/Academic_ranks_in_Egypt" target="_blank" rel="noopener">here</a>. <span class='endnotereverse'><a href='#enref-2532-10'>&#8617;</a></span></li>
</ol>
</div>
<p>The post <a rel="nofollow" href="/index.php/2017/02/09/gmac-tng-1/">GMac: The Next Generation (1 of 2)</a> appeared first on <a rel="nofollow" href="/">Geometric Algebra Explorer</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/2017/02/09/gmac-tng-1/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
